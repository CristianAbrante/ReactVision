{"version":3,"sources":["components/layout/menu/MainMenuItem.js","components/layout/logo/Logo.js","components/layout/menu/MainMenu.js","components/layout/info/histogram/HistogramInfo.js","components/layout/info/histogram/Histogram.js","components/layout/info/histogram/ImageInfo.js","components/theme/index.js","components/layout/info/Info.js","processor/image/ProcessImage.js","processor/IO/ImageFileLoader.js","components/layout/error/ErrorHandler.js","components/layout/actions/LoadImageAction.js","components/layout/actions/SaveImageAction.js","processor/operations/point/LookUpTable.js","processor/operations/point/lineal/BlackAndWhite.js","components/layout/actions/point/lineal/BlackAndWhite.js","processor/operations/point/lineal/LinealFunction.js","processor/operations/point/lineal/LinealPicewiseAdjustment.js","components/layout/actions/point/lineal/LinealPicewiseAdjustment.js","processor/operations/point/lineal/BrightnessAndContrast.js","components/layout/actions/point/lineal/BrightnessAndContrast.js","processor/operations/point/non-lineal/HistogramEqualization.js","components/layout/actions/point/non-lineal/HistogramEqualization.js","processor/operations/point/non-lineal/HistogramSpecification.js","components/layout/actions/point/non-lineal/HistogramSpecification.js","processor/operations/point/non-lineal/GammaCorrection.js","components/layout/actions/point/non-lineal/GammaCorrection.js","processor/operations/point/non-lineal/ImageDifference.js","components/layout/actions/point/non-lineal/ImageDifference.js","processor/operations/point/non-lineal/ChangesDetection.js","components/layout/actions/point/non-lineal/ChangesDetection.js","components/layout/actions/point/non-lineal/cross-image/CrossImageGraph.js","processor/operations/point/non-lineal/ImageCrossSelection.js","components/layout/actions/point/non-lineal/cross-image/CrossImageSelection.js","processor/operations/point/non-lineal/ImageQuantizer.js","processor/operations/point/non-lineal/ImageResampler.js","components/layout/actions/point/non-lineal/ImageQuantization.js","processor/operations/geometric/VerticalFlipProcessor.js","processor/operations/geometric/HorizontalFlipProcessor.js","components/layout/actions/geometric/ImageFlipper.js","processor/operations/geometric/TransposedProcessor.js","components/layout/actions/geometric/TransposedImage.js","processor/operations/geometric/Scaling.js","processor/operations/geometric/interpolator/Interpolator.js","processor/operations/geometric/interpolator/NearestNeighbourInterpolator.js","processor/operations/geometric/interpolator/BilinealInterpolator.js","components/layout/actions/geometric/Scaling.js","processor/operations/geometric/ImageRotation.js","components/layout/actions/geometric/RotateImage.js","processor/operations/geometric/rotation/Rotation.js","processor/operations/geometric/rotation/RawRotation.js","processor/operations/geometric/rotation/InterpolatedRotation.js","components/layout/actions/geometric/Rotation.js","components/layout/actions/ActionPicker.js","components/layout/actions/Action.js","components/layout/image-workspace/ImageTabs.js","components/layout/image-workspace/WorkspaceBar.js","components/layout/image-workspace/ImageWorkspace.js","components/layout/footer/index.js","processor/image/Histogram.js","processor/controller/ImageController.js","App.js","index.js"],"names":["MainMenuItem","state","anchorEl","open","handleToggle","_this","setState","handleClose","event","contains","target","optionId","id","props","updateAction","handleOutClose","_this2","this","_this$props","options","title","react_default","a","createElement","Button_default","buttonRef","node","aria-owns","undefined","aria-haspopup","onClick","Popper_default","transition","disablePortal","_ref","TransitionProps","placement","Grow_default","Object","assign","style","transformOrigin","Paper_default","ClickAwayListener_default","onClickAway","MenuList_default","map","option","MenuItem_default","key","name","Component","Logo","className","href","MainMenu","items","Toolbar_default","logo_Logo","item","menu_MainMenuItem","HistogramInfo","_this$props$options","accumulative","red","green","blue","disableColors","FormControl_default","FormLabel_default","Divider_default","FormGroup_default","row","FormControlLabel_default","control","Switch_default","checked","value","onChange","onHistogramOption","label","onBrightnessOption","margin","Checkbox_default","onColorOptions","disabled","colors","r","g","b","brightness","HistogramGraph","getSeries","component","histogram","currentHistogram","data","getFormattedData","getDataSeries","color","es","curve","opacity","onMouseLeave","_onMouseLeave","height","left","right","top","bottom","stackBy","hideLine","tickValues","ImageInfo","getImageProperty","property","getImage","getHistogramProperty","toFixed","classes","root","Chip_default","chip","withStyles","theme","display","justifyContent","flexWrap","spacing","unit","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","useNextVariants","Info","renderHistogram","controller","getCurrentHistogram","background","padding","histogram_Histogram","handleBrightnessVisualization","handleHistogramVisualization","handleColorsVisualization","defineProperty","histogram_HistogramInfo","histogram_ImageInfo","ProcessImage","width","classCallCheck","getTitle","getFormat","format","getNumberOfStates","dataHistory","length","isAnyState","createNewState","getCurrentStateData","slice","setNewState","getWidth","getHeight","createNewBlankState","arrayLength","i","push","newState","dataHistoryIndex","pop","setInitialState","setPreviousState","setNextState","getImageData","ImageData","Uint8ClampedArray","getCurrentState","getNumberOfPixels","indexesAreInRange","x","y","getColorIndex","getComponent","position","setComponent","getColor","getBrightness","numericComponent","colorComponent","Error","index","setColor","colorIsInRange","setBrightness","getRedComponent","setRedComponent","getGreenComponent","setGreenComponent","getBlueComponent","setBlueComponent","getAlphaComponent","setAlphaComponent","alpha","rgb","getRGBComponents","Math","round","setRGBComponents","getRGBAComponents","setRGBAComponets","replace","split","dataHistorySizes","MIN_PIXEL_VALUE","MAX_PIXEL_VALUE","ImageFileLoader","getReadFile","image","setImage","shape","fileName","imageData","inputNode","callback","files","file","isAnImage","fileReader","FileReader","onload","pixels","result","err","message","readAsDataURL","type","includes","ErrorHandler","action","Button_Button","size","handler","Snackbar","anchorOrigin","vertical","horizontal","onClose","ContentProps","aria-describedby","errorMsg","LoadImageAction","possibleConstructorReturn","getPrototypeOf","call","error","handleError","msg","closeError","handleChange","e","loader","Loader","load","inputElem","current","add","openFileDialog","click","React","createRef","ref","error_ErrorHandler","SaveImageAction","labelWidth","handleFormChange","saveFile","numberOfImages","getCanvas","toBlob","blob","saveAs","getSelectedImage","ReactDOM","findDOMNode","InputLabelRef","offsetWidth","extensions","Extensions","formats","Typography_default","variant","Divider_Divider","formControl","InputLabel_default","htmlFor","Select_default","input","OutlinedInput_default","extension","button","LookUpTable","operation","fillTable","values","appendValue","perform","getValue","level","inputIsValid","BlackAndWhite","applyOperation","isAnyImageSelected","operationHasBeenApplied","blackAndWhite","BlackAndWhiteOperation","lut","applyPointOperation","aria-label","Add_default","ClampedLinealFunction","p1","p2","get","setEquationComponents","FUNCTION_MIN","FUNCTION_MAX","LinealPicewiseAdjustment","insert","point","valueIsValid","points","insertionIndex","getIntervalIndex","splice","setFunctions","functionIndex","functions","clampValue","firstPoint","secondPoint","LinealFunction","MAX_POINTS","linealPicewiseOperation","maxPointsReached","onChipDelete","console","log","updateState","linealPicewiseOperator","onInsertionValueChanged","addPoint","_this$state","Number","parseFloat","LinealPicewiseAdjustmentOperation","alignItems","Icon_default","Theme","TextField_default","InputLabelProps","shrink","mini","BrightnessAndContrast","oldMean","oldStdVar","newMean","newStdVar","setOldMean","setOldStdVar","setNewMean","setNewStdVar","styles","alignContent","slider","thumb","brightnessValue","contrastValue","brightnessAndContrast","onBrightnessSliderChange","onBrightnessTextFieldChange","onContrastSliderChange","onContrastTextFieldChange","BrightnessAndContrastOperation","getMean","getStdVar","_this$state2","Slider_default","container","track","min","max","aria-labelledby","textField","HistogramEqualization","getAccumulativeCount","k","equalization","HistogramEqualizationOperation","HistogramSpecification","toTransformHistogram","referenceHistogram","originalValue","getAccumulativeProbability","outputLevel","referenceHistogramTitle","selectedHistogram","histogramSpecificationOperation","HistogramSpecificationOperation","imageName","histogramIndex","getImageIndex","histograms","imageTitles","getImageTitles","Icon_Icon_default","Typography_Typography_default","Divider_Divider_default","flexDirection","minWidth","inputProps","Button_Button_default","GammaCorrection","gamma","setGamma","GAMMA_MIN","GAMMA_MAX","pow","MIN_GAMMA","GammaCorrectionOperation","MAX_GAMMA","inverted","getGammaValue","getGammaData","invertedChecked","onGammaChange","onGammaTextChange","Slider_Slider_default","TextField_TextField_default","ImageDifference","image1","image2","imagesHaveTheSameSize","resultImage","j","color1","color2","difference","abs","imageTitle","referenceImage","ImageDifferenceOperation","selectedImage","imageIndex","images","FormControl_FormControl_default","InputLabel_InputLabel_default","Select_Select_default","MenuItem_MenuItem_default","ChangesDetection","threshold","MIN_THRESHOLD","MAX_THRESHOLD","ChangesDetectionOperation","onThresholdChange","onThresholdTextChange","CrossImageGraph","ImageCrossSelection","radius","startPixel","endPixel","crossSelection","derivativeCrossSelection","setRadius","isAValidRadius","setReferenceImage","setCrossSelection","pixelIsInRange","crossSelectionPixels","Bresenham","pixel","pixelColor","derivativeColor","getDerivativeColor","addData","getFormattedCrossSelection","getFormattedDerivativeSelection","sumColor","numberOfNeighbours","getNormalizedColor","currentPixel","nextPixel","currentColor","list","formattedData","pointCount","MIN_RADIUS","MAX_RADIUS","CrossImageSelection","crossImageSelection","derivative","beginPoint","endPoint","getSectionOperation","displaySectionLine","CrossImageSelectionOperation","getData","currentImage","parseInt","newPoint","pointIsValid","onSwitchChecked","fillCircle","ctx","arc","PI","fillStyle","fill","updateImageCanvas","getContext","beginPath","moveTo","lineTo","lineWidth","strokeStyle","stroke","onRadiusChanged","onRadiusTextChange","FormControlLabel_FormControlLabel_default","Switch_Switch_default","cross_image_CrossImageGraph","step","ImageQuantizer","quantizeImage","bits","numberOfLevels","col","newScaleColor","originalScaleColor","floor","ImageResampler","MAX_VALUE","MIN_VALUE","resample","rows","cols","prevValues","rgbcolor","meansColors","ImageQuantization","quantizationLevel","resampleRows","resampleCols","updateImageHistogram","updateMethod","onQuantizationLevelChange","onQuantizationLevelTextChange","log2","onResampleSizeChange","InputProps","endAdornment","InputAdornment_default","VerticalTransformProcessor","applyGeometricChange","originalImage","rgbaComponent","HorizontalTransformProcessor","ImageFlipper","flipType","VerticalProcessor","HorizontalProcessor","TransposedProcessor","newImageData","from","TransposedImage","Scaling","horizontalFactor","verticalFactor","interpolator","newWidth","newHeight","interpolatedColor","interpolateColor","setVerticalFactorFromWidth","oldWidth","setVerticalFactor","setHoorizontalFactorFromHeight","oldHeight","setHorizontalFactor","setFactor","factor","factorIsValid","FACTOR_MIN","FACTOR_MAX","Interpolator","getNeighbourhood","X","Y","A","getNeighbour","B","C","D","isInBounds","OVER_LIMITS_COLOR","NearestNeighbourInterpolator","nearestNeighbourKey","bound","getPositionBound","neighbourhood","keys","neighbour","BilinealInterpolator","p","q","P","clampResult","interpolators","nearestNeighbour","bilineal","interpolatorsText","xFactor","ScalingOperation","yFactor","selectedInterpolator","getSelectedInterpolator","getFactor","resetActionMethod","onFactorChanged","onFactorTextChanged","onInterpolatorSelected","autoWidth","interpolatorName","ImageRotation","degrees","times","newImage","RotateImage","rotationDegrees","Rotation","createNewImageState","angle","getNewImageWidthAndHeight","getImageCorners","maxWidth","maxHeight","topLeft","topRight","bottomLeft","bottomRight","getRotatedImageCorners","corners","rotatedCorners","getRotationPosition","minMax","getMinMaxCorners","xCoordinates","yCoordinates","apply","radAngle","cos","sin","getDirectPosition","_this$getRotationPosi","getInversePosition","minX","minY","clampIndexes","MIN_ANGLE","MAX_ANGLE","RawRotation","InterpolatedRotation","positionIsValid","MIDDLE_ANGLE","RotationOperation","rotationMethods","raw","interpolated","selectedRotationMethod","getRotationMethod","getInterpolator","onAngleChanged","onAngleTextChanged","angleIsValid","onRotationMethodSelected","interpolatorSelectorDisabled","rotationMethod","actionPicker","load_img","actions_LoadImageAction","save_img","actions_SaveImageAction","black_white","point_lineal_BlackAndWhite","lineal_adjustment","point_lineal_LinealPicewiseAdjustment","brightness_contrast","point_lineal_BrightnessAndContrast","histogram_equalization","point_non_lineal_HistogramEqualization","histogram_specification","point_non_lineal_HistogramSpecification","gamma_correction","point_non_lineal_GammaCorrection","image_difference","point_non_lineal_ImageDifference","changes_detection","point_non_lineal_ChangesDetection","cross_image","cross_image_CrossImageSelection","image_flipper","geometric_ImageFlipper","image_transpose","geometric_TransposedImage","scale_image","actions_geometric_Scaling","rotate_image","geometric_RotateImage","rotation","geometric_Rotation","image_quantization","non_lineal_ImageQuantization","Action","currentAction","ActionPicker","renderAction","TITLE_MAX_LENGHT","ImageTabs","updateSelectedImage","handleCloseEvent","delete","stopPropagation","reduceTittle","AppBar_default","Tabs_default","getSelectedImageIndex","scrollable","scrollButtons","Tab_default","IconButton_default","marginRight","Clear_default","flexGrow","containerStyles","WorkspaceBar","calculateColor","_this$props$position","calculateColorText","_this$props$position2","calculatePosition","_this$props$position3","duplicateActualImage","updateImageState","avatar","Avatar_default","borderRight","workspaceStyle","canvasContainerStyle","overflow","regionStyle","ImageWorkspace","regions","canvasMovement","nativeEvent","offsetX","offsetY","mouseLeaved","setCropState","cropEnabled","handleCrop","originalImageData","fromX","fromY","toX","toY","handleKeyPress","canvasRef","regionRenderer","bind","assertThisInitialized","updateRegions","keyController","setCanvas","regionProps","isChanging","showCropper","image_workspace_ImageTabs","RegionSelect_default","maxRegions","constraint","onMouseMove","image_workspace_WorkspaceBar","aStyle","textDecoration","footer","Fragment","Histogram","count","mean","stdVar","entropy","setCount","setAccumulativeCount","setMean","setStdVar","setMinMax","setEntropy","getCount","getProbability","getMax","getMin","getEntropy","getImageWidth","getImageHeight","getFormattedCount","formatData","getFormattedAccumulativeCount","array","initializeObject","obj","components","Array","prevValue","actualValue","sqrt","selected","ImageController","canvas","imageToDisplay","putImageData","clearRect","titles","table","imageColor","tableColor","App","onKeyPressed","keyAction","updateController","updateCurrentAction","updateKeyController","gridContainerClass","esm","keyEventName","KEYDOWN","keyValue","onKeyHandle","gridItemClass","menu_MainMenu","MenuData","image_workspace_ImageWorkspace","info_Info","actions_Action","layout_footer","render","src_App_0","document","getElementById"],"mappings":"wnDA6EeA,6MAnEbC,MAAQ,CACNC,SAAU,KACVC,MAAM,KAGRC,aAAe,WACbC,EAAKC,SAAS,SAAAL,GAAK,MAAK,CAAEE,MAAOF,EAAME,WAGzCI,YAAc,SAAAC,GACZ,IAAIH,EAAKH,SAASO,SAASD,EAAME,QAAjC,CAGAL,EAAKC,SAAS,CAAEH,MAAM,IACtB,IAAIQ,EAAWH,EAAME,OAAOE,GAC5BP,EAAKQ,MAAMC,aAAaH,OAG1BI,eAAiB,WACfV,EAAKC,SAAS,CAAEH,MAAM,6EAGf,IAAAa,EAAAC,KAAAC,EACoBD,KAAKJ,MAAxBM,EADDD,EACCC,QAASC,EADVF,EACUE,MACTjB,EAASc,KAAKhB,MAAdE,KAER,OACIkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIG,UAAW,SAAAC,GACTV,EAAKd,SAAWwB,GAElBC,YAAWxB,EAAO,sBAAmByB,EACrCC,gBAAc,OACdC,QAASb,KAAKb,cACfgB,GAEHC,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQnB,KAAMA,EAAMD,SAAUe,KAAKf,SAAU8B,YAAU,EAACC,eAAa,GAClE,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,gBAAiBC,EAApBF,EAAoBE,UAApB,OACGf,EAAAC,EAAAC,cAACc,EAAAf,EAADgB,OAAAC,OAAA,GACQJ,EADR,CAEIvB,GAAG,iBACH4B,MAAO,CAAEC,gBAA+B,WAAdL,EAAyB,aAAe,mBACpEf,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,KACED,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAmBsB,YAAa5B,EAAKD,gBACnCM,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,KAEIH,EAAQ2B,IAAI,SAAAC,GAAM,OACd1B,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CACI2B,IAAKF,EAAOnC,GACZA,GAAImC,EAAOnC,GACXkB,QAASd,EAAKT,aACfwC,EAAOG,sBArDbC,aCOZC,2LAXX,OACI/B,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,SACbhC,EAAAC,EAAAC,cAAA,KAAG+B,KAAK,kDACNjC,EAAAC,EAAAC,cAAA,QAAM8B,UAAU,SAAhB,SACAhC,EAAAC,EAAAC,cAAA,QAAM8B,UAAU,UAAhB,mBANOF,gCCuBJI,mLAnBJ,IAAAlD,EAAAY,KACDuC,EAAQvC,KAAKJ,MAAM2C,MACzB,OACInC,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,KACED,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,KACED,EAAAC,EAAAC,cAACmC,EAAD,MACCF,EAAMV,IAAI,SAAAa,GAAI,OACXtC,EAAAC,EAAAC,cAACqC,EAAD,CACIX,IAAKU,EAAKvC,MACVA,MAAOuC,EAAKvC,MACZD,QAASwC,EAAKxC,QACdL,aAAcT,EAAKQ,MAAMC,0BAZtBqC,wJC8DRU,mLA1DJ,IAAAC,EACiD7C,KAAKJ,MAAMM,QAA5D4C,EADAD,EACAC,aAAcC,EADdF,EACcE,IAAKC,EADnBH,EACmBG,MAAOC,EAD1BJ,EAC0BI,KAAMC,EADhCL,EACgCK,cACvC,OACI9C,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,KACED,EAAAC,EAAAC,cAAC8C,EAAA/C,EAAD,0BACAD,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,MACAD,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,CAAWkD,KAAG,GACZnD,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CACIoD,QACErD,EAAAC,EAAAC,cAACoD,EAAArD,EAAD,CACIsD,QAASb,EACTc,MAAM,eACNC,SAAW7D,KAAKJ,MAAMkE,oBAE5BC,MAAM,iBACV3D,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CACIoD,QACErD,EAAAC,EAAAC,cAACoD,EAAArD,EAAD,CACIsD,QAAST,EACTU,MAAM,aACNC,SAAW7D,KAAKJ,MAAMoE,qBAE5BD,MAAM,gBAEZ3D,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,CAAWkD,KAAG,EAAChC,MAAO,CAAC0C,OAAQ,SAC7B7D,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CACIoD,QACErD,EAAAC,EAAAC,cAAC4D,EAAA7D,EAAD,CACIsD,QAASZ,EACTa,MAAM,MACNC,SAAW7D,KAAKJ,MAAMuE,eAAe,OACrCC,SAAUlB,IAEhBa,MAAM,QACV3D,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CACIoD,QACErD,EAAAC,EAAAC,cAAC4D,EAAA7D,EAAD,CACIsD,QAASX,EACTY,MAAM,QACNC,SAAW7D,KAAKJ,MAAMuE,eAAe,SACrCC,SAAUlB,IAEhBa,MAAM,UACV3D,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CACIoD,QACErD,EAAAC,EAAAC,cAAC4D,EAAA7D,EAAD,CACIsD,QAASV,EACTW,MAAM,OACNC,SAAW7D,KAAKJ,MAAMuE,eAAe,QACrCC,SAAUlB,IAEhBa,MAAM,kBApDM7B,qBCAtBmC,EAAS,CACbC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,WAAY,WAyDCC,6MApDbC,UAAY,SAAAC,GACV,IAAI9B,EAAe1D,EAAKQ,MAAMkD,aAC1B+B,EAAYzF,EAAKQ,MAAMkF,iBAC3B,GAAkB,eAAdF,EAA4B,CAC9B,IAAKxF,EAAKQ,MAAM6E,WACd,OAAO,KAET,IAAIM,EAAOF,EAAUG,iBAAiBJ,EAAW9B,GACjD,OAAO1D,EAAK6F,cAAcF,EAAMV,EAAOO,IAEvC,GAAIxF,EAAKQ,MAAM6E,WACb,OAAO,KACT,GAAIrF,EAAKQ,MAAMgF,GAAY,CACzB,IAAIG,EAAOF,EAAUG,iBAAiBJ,EAAW9B,GACjD,OAAO1D,EAAK6F,cAAcF,EAAMV,EAAOO,IAEvC,OAAO,QAKbK,cAAgB,SAACF,EAAMG,GACrB,OACI9E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CACIC,MAAM,gBACNF,MAAOA,EACPG,QAAQ,MACRN,KAAMA,6EAKd,OACI3E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CACIG,aAActF,KAAKuF,cACnBC,OAAQ,IACRvB,OAAQ,CAACwB,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IAC/CC,QAAQ,KACVzF,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAOW,UAAQ,EAACC,WAAY,CAAC,EAAG,GAAI,IAAK,IAAK,IAAK,OAClD/F,KAAK2E,UAAU,KACf3E,KAAK2E,UAAU,KACf3E,KAAK2E,UAAU,KACf3E,KAAK2E,UAAU,uBA/CCzC,sCCDvB8D,8MACJC,iBAAmB,SAAAC,GACjB,IAAIrB,EAAYzF,EAAKQ,MAAMiF,UAC3B,YAAkBlE,IAAdkE,EACK,IAEAA,EAAUsB,WAAWD,QAIhCE,qBAAuB,SAAAF,GACrB,IAAIrB,EAAYzF,EAAKQ,MAAMiF,UAC3B,QAAkBlE,IAAdkE,EACF,MAAO,IAGP,IAAIjB,EAAQiB,EAAUqB,KAAYzB,WAClC,OAAOb,EAAQ,IAAM,EAAIA,EAAQA,EAAMyC,QAAQ,4EAIzC,IACDC,EAAWtG,KAAKJ,MAAhB0G,QACP,OACIlG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI0D,MAAO,WAAa/D,KAAKiG,iBAAiB,aAC1Cf,MAAM,YACN9C,UAAWkE,EAAQG,OACvBrG,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI0D,MAAO,UAAY/D,KAAKiG,iBAAiB,qBACzCf,MAAM,YACN9C,UAAWkE,EAAQG,OACvBrG,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI0D,MAAO,UAAY/D,KAAKiG,iBAAiB,YACzCf,MAAM,YACN9C,UAAWkE,EAAQG,OACvBrG,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI0D,MAAO,WAAa/D,KAAKiG,iBAAiB,aAC1Cf,MAAM,YACN9C,UAAWkE,EAAQG,QAEzBrG,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI0D,MAAO,eAAiB/D,KAAKoG,qBAAqB,WAClDlB,MAAM,UACN9C,UAAWkE,EAAQG,OACvBrG,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI0D,MAAO,aAAe/D,KAAKoG,qBAAqB,aAChDlB,MAAM,UACN9C,UAAWkE,EAAQG,OACvBrG,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI0D,MAAO,YAAc/D,KAAKoG,qBAAqB,cAC/ClB,MAAM,UACN9C,UAAWkE,EAAQG,QAEzBrG,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI0D,MAAO,QAAU/D,KAAKoG,qBAAqB,UAC3ClB,MAAM,YACN9C,UAAWkE,EAAQG,OACvBrG,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI0D,MAAO,QAAU/D,KAAKoG,qBAAqB,UAC3ClB,MAAM,YACN9C,UAAWkE,EAAQG,gBAjEXvE,aAwETwE,wBAnFA,SAAAC,GAAK,MAAK,CACvBJ,KAAM,CACJK,QAAS,OACTC,eAAgB,SAChBC,SAAU,QAEZL,KAAM,CACJxC,OAAQ0C,EAAMI,QAAQC,KAAO,KA4ElBN,CAAmBV,IC/DnBW,GAtBDM,yBACV,CACEC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,YAGlBE,WAAY,CACVC,iBAAiB,KC0DVC,8MA7Db3I,MAAQ,CACN8D,cAAc,EACdC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,eAAe,KAGjB0E,gBAAkB,WAChB,IAAI/C,EAAYzF,EAAKQ,MAAMiI,WAAWC,sBACtC,YAAkBnH,IAAdkE,EAEEzE,EAAAC,EAAAC,cAAA,OACIiB,MAAO,CAACiE,OAAQ,QAASuC,WAAYpB,GAAMO,QAAQC,QAAQE,KAAMpD,OAAQ,oBAM7E7D,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACyG,QAAS,SACpB5H,EAAAC,EAAAC,cAAC2H,EAAD,CACInF,aAAgB1D,EAAKJ,MAAM8D,aAC3B2B,WAAcrF,EAAKJ,MAAMkE,cACzBoB,EAAKlF,EAAKJ,MAAM+D,IAChBwB,EAAKnF,EAAKJ,MAAMgE,MAChBwB,EAAKpF,EAAKJ,MAAMiE,KAChB6B,iBAAkBD,QAKhCqD,8BAAgC,WAC9B9I,EAAKC,SAAS,CAAC6D,eAAgB9D,EAAKJ,MAAMkE,mBAG5CiF,6BAA+B,WAC7B/I,EAAKC,SAAS,CAACyD,cAAe1D,EAAKJ,MAAM8D,kBAG3CsF,0BAA4B,SAAAxD,GAAS,OAAI,SAAArF,GACvCH,EAAKC,SAALgC,OAAAgH,EAAA,EAAAhH,CAAA,GAAgBuD,EAAYrF,EAAME,OAAOkE,oFAIzC,IAAIkB,EAAY7E,KAAKJ,MAAMiI,WAAWC,sBACtC,OACI1H,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACEkB,MAAO,CAACiE,OAAQ,SAChBpF,EAAAC,EAAAC,cAACgI,EAAD,CACIpI,QAASF,KAAKhB,MACd8E,kBAAmB9D,KAAKmI,6BACxBhE,eAAgBnE,KAAKoI,0BACrBpE,mBAAoBhE,KAAKkI,gCAC5BlI,KAAK4H,kBACNxH,EAAAC,EAAAC,cAACiI,GAAD,CACI1D,UAAWA,YAxDN3C,iCCNbsG,GA6BJ,SAAAA,EAAYrI,EAAOsI,EAAOjD,EAAQT,GAAM,IAAA3F,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAAwI,GAAAxI,KAaxC2I,SAAW,WACT,OAAOvJ,EAAKe,OAd0BH,KAiBxC4I,UAAY,WACV,OAAOxJ,EAAKyJ,QAlB0B7I,KAqBxC8I,kBAAoB,WAClB,OAAO1J,EAAK2J,YAAYC,QAtBchJ,KAyBxCiJ,WAAa,WACX,OAAoC,IAA7B7J,EAAK0J,qBA1B0B9I,KA6BxCkJ,eAAiB,WACf,GAAI9J,EAAK6J,aAAc,CACrB,IAAIlE,EAAO3F,EAAK+J,sBAAsBC,QACtChK,EAAKiK,YAAYtE,EAAM3F,EAAKkK,WAAYlK,EAAKmK,eAhCTvJ,KAoCxCwJ,oBAAsB,SAACf,EAAOjD,GAG5B,IAFA,IAAIT,EAAO,GACP0E,EAAchB,EAAQjD,EAAS,EAC1BkE,EAAI,EAAGA,EAAID,EAAaC,IAC/B3E,EAAK4E,KAAK,GAEZvK,EAAKiK,YAAYtE,EAAM0D,EAAOjD,IA1CQxF,KA6CxCqJ,YAAc,SAACtE,EAAM0D,EAAOjD,GAM1B,IALA,IAAIoE,EAAW,CACbnB,MAAOA,EACPjD,OAAQA,EACRT,KAAMA,GAED3F,EAAK6J,cAAgB7J,EAAKyK,mBAAqBzK,EAAK0J,oBAAsB,GAC/E1J,EAAK2J,YAAYe,MAEnB1K,EAAK2J,YAAYY,KAAKC,IAtDgB5J,KAyDxC+J,gBAAkB,WAChB3K,EAAKyK,iBAAmB,GA1Dc7J,KA6DxCgK,iBAAmB,WACa,IAA1B5K,EAAKyK,mBACPzK,EAAKyK,kBAAoB,IA/DW7J,KAmExCiK,aAAe,WACT7K,EAAKyK,mBAAqBzK,EAAK0J,oBAAsB,IACvD1J,EAAKyK,kBAAoB,IArEW7J,KAyExCkK,aAAe,WACb,OAAO,IAAIC,UACP,IAAIC,kBAAkBhL,EAAK+J,uBAC3B/J,EAAKkK,WACLlK,EAAKmK,cA7E6BvJ,KAiFxCqK,gBAAkB,WAChB,OAAOjL,EAAK2J,YAAY3J,EAAKyK,mBAlFS7J,KAqFxCmJ,oBAAsB,WACpB,OAAO/J,EAAKiL,kBAAkBtF,MAtFQ/E,KAyFxCsJ,SAAW,WACT,OAAOlK,EAAKiL,kBAAkB5B,OA1FQzI,KA6FxCuJ,UAAY,WACV,OAAOnK,EAAKiL,kBAAkB7E,QA9FQxF,KAiGxCsK,kBAAoB,WAClB,OAAOlL,EAAKkK,WAAalK,EAAKmK,aAlGQvJ,KA8GxCuK,kBAAoB,SAACC,EAAGC,GACtB,OAAQD,GAAK,GAAKA,EAAIpL,EAAKkK,YACnBmB,GAAK,GAAKA,EAAIrL,EAAKmK,aAhHWvJ,KA0IxC0K,cAAgB,SAACF,EAAGC,GAClB,OAAIrL,EAAKmL,kBAAkBC,EAAGC,GACrBA,GAAuB,EAAlBrL,EAAKkK,YAAsB,EAAJkB,OAEnC,GA9IoCxK,KA0JxC2K,aAAe,SAAAC,GACb,OAAOxL,EAAK+J,sBAAsByB,IA3JI5K,KAqKxC6K,aAAe,SAACD,EAAU1F,GACxB9F,EAAK+J,sBAAsByB,GAAY1F,GAtKDlF,KAkLxC8K,SAAW,SAACN,EAAGC,EAAG7F,GAChB,GAAkB,eAAdA,EACF,OAAOxF,EAAK2L,cAAcP,EAAGC,GAE/B,IAAMO,EAAmBxC,EAAayC,eAAerG,GACrD,QAAyBjE,IAArBqK,EACF,MAAM,IAAIE,MAAM,sBAAwBtG,GAE1C,IAAMuG,EAAQ/L,EAAKsL,cAAcF,EAAGC,GACpC,QAAc9J,IAAVwK,EACF,MAAM,IAAID,MAAM,IAAMV,EAAI,KAAOC,EAAI,uBAEvC,OAAOrL,EAAKuL,aAAaQ,EAAQH,IA9LKhL,KAyMxCoL,SAAW,SAACZ,EAAGC,EAAG7F,EAAWM,GAC3B,GAAkB,eAAdN,EAAJ,CAKA,IAAK4D,EAAa6C,eAAenG,GAC/B,MAAM,IAAIgG,MAAM,0BAA4BhG,GAE9C,IAAM8F,EAAmBxC,EAAayC,eAAerG,GACrD,QAAyBjE,IAArBqK,EACF,MAAM,IAAIE,MAAM,sBAAwBtG,GAE1C,IAAMuG,EAAQ/L,EAAKsL,cAAcF,EAAGC,GACpC,QAAc9J,IAAVwK,EACF,MAAM,IAAID,MAAM,IAAMV,EAAI,KAAOC,EAAI,uBAEvCrL,EAAKyL,aAAaM,EAAQH,EAAkB9F,QAf1C9F,EAAKkM,cAAcd,EAAGC,EAAGvF,IA3MWlF,KA6NxCuL,gBAAkB,SAACf,EAAGC,GACpB,OAAOrL,EAAK0L,SAASN,EAAGC,EAAG,MA9NWzK,KAiOxCwL,gBAAkB,SAAChB,EAAGC,EAAG1H,GACvB3D,EAAKgM,SAASZ,EAAGC,EAAG,IAAK1H,IAlOa/C,KAqOxCyL,kBAAoB,SAACjB,EAAGC,GACtB,OAAOrL,EAAK0L,SAASN,EAAGC,EAAG,MAtOWzK,KAyOxC0L,kBAAoB,SAAClB,EAAGC,EAAGzH,GACzB5D,EAAKgM,SAASZ,EAAGC,EAAG,IAAKzH,IA1OahD,KA6OxC2L,iBAAmB,SAACnB,EAAGC,GACrB,OAAOrL,EAAK0L,SAASN,EAAGC,EAAG,MA9OWzK,KAiPxC4L,iBAAmB,SAACpB,EAAGC,EAAGxH,GACxB7D,EAAKgM,SAASZ,EAAGC,EAAG,IAAKxH,IAlPajD,KAqPxC6L,kBAAoB,SAACrB,EAAGC,GACtB,OAAOrL,EAAK0L,SAASN,EAAGC,EAAG,MAtPWzK,KAyPxC8L,kBAAoB,SAACtB,EAAGC,EAAGsB,GACzB3M,EAAKgM,SAASZ,EAAGC,EAAG,IAAKsB,IA1Pa/L,KAsQxC+K,cAAgB,SAACP,EAAGC,GAClB,IAAMuB,EAAM5M,EAAK6M,iBAAiBzB,EAAGC,GACrC,OAAOyB,KAAKC,MAAM,KAAQH,EAAI1H,EAAI,KAAQ0H,EAAIzH,EAAI,KAAQyH,EAAIxH,IAxQxBxE,KAmRxCsL,cAAgB,SAACd,EAAGC,EAAGhG,GACrBrF,EAAKgN,iBAAiB5B,EAAGC,EAAGhG,EAAYA,EAAYA,IApRdzE,KA+RxCiM,iBAAmB,SAACzB,EAAGC,GACrB,MAAO,CACLnG,EAAGlF,EAAKmM,gBAAgBf,EAAGC,GAC3BlG,EAAGnF,EAAKqM,kBAAkBjB,EAAGC,GAC7BjG,EAAGpF,EAAKuM,iBAAiBnB,EAAGC,KAnSQzK,KAuSxCoM,iBAAmB,SAAC5B,EAAGC,EAAG1H,EAAKC,EAAOC,GACpC7D,EAAKoM,gBAAgBhB,EAAGC,EAAG1H,GAC3B3D,EAAKsM,kBAAkBlB,EAAGC,EAAGzH,GAC7B5D,EAAKwM,iBAAiBpB,EAAGC,EAAGxH,IA1SUjD,KAsTxCqM,kBAAoB,SAAC7B,EAAGC,GACtB,IAAMuB,EAAM5M,EAAK6M,iBAAiBzB,EAAGC,GACrC,MAAO,CACLnG,EAAG0H,EAAI1H,EACPC,EAAGyH,EAAIzH,EACPC,EAAGwH,EAAIxH,EACPnE,EAAGjB,EAAKyM,kBAAkBrB,EAAGC,KA5TOzK,KAgUxCsM,iBAAmB,SAAC9B,EAAGC,EAAG1H,EAAKC,EAAOC,EAAM8I,GAC1C3M,EAAKgN,iBAAiB5B,EAAGC,EAAG1H,EAAKC,EAAOC,GACxC7D,EAAK0M,kBAAkBtB,EAAGC,EAAGsB,IAjU7B/L,KAAKG,MAAQA,EAAMoM,QAAQ,QAAS,IACpCvM,KAAK6I,OAAS1I,EAAMqM,MAAM,KAAK1C,MAC/B9J,KAAK+I,YAAc,GACnB/I,KAAKyM,iBAAmB,GACxBzM,KAAK6J,iBAAmB,OACXlJ,IAAToE,EACF/E,KAAKwJ,sBAELxJ,KAAKqJ,YAAYtE,EAAM0D,EAAOjD,IAtC9BgD,GACGkE,gBAAkB,EADrBlE,GAEGmE,gBAAkB,IAFrBnE,GAGGyC,eAAiB,CACtB3G,EAAG,EACHC,EAAG,EACHC,EAAG,EACHnE,EAAG,GAPDmI,GA0JG6C,eAAiB,SAACnG,GACvB,OAAQA,GAASsD,GAAakE,iBACtBxH,EAAQsD,GAAamE,iBAuMlBnE,+BCxTAoE,+DA5CbC,YAAc,WACZ,OAAOzN,EAAK0N,YAOdC,SAAW,SAAAhI,GACT,IAAIiI,EAAQjI,EAAKiI,MAEbvE,EAAyB,IAAjBuE,EAAMhE,OAAegE,EAAM,GAAKA,EAAM,GAC9CxH,EAA0B,IAAjBwH,EAAMhE,OAAegE,EAAM,GAAKA,EAAM,GACnD5N,EAAK0N,MAAQ,IAAItE,GAAapJ,EAAK6N,SAAUxE,EAAOjD,EAAQT,EAAKA,kEARjE,OAAO/E,KAAKkN,uCAWTC,EAAWC,GAAU,IAAArN,EAAAC,KACxB,IAAKmN,EAAUE,MACb,MAAM,IAAInC,MAAM,wCAEhB,IAAIoC,EAAOH,EAAUE,MAAM,GAE3B,GADArN,KAAKiN,SAAWK,EAAKrL,MAChB2K,EAAgBW,UAAUD,GAC7B,MAAM,IAAIpC,MAAM,mCAElB,IAAIsC,EAAa,IAAIC,WACrBD,EAAWE,OAAS,WAClBC,KAAOH,EAAWI,OAAQ,SAACC,EAAKF,GAC9B,GAAIE,EACF,MAAM,IAAI3C,MAAM2C,EAAIC,SAEtB/N,EAAKgN,SAASY,GACdP,OAGJI,EAAWO,cAAcT,uCAIZA,GACf,OAAOA,EAAKU,KAAKC,SAAS,qCClBfC,8MAzBbC,OACI/N,EAAAC,EAAAC,cAAC8N,GAAA,EAAD,CACIlJ,MAAM,YACNmJ,KAAK,QACLxN,QAASzB,EAAKQ,MAAM0O,SAHxB,iFASF,OACIlO,EAAAC,EAAAC,cAACiO,GAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CxP,KAAMc,KAAKJ,MAAMV,KACjByP,QAAS3O,KAAKJ,MAAM0O,QACpBM,aAAc,CACZC,mBAAoB,cAEtBf,QAAS9N,KAAKJ,MAAMkP,SACpBX,OAAQnO,KAAKmO,gBApBEjM,aCiEZ6M,eAxDb,SAAAA,EAAYnP,GAAO,IAAAR,EAAA,OAAAiC,OAAAqH,EAAA,EAAArH,CAAArB,KAAA+O,IACjB3P,EAAAiC,OAAA2N,EAAA,EAAA3N,CAAArB,KAAAqB,OAAA4N,EAAA,EAAA5N,CAAA0N,GAAAG,KAAAlP,KAAMJ,KANRZ,MAAQ,CACNmQ,OAAO,EACPL,SAAU,SAGO1P,EAanBgQ,YAAc,SAACC,GACbjQ,EAAKC,SAAS,CAAC8P,OAAO,EAAML,SAAUO,KAdrBjQ,EAiBnBkQ,WAAa,SAACD,GACZjQ,EAAKC,SAAS,CAAC8P,OAAO,KAlBL/P,EAqBnBmQ,aAAe,SAAAC,GACb,IAAIC,EAAS,IAAIC,GACb7H,EAAazI,EAAKQ,MAAMiI,WAC5B,IACE4H,EAAOE,KAAKvQ,EAAKwQ,UAAUC,QAAS,WAClC,IAAI/C,EAAQ2C,EAAO5C,cACnBhF,EAAWiI,IAAIhD,KAGnB,MAAO0C,GACLpQ,EAAKgQ,YAAYI,EAAE1B,WA/BJ1O,EAmCnB2Q,eAAiB,WACf3Q,EAAKwQ,UAAUC,QAAQG,SAlCvB5Q,EAAKwQ,UAAYK,IAAMC,YAFN9Q,mFAMfY,KAAK4P,UAAUC,QAAQG,qDAIzBhQ,KAAK4P,UAAUC,QAAQG,yCA8BvB,OACE5P,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACI6P,IAAKnQ,KAAK4P,UACV5B,KAAK,OACLzM,MAAO,CAACqF,QAAY,QACpB/C,SAAU7D,KAAKuP,eACnBnP,EAAAC,EAAAC,cAAC8P,GAAD,CACIlR,KAAMc,KAAKhB,MAAMmQ,MACjBL,SAAU9O,KAAKhB,MAAM8P,SACrBR,QAAStO,KAAKsP,qBAxDIpN,iHCoBxBmO,eAQJ,SAAAA,EAAYzQ,GAAO,IAAAR,EAAA,OAAAiC,OAAAqH,EAAA,EAAArH,CAAArB,KAAAqQ,IACjBjR,EAAAiC,OAAA2N,EAAA,EAAA3N,CAAArB,KAAAqB,OAAA4N,EAAA,EAAA5N,CAAAgP,GAAAnB,KAAAlP,KAAMJ,KARRZ,MAAQ,CACN6J,OAAQ,GACRsG,OAAO,EACPL,SAAU,QACVwB,WAAY,GAGKlR,EAInBgQ,YAAc,SAACC,GACbjQ,EAAKC,SAAS,CAAC8P,OAAO,EAAML,SAAUO,KALrBjQ,EAQnBmR,iBAAkB,SAAAhR,GACjBH,EAAKC,SAALgC,OAAAgH,EAAA,EAAAhH,CAAA,GAAiB9B,EAAME,OAAOwC,KAAO1C,EAAME,OAAOmE,SAThCxE,EAYnBkQ,WAAa,SAACD,GACZjQ,EAAKC,SAAS,CAAC8P,OAAO,KAbL/P,EAsBnBoR,SAAW,WACT,IACE,GAAGpR,EAAKQ,MAAMiI,WAAW4I,kBAAoB,EAC3C,MAAM,IAAIvF,MAAM,sCAGlB,GAAyB,KAAtB9L,EAAKJ,MAAM6J,OACV,MAAM,IAAIqC,MAAM,wCAIpB,IAAIrD,EAAazI,EAAKQ,MAAMiI,WACxBgB,EAASzJ,EAAKJ,MAAM6J,OAExBhB,EAAW6I,YAAYC,OAAO,SAASC,GACrCC,KAAOD,EAAM/I,EAAWiJ,mBAAmBnI,WAAa,IAAME,KAEhE,MAAO2G,GACPpQ,EAAKgQ,YAAYI,EAAE1B,WAxCJ1O,mFAiBfY,KAAKX,SAAS,CACZiR,WAAYS,IAASC,YAAYhR,KAAKiR,eAAeC,+CA2BlD,IAAAnR,EAAAC,KACCsG,EAAYtG,KAAKJ,MAAjB0G,QACF6K,EAAaC,GAAWC,QAE9B,OACEjR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,CAAYkR,QAAQ,WAAWhQ,MAAO,CAACyG,QAAS,UAAhD,cAGA5H,EAAAC,EAAAC,cAACkR,GAAA,EAAD,MACApR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAakR,QAAQ,WAAWnP,UAAWkE,EAAQmL,aAC/CrR,EAAAC,EAAAC,cAACoR,GAAArR,EAAD,CACE8P,IAAK,SAAAA,GACHpQ,EAAKkR,cAAgBd,GAEvBwB,QAAQ,0BAJV,UAQAvR,EAAAC,EAAAC,cAACsR,GAAAvR,EAAD,CACEuD,MAAO5D,KAAKhB,MAAM6J,OAClBhF,SAAU7D,KAAKuQ,iBACfsB,MACEzR,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CACEiQ,WAAYtQ,KAAKhB,MAAMsR,WACvBrO,KAAK,SACLtC,GAAG,4BAKPwR,EAAWtP,IAAI,SAACgH,GAAD,OAAYzI,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAU2B,IAAK6G,EAAOkJ,UAAWnO,MAAOiF,EAAOkJ,WAAYlJ,EAAO5G,WAKjG7B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC8N,GAAA,EAAD,CACEhM,UAAWkE,EAAQ0L,OACnBjO,MAAM,YACNlD,QAASb,KAAKwQ,UAHhB,aAOFpQ,EAAAC,EAAAC,cAAC8P,GAAD,CACIlR,KAAMc,KAAKhB,MAAMmQ,MACjBL,SAAU9O,KAAKhB,MAAM8P,SACrBR,QAAStO,KAAKsP,qBArGIpN,aA+GfwE,wBA1HA,SAAAC,GAAK,MAAK,CACvB8K,YAAa,CACXxN,OAAQ0C,EAAMI,QAAQC,KACtByB,MAAO,KAGTuJ,OAAQ,CACN/N,OAAQ0C,EAAMI,QAAQC,QAmHXN,CAAmB2J,wBCvGnB4B,GA/Bb,SAAAA,EAAYC,GAAW,IAAA9S,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAAiS,GAAAjS,KAIvBmS,UAAY,SAACD,GACX9S,EAAKgT,OAAS,GACd,IAAK,IAAI1I,EAAI,EAAGA,EAAIlB,GAAamE,gBAAiBjD,IAChDtK,EAAKiT,YAAYH,EAAUI,QAAQ5I,KAPhB1J,KAWvBuS,SAAW,SAAAC,GACT,OAAIpT,EAAKqT,aAAaD,GACbpT,EAAKgT,OAAOI,QAEnB,GAfmBxS,KAmBvBqS,YAAc,SAAAzO,GACRxE,EAAKqT,aAAa7O,IACpBxE,EAAKgT,OAAOzI,KAAK/F,IArBE5D,KAyBvByS,aAAe,SAACZ,GACd,OAAQA,GAAS,GACVA,EAAQrJ,GAAamE,iBA1B5B3M,KAAKmS,UAAUD,ICCJQ,yCALbJ,QAAU,SAAAT,GACR,OAAOA,ICoCIa,8MA9BbC,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WACL,GAAIA,EAAW+K,qBAAsB,CACnC,IAAKxT,EAAKyT,wBAAyB,CACjC,IAAI/F,EAAQjF,EAAWiJ,mBACvBhE,EAAM5D,iBACN4D,EAAM7C,eACN7K,EAAKyT,yBAA0B,EAEjC,IAAIC,EAAgB,IAAIC,GACpBC,EAAM,IAAIf,GAAYa,GAC1BjL,EAAWoL,oBAAoBD,EAAK,wFAKtC,OACE5S,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIkR,QAAQ,MACRrM,MAAM,YACNgO,aAAW,MACXrS,QAASb,KAAK2S,gBAChBvS,EAAAC,EAAAC,cAAC6S,GAAA9S,EAAD,eA1BkB6B,qDC0BbkR,GAtBb,SAAAA,EAAYC,EAAIC,GAAI,IAAAlU,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAAoT,GAAApT,KAIpBuT,IAAM,SAAA/I,GACJ,QAAU7J,IAAN6J,EACF,MAAM,IAAIU,MAAM,mBAClB,OAAO9L,EAAKiB,EAAImK,EAAIpL,EAAKoF,GAPPxE,KAUpBwT,sBAAwB,SAACH,EAAIC,GAC3B,QAAW3S,IAAP0S,QAA2B1S,IAAP2S,EACtB,MAAM,IAAIpI,MAAM,gCAElB,GAAImI,EAAG7I,IAAM8I,EAAG9I,EACd,MAAM,IAAIU,MAAM,yCAElB9L,EAAKiB,GAAKiT,EAAG7I,EAAI4I,EAAG5I,IAAM6I,EAAG9I,EAAI6I,EAAG7I,GACpCpL,EAAKoF,EAAI6O,EAAG5I,EAAIrL,EAAKiB,EAAIgT,EAAG7I,GAjB5BxK,KAAKwT,sBAAsBH,EAAIC,ICP7BG,GAAejL,GAAakE,gBAC5BgH,GAAelL,GAAamE,gBAAkB,EA2ErCgH,GArEb,SAAAA,IAAc,IAAAvU,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAA2T,GAAA3T,KASd4T,OAAS,SAAAC,GACP,IAAKzU,EAAK0U,aAAaD,EAAMrJ,KAAOpL,EAAK0U,aAAaD,EAAMpJ,GAC1D,MAAM,IAAIS,MAAM,+BAAiC2I,EAAMrJ,EAAI,IAAMqJ,EAAMpJ,GAEzE,GAAIoJ,EAAMrJ,IAAMkJ,GACdtU,EAAK2U,OAAOjK,MACZ1K,EAAK2U,OAAOpK,KAAKkK,OACZ,CACL,IAAIG,EAAiB5U,EAAK6U,iBAAiBJ,EAAMrJ,GAC7CpL,EAAK2U,OAAOC,EAAiB,GAAGxJ,IAAMqJ,EAAMrJ,EAC9CpL,EAAK2U,OAAOG,OAAOF,EAAiB,EAAG,EAAGH,GAE1CzU,EAAK2U,OAAOG,OAAOF,EAAgB,EAAGH,GAG1CzU,EAAK+U,gBAxBOnU,KA2BdsS,QAAU,SAAAE,GACR,IAAKpT,EAAK0U,aAAatB,GACrB,MAAM,IAAItH,MAAM,0BAElB,IAAIkJ,EAAgBhV,EAAK6U,iBAAiBzB,GAAS,EAC/C5O,EAAQxE,EAAKiV,UAAUD,GAAeb,IAAIf,GAC9C,OAAOpT,EAAKkV,WAAW1Q,IAjCX5D,KAoCdiU,iBAAmB,SAAArQ,GACjB,IAAK,IAAI8F,EAAI,EAAGA,EAAItK,EAAK2U,OAAO/K,OAAQU,IACtC,GAAI9F,EAAQxE,EAAK2U,OAAOrK,GAAGc,EACzB,OAAOd,EAEX,OAAOtK,EAAK2U,OAAO/K,OAAS,GAzChBhJ,KA4CdmU,aAAe,WACb/U,EAAKiV,UAAY,GACjB,IAAK,IAAI3K,EAAI,EAAGA,EAAItK,EAAK2U,OAAO/K,OAAS,EAAGU,IAAK,CAC/C,IAAI6K,EAAanV,EAAK2U,OAAOrK,GACzB8K,EAAcpV,EAAK2U,OAAOrK,EAAI,GAClCtK,EAAKiV,UAAU1K,KAAK,IAAI8K,GAAeF,EAAYC,MAjDzCxU,KAqDd8T,aAAe,SAAAlQ,GACb,OAAQA,GAAS6P,IACT7P,GAAS8P,IAvDL1T,KA0DdsU,WAAa,SAAA1Q,GACX,OAAIA,EAAQ6P,GACHA,GAEL7P,EAAQ8P,GACHA,GAEFxH,KAAKC,MAAMvI,IAhElB,IAAIyP,EACA,CAAC7I,EAAGiJ,GAAehJ,EAAGgJ,IACtBH,EACA,CAAC9I,EAAGkJ,GAAcjJ,EAAGiJ,IACzB1T,KAAK+T,OAAS,CAACV,EAAIC,GACnBtT,KAAKmU,gBCOHO,GAAa,GAyIJf,eA9Hb,SAAAA,EAAY/T,GAAO,IAAAR,EAAA,OAAAiC,OAAAqH,EAAA,EAAArH,CAAArB,KAAA2T,IACjBvU,EAAAiC,OAAA2N,EAAA,EAAA3N,CAAArB,KAAAqB,OAAA4N,EAAA,EAAA5N,CAAAsS,GAAAzE,KAAAlP,KAAMJ,KATRiT,yBAA0B,EAQPzT,EAPnBJ,MAAQ,CACNwL,EAAG,EACHC,EAAG,EACHkK,wBAAyB,KACzBC,kBAAkB,GAGDxV,EAOnBuT,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WACL,GAAIA,EAAW+K,qBAAsB,CACnC,IAAKxT,EAAKyT,wBAAyB,CACjC,IAAI/F,EAAQjF,EAAWiJ,mBACvBhE,EAAM5D,iBACN4D,EAAM7C,eACN7K,EAAKyT,yBAA0B,EAEjC,IAAIG,EAAM,IAAIf,GAAY7S,EAAKJ,MAAM2V,yBACrC9M,EAAWoL,oBAAoBD,EAAK,gBAjBrB5T,EAqBnByV,aAAe,SAAAhB,GAAK,OAAI,WACtBiB,QAAQC,IAAIlB,EAAMrJ,EAAI,IAAMqJ,EAAMpJ,KAtBjBrL,EAyBnB4V,YAAc,WACZ5V,EAAKC,SAAS,CAAC4V,uBAAwB7V,EAAKJ,MAAM2V,2BA1BjCvV,EA6BnB8V,wBAA0B,SAAAtQ,GAAS,OAAI,SAAArF,GACrC,IAAIqE,EAAQrE,EAAME,OAAOmE,MACrBA,GAAS4E,GAAakE,iBACnB9I,EAAQ4E,GAAamE,iBAC1BvN,EAAKC,SAALgC,OAAAgH,EAAA,EAAAhH,CAAA,GAAgBuD,EAAYhB,MAjCbxE,EAqCnB+V,SAAW,WAAM,IAAAC,EACuBhW,EAAKJ,MAAtCwL,EADU4K,EACV5K,EAAGC,EADO2K,EACP3K,EAAGkK,EADIS,EACJT,wBACXnK,EAAI6K,OAAOC,WAAW9K,GACtBC,EAAI4K,OAAOC,WAAW7K,GACH,kBAAPD,GAAkC,kBAAPC,IACrCkK,EAAwBf,OAAO,CAACpJ,EAAGA,EAAGC,EAAGA,IACrCkK,EAAwBZ,OAAO/K,SAAW0L,IAC5CtV,EAAKC,SAAS,CAACuV,kBAAkB,IAEnCxV,EAAK4V,cACL5V,EAAKuT,mBA7CPvT,EAAKJ,MAAM2V,wBACP,IAAIY,GACRnW,EAAKuT,iBAJYvT,wEAoDjB,IAAI2U,EAAS/T,KAAKhB,MAAM2V,wBAAwBZ,OAChD,OACI3T,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAACmV,GAAApV,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,yBACA5H,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,CACIkR,QAAQ,YADZ,gCAKFnR,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAQ,OAAQC,eAAgB,SAAU4B,MAAO,SAC5DrI,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAQsD,MAAO,IAAKjD,OAAQ,KAC1BpF,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CACID,MAAOwQ,GAAMxO,QAAQM,UAAUH,KAC/BtC,KAAMgP,MAId3T,EAAAC,EAAAC,cAAA,WACGyT,EAAOlS,IAAI,SAACgS,GACX,OAAQzT,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACE2B,IAAK,MAAQ6R,EAAMrJ,EAAI,OAASqJ,EAAMpJ,EACtClJ,MAAO,CAAC0C,OAAQ,OAChBF,MAAO,MAAQ8P,EAAMrJ,EAAI,OAASqJ,EAAMpJ,EACxCvF,MAAM,YACNqM,QAAQ,gBAItBnR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqV,GAAAtV,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBF,MAAM,IACNH,MAAO5D,KAAKhB,MAAMwL,EAClBwD,KAAK,SACL4H,gBAAiB,CACfC,QAAQ,GAEV5R,OAAO,SACPJ,SAAU7D,KAAKkV,wBAAwB,OAE3C9U,EAAAC,EAAAC,cAACqV,GAAAtV,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBF,MAAM,IACNH,MAAO5D,KAAKhB,MAAMyL,EAClBuD,KAAK,SACL4H,gBAAiB,CACfC,QAAQ,GAEV5R,OAAO,SACPJ,SAAU7D,KAAKkV,wBAAwB,QAG7C9U,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIyV,MAAI,EACJvE,QAAQ,MACRrM,MAAM,YACNgO,aAAW,MACXrS,QAASb,KAAKmV,SACd/Q,SAAUpE,KAAKhB,MAAM4V,kBACvBxU,EAAAC,EAAAC,cAAC6S,GAAA9S,EAAD,gBA/HyB6B,iCCoCxB6T,GArDb,SAAAA,EAAYC,EAASC,EAAWC,EAASC,GAAW,IAAA/W,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAA+V,GAAA/V,KAOpDoW,WAAa,SAAAJ,GACP5W,EAAK0U,aAAakC,KACpB5W,EAAK4W,QAAUA,IATiChW,KAYpDqW,aAAe,SAAAJ,GACT7W,EAAK0U,aAAamC,KACpB7W,EAAK6W,UAAYA,IAd+BjW,KAiBpDsW,WAAa,SAAAJ,GACP9W,EAAK0U,aAAaoC,KACpB9W,EAAK8W,QAAUA,IAnBiClW,KAuBpDuW,aAAe,SAAAJ,GACT/W,EAAK0U,aAAaqC,KACpB/W,EAAK+W,UAAYA,IAzB+BnW,KA4BpDsS,QAAU,SAAAE,GACR,QAAc7R,IAAV6R,EAAqB,CACvB,IAAI5O,EAAQsI,KAAKC,MAAO/M,EAAK+W,UAAY/W,EAAK6W,WAAczD,EAAQpT,EAAK4W,SAAW5W,EAAK8W,SACzF,OAAO9W,EAAKkV,WAAW1Q,KA/ByB5D,KAqCpD8T,aAAe,SAAAlQ,GACb,OAAQA,GAAS4E,GAAakE,iBACtB9I,EAAQ4E,GAAamE,iBAvCqB3M,KA0CpDsU,WAAa,SAAA1Q,GACX,OAAIA,EAAQ4E,GAAakE,gBAChBlE,GAAakE,gBAElB9I,GAAS4E,GAAamE,gBACjBnE,GAAamE,gBAAkB,EAEjC/I,GAhDP5D,KAAKoW,WAAWJ,GAChBhW,KAAKsW,WAAWJ,GAChBlW,KAAKqW,aAAaH,GAClBlW,KAAKuW,aAAaJ,ICAhBK,GAAS,CACbjQ,KAAM,CACJkC,MAAO,IACP7B,QAAS,OACTC,eAAgB,aAChB2O,WAAY,SACZiB,aAAc,gBACdxS,OAAQ,QAEVyS,OAAQ,CACNjO,MAAO,QACPxE,OAAQ,OACR+D,QAAS,YAEX2O,MAAO,CACL5O,WAAY2N,GAAMxO,QAAQM,UAAUH,OAIlC0O,eAQJ,SAAAA,EAAYnW,GAAO,IAAAR,EAAAiC,OAAAqH,EAAA,EAAArH,CAAArB,KAAA+V,IACjB3W,EAAAiC,OAAA2N,EAAA,EAAA3N,CAAArB,KAAAqB,OAAA4N,EAAA,EAAA5N,CAAA0U,GAAA7G,KAAAlP,KAAMJ,KARRiT,yBAA0B,EAOPzT,EALnBJ,MAAQ,CACN4X,gBAAiB,EACjBC,cAAe,GAGEzX,EAcnBuT,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WACL,GAAIA,EAAW+K,qBAAsB,CACnC,IAAKxT,EAAKyT,wBAAyB,CACjC,IAAI/F,EAAQjF,EAAWiJ,mBACvBhE,EAAM5D,iBACN4D,EAAM7C,eACN7K,EAAKyT,yBAA0B,EALE,IAAAuC,EAOIhW,EAAKJ,MAAvC4X,EAP8BxB,EAO9BwB,gBAAiBC,EAPazB,EAObyB,cACtBzX,EAAK0X,sBAAsBR,WAAWM,GACtCxX,EAAK0X,sBAAsBP,aAAaM,GACxC,IAAI7D,EAAM,IAAIf,GAAY7S,EAAK0X,uBAC/BjP,EAAWoL,oBAAoBD,EAAK,gBA3BrB5T,EA+BnB2X,yBAA2B,SAACxX,EAAOqE,GACjCxE,EAAKC,SAAS,CAACuX,gBAAiBhT,IAChCxE,EAAKuT,kBAjCYvT,EAoCnB4X,4BAA8B,SAAAzX,GAC5B,IAAIqE,EAAQrE,EAAME,OAAOmE,MACrBA,EAAQ4E,GAAamE,iBAClB/I,GAAS4E,GAAakE,iBAC3BtN,EAAKC,SAAS,CAACuX,gBAAiBvB,OAAOC,WAAW/V,EAAME,OAAOmE,SAEjExE,EAAKuT,kBA1CYvT,EA6CnB6X,uBAAyB,SAAC1X,EAAOqE,GAC/BxE,EAAKC,SAAS,CAACwX,cAAejT,IAC9BxE,EAAKuT,kBA/CYvT,EAkDnB8X,0BAA4B,SAAA3X,GAC1B,IAAIqE,EAAQrE,EAAME,OAAOmE,MACrBA,EAAQ4E,GAAamE,iBAClB/I,GAAS4E,GAAakE,iBAC3BtN,EAAKC,SAAS,CAACwX,cAAetX,EAAME,OAAOmE,QAE7CxE,EAAKuT,kBAtDL,IAAI9K,EAAazI,EAAKQ,MAAMiI,WAC5BzI,EAAK0X,sBACD,IAAIK,GAA+B,EAAK,EAAK,EAAK,GACtD,IAAItS,EAAYgD,EAAWC,sBALV,YAMCnH,IAAdkE,IACFzF,EAAKJ,MAAM4X,gBAAkB/R,EAAUuS,UAAU3S,WACjDrF,EAAKJ,MAAM6X,cAAgBhS,EAAUwS,YAAY5S,WACjDrF,EAAK0X,sBAAsBV,WAAWhX,EAAKJ,MAAM4X,iBACjDxX,EAAK0X,sBAAsBT,aAAajX,EAAKJ,MAAM6X,gBAVpCzX,wEA2DV,IACCkH,EAAYtG,KAAKJ,MAAjB0G,QADDgR,EAEgCtX,KAAKhB,MAAvC4X,EAFEU,EAEFV,gBAAiBC,EAFfS,EAEeT,cACtB,OACIzW,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAACmV,GAAApV,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,gBACA5H,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,CACEkR,QAAQ,YADV,4BAKFnR,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,MACAD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,CACIV,GAAG,QACH4B,MAAO,CAACyG,QAAS,SAFrB,cAKA5H,EAAAC,EAAAC,cAACiX,GAAAlX,EAAD,CACIiG,QACE,CAAEkR,UAAWlR,EAAQoQ,OACnBe,MAAOnR,EAAQqQ,MACfA,MAAOrQ,EAAQqQ,OAEnBe,IAAOlP,GAAakE,gBACpBiL,IAAOnP,GAAamE,gBAAkB,EACtC/I,MAAOgT,EACPgB,kBAAgB,QAChB/T,SAAU7D,KAAK+W,2BAEnB3W,EAAAC,EAAAC,cAACqV,GAAAtV,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBtE,GAAG,kBACHiE,MAAOgT,EACP5I,KAAK,SACL5L,UAAWkE,EAAQuR,UACnBF,IAAK,IACL1T,OAAO,SACPJ,SAAU7D,KAAKgX,4BACf9R,MAAM,eAGZ9E,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,CACIV,GAAG,QACH4B,MAAO,CAACyG,QAAS,SAFrB,YAKA5H,EAAAC,EAAAC,cAACiX,GAAAlX,EAAD,CACIiG,QACE,CAAEkR,UAAWlR,EAAQoQ,OACnBe,MAAOnR,EAAQqQ,MACfA,MAAOrQ,EAAQqQ,OAEnBe,IAAOlP,GAAakE,gBACpBiL,IAAOnP,GAAamE,gBAAkB,EACtC/I,MAAOiT,EACPe,kBAAgB,QAChB/T,SAAU7D,KAAKiX,yBAEnB7W,EAAAC,EAAAC,cAACqV,GAAAtV,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBtE,GAAG,kBACHiE,MAAOiT,EACP7I,KAAK,SACL5L,UAAWkE,EAAQuR,UACnBF,IAAK,IACL1T,OAAO,SACPJ,SAAU7D,KAAKkX,0BACfhS,MAAM,wBA1IYhD,aAmJrBwE,wBAAW8P,GAAX9P,CAAmBqP,IChL5BtC,GAAejL,GAAakE,gBAC5BgH,GAAelL,GAAamE,gBAAkB,EA+BrCmL,GAzBb,SAAAA,EAAYjT,GAAW,IAAAzF,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAA8X,GAAA9X,KAKvBsS,QAAU,SAAAE,GACR,OAAOpT,EAAKkV,WAAWpI,KAAKC,MAAM/M,EAAKyF,UAAUkT,qBAAqBvF,GAAO/N,WAAarF,EAAK4Y,GAAK,IAN/EhY,KASvB8T,aAAe,SAAAlQ,GACb,OAAQA,GAAS6P,IACV7P,GAAS8P,IAXK1T,KAcvBsU,WAAa,SAAA1Q,GACX,OAAIA,EAAQ6P,GACHA,GAEL7P,EAAQ8P,GACHA,GAEFxH,KAAKC,MAAMvI,IApBlB5D,KAAK6E,UAAYA,EACjB7E,KAAKgY,EAAIhY,KAAK6E,UAAUyF,oBAAsBoJ,IC0CnCoE,8MAvCbnF,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WACL,GAAIA,EAAW+K,uBACPxT,EAAKyT,wBAAyB,CACpC,IAAI/F,EAAQjF,EAAWiJ,mBACnBjM,EAAYgD,EAAWC,sBAC3BgF,EAAM5D,iBACN4D,EAAM7C,eACN,IAAIgO,EACA,IAAIC,GAA+BrT,GACnCmO,EAAM,IAAIf,GAAYgG,GAC1BpQ,EAAWoL,oBAAoBD,EAAK,cACpC5T,EAAKyT,yBAA0B,4EAKjC,OACIzS,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAACmV,GAAApV,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,YACA5H,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,CACIkR,QAAQ,YADZ,2BAKFnR,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,MACAD,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBsN,QAAQ,cACRrM,MAAM,YACNrE,QAASb,KAAK2S,gBAJlB,8BA9B0BzQ,yECT9BuR,GAAejL,GAAakE,gBAC5BgH,GAAelL,GAAamE,gBAAkB,EAgCrCwL,GA1Bb,SAAAA,EAAYC,EAAsBC,GAAoB,IAAAjZ,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAAmY,GAAAnY,KAKtDsS,QAAU,SAAAE,GACR,IAAKpT,EAAK0U,aAAatB,GACrB,MAAM,IAAItH,MAAM,kBAAoBsH,GAItC,IAFA,IAAI8F,EAAgBlZ,EAAKgZ,qBAAqBG,2BAA2B/F,GAAO/N,WAC5E+T,EAAc,EACXA,GAAe9E,IAAc,CAGlC,GADItU,EAAKiZ,mBAAmBE,2BAA2BC,GAAa/T,YAC9C6T,EACpB,OAAOE,EACTA,GAAe,IAhBmCxY,KAoBtD8T,aAAe,SAAAlQ,GACb,OAAQA,GAAS6P,IACV7P,GAAS8P,IArBhB1T,KAAKoY,qBAAuBA,EAC5BpY,KAAKqY,mBAAqBA,uBC8FfF,8MAxFbtF,yBAA0B,IAE1B7T,MAAQ,CACNyZ,wBAAyB,GACzBJ,wBAAoB1X,KAGtBgS,eAAiB,WACfmC,QAAQC,IAAI,WADS,IAEhBlN,EAAczI,EAAKQ,MAAnBiI,WACAwQ,EAAsBjZ,EAAKJ,MAA3BqZ,mBACL,GAAIxQ,EAAW+K,2BACcjS,IAAvB0X,EAAkC,CACpC,IAAIvL,EAAQjF,EAAWiJ,mBAClB1R,EAAKyT,2BACR/F,EAAQjF,EAAWiJ,oBACb5H,iBACN4D,EAAM7C,eACN7K,EAAKyT,yBAA0B,GAEjC,IAAI6F,EAAoB7Q,EAAWC,sBACnC1I,EAAKuZ,gCACD,IAAIC,GAAgCF,EAAmBL,GAC3D,IAAIrF,EAAM,IAAIf,GAAY7S,EAAKuZ,iCAC/B9Q,EAAWoL,oBAAoBD,EAAK,kBAK1CzD,aAAe,SAAAhQ,GAAS,IACjBsI,EAAczI,EAAKQ,MAAnBiI,WACDgR,EAAYtZ,EAAME,OAAOmE,MACzBkV,EAAiBjR,EAAWkR,cAAcF,GAC1CH,EACA7Q,EAAWmR,WAAWF,GAC1B1Z,EAAKC,SAAS,CACZoZ,wBAAyBI,EACzBR,mBAAoBK,6EAIf,IACA7Q,EAAc7H,KAAKJ,MAAnBiI,WACDoR,EAAcpR,EAAWqR,iBAC/B,OACI9Y,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAAC6Y,GAAA9Y,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,YACA5H,EAAAC,EAAAC,cAAC8Y,GAAA/Y,EAAD,CACIkR,QAAQ,YADZ,4BAKFnR,EAAAC,EAAAC,cAAC+Y,GAAAhZ,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQ0S,cAAc,SAAU9D,WAAY,WAChEpV,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAakB,MAAO,CAACgY,SAAU,IAAKtV,OAAQyR,GAAM3O,QAAQC,OACxD5G,EAAAC,EAAAC,cAACoR,GAAArR,EAAD,CAAYsR,QAAQ,cAApB,mBACAvR,EAAAC,EAAAC,cAACsR,GAAAvR,EAAD,CACIuD,MAAO5D,KAAKhB,MAAMyZ,wBAClBe,WAAY,CACVvX,KAAM,qBACNtC,GAAI,cAENkE,SAAU7D,KAAKuP,aACfnL,UAAWyD,EAAW+K,sBAEvBqG,EAAYpX,IAAI,SAAA1B,GACf,OAAOC,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CACH2B,IAAK7B,EACLyD,MAAOzD,GACRA,OAKTC,EAAAC,EAAAC,cAACmZ,GAAApZ,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBsN,QAAQ,cACRrM,MAAM,YACNrE,QAASb,KAAK2S,gBAJlB,gCA7EyBzQ,qDCb/BuR,GAAejL,GAAakE,gBAC5BgH,GAAelL,GAAamE,gBAAkB,EAE9C+M,GAKJ,SAAAA,EAAYC,GAAO,IAAAva,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAA0Z,GAAA1Z,KAInB4Z,SAAW,SAAAD,GACLA,EAAQD,EAAgBG,WACrBF,GAASD,EAAgBI,YAC9B1a,EAAKua,MAAQA,IAPE3Z,KAWnBsS,QAAU,SAAAE,GACR,IAAKpT,EAAK0U,aAAatB,GACrB,MAAM,IAAItH,MAAM,uBAAyBsH,GAE3C,IAAI5O,EAAQ8P,GAAexH,KAAK6N,IAAIvH,EAAQkB,GAActU,EAAKua,OAC/D,OAAOva,EAAKkV,WAAW1Q,IAhBN5D,KAmBnB8T,aAAe,SAAAlQ,GACb,OAAQA,GAAS6P,IACV7P,GAAS8P,IArBC1T,KAwBnBsU,WAAa,SAAA1Q,GACX,OAAIA,EAAQ6P,GACHA,GAEL7P,EAAQ8P,GACHA,GAEFxH,KAAKC,MAAMvI,IA9BlB5D,KAAK4Z,SAASD,IANZD,GAEGG,UAAY,EAFfH,GAGGI,UAAY,GAqCNJ,UCvBTlD,GAAS,CACbjQ,KAAM,CACJkC,MAAO,IACP7B,QAAS,OACTC,eAAgB,aAChB2O,WAAY,SACZiB,aAAc,gBACdxS,OAAQ,QAEVyS,OAAQ,CACNjO,MAAO,QACPxE,OAAQ,QAEV0S,MAAO,CACL5O,WAAY2N,GAAMxO,QAAQM,UAAUH,OAIlC2S,GAAYC,GAAyBJ,UAAY,EACjDK,GAAYD,GAAyBH,UAErCJ,8MACJ7G,yBAA0B,IAE1B7T,MAAQ,CACNmb,UAAU,EACVR,MAAOK,MAGTrH,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WACL,GAAIA,EAAW+K,qBAAsB,CACnC,IAAKxT,EAAKyT,wBAAyB,CACjC,IAAI/F,EAAQjF,EAAWiJ,mBACvBhE,EAAM5D,iBACN4D,EAAM7C,eACN7K,EAAKyT,yBAA0B,EAEjCiC,QAAQC,IAAI3V,EAAKgb,iBACjB,IAAIT,EAAQ,IAAIM,GAAyB7a,EAAKgb,iBAC1CpH,EAAM,IAAIf,GAAY0H,GAC1B9R,EAAWoL,oBAAoBD,EAAK,kBAIxCqH,aAAe,WAKb,IAJA,IAGItV,EAAO,GACF2E,EAAI,EAAKA,EAHE,EAGeA,GAJlB,IAKf3E,EAAK4E,KAAK,CAACa,EAAGd,EAAGe,EAAGyB,KAAK6N,IAAIrQ,EAAGtK,EAAKgb,mBAEvC,OAAOrV,KAGTuV,gBAAkB,SAAA/a,GAChBH,EAAKC,SAAS,CAAC8a,SAAU5a,EAAME,OAAOkE,aAGxCyW,cAAgB,WACd,OAAIhb,EAAKJ,MAAMmb,SACN,EAAM/a,EAAKJ,MAAM2a,MAEjBva,EAAKJ,MAAM2a,SAItBY,cAAgB,SAAChb,EAAOqE,GACtBxE,EAAKC,SAAS,CAACsa,MAAO/V,OAGxB4W,kBAAoB,SAAAjb,GAClB,IAAIqE,EAAQyR,OAAOC,WAAW/V,EAAME,OAAOmE,OACvCA,GAASoW,IAAapW,GAASsW,IAEjC9a,EAAKC,SAAS,CAACsa,MAAO/V,6EAKjB,IACC0C,EAAYtG,KAAKJ,MAAjB0G,QACR,OACIlG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAAC6Y,GAAA9Y,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,mBACA5H,EAAAC,EAAAC,cAAC8Y,GAAA/Y,EAAD,CACIkR,QAAQ,YADZ,qBAKFnR,EAAAC,EAAAC,cAAC+Y,GAAAhZ,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAQ,OAAQC,eAAgB,SAAU4B,MAAO,SAC5DrI,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAQsD,MAAO,IAAKjD,OAAQ,KAC1BpF,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CACIC,MAAO,iBACPF,MAAOwQ,GAAMxO,QAAQM,UAAUH,KAC/BtC,KAAM/E,KAAKqa,mBAInBja,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CACIoD,QACErD,EAAAC,EAAAC,cAACoD,EAAArD,EAAD,CACIsD,QAAS3D,KAAKhB,MAAMmb,SACpBtW,SAAU7D,KAAKsa,gBACf1W,MAAM,aAGZG,MAAM,YACV3D,EAAAC,EAAAC,cAACma,GAAApa,EAAD,CACIiG,QACE,CAAEkR,UAAWlR,EAAQoQ,OACnBe,MAAOnR,EAAQqQ,MACfA,MAAOrQ,EAAQqQ,OAEnBe,IAAOsC,GACPrC,IAAOuC,GACPtW,MAAO5D,KAAKhB,MAAM2a,MAClB/B,kBAAgB,QAChB/T,SAAU7D,KAAKua,gBAEnBna,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBL,MAAO5D,KAAKhB,MAAM2a,MAClB3L,KAAK,SACL/J,OAAO,SACPJ,SAAU7D,KAAKwa,kBACftV,MAAM,eAGZ9E,EAAAC,EAAAC,cAACmZ,GAAApZ,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBsN,QAAQ,cACRrM,MAAM,YACNrE,QAASb,KAAK2S,gBAJlB,kCApHoBzQ,aAgIfwE,wBAAW8P,GAAX9P,CAAmBgT,oFC7InBiB,oDAzBbrI,QAAU,SAACsI,EAAQC,GACf,IAAKzb,EAAK0b,sBAAsBF,EAAQC,GACtC,MAAM,IAAI3P,MAAM,oCAElB,IAAIzC,EAAQmS,EAAOtR,WACf9D,EAASoV,EAAOrR,YACpBnK,EAAK2b,YACD,IAAIvS,GAAa,iBAAiBC,EAAOjD,GAC7C,IAAK,IAAIkE,EAAI,EAAGA,EAAIjB,EAAOiB,IACzB,IAAK,IAAIsR,EAAI,EAAGA,EAAIxV,EAAQwV,IAAK,CAC/B,IAAIC,EAASL,EAAO7P,cAAcrB,EAAGsR,GACjCE,EAASL,EAAO9P,cAAcrB,EAAGsR,GACjCG,EAAajP,KAAKkP,IAAIH,EAASC,GACnC9b,EAAK2b,YAAYzP,cAAc5B,EAAGsR,EAAGG,GACrC/b,EAAK2b,YAAYjP,kBAAkBpC,EAAGsR,EAAG,YAKjDF,sBAAwB,SAACF,EAAQC,GAC/B,OAAQD,EAAOtR,aAAeuR,EAAOvR,YAC7BsR,EAAOrR,cAAgBsR,EAAOtR,cCkF3BoR,8MA5Fb3b,MAAQ,CACNqc,WAAY,GACZC,oBAAgB3a,EAChBwO,OAAO,EACPL,SAAU,MAGZ6D,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WACAyT,EAAkBlc,EAAKJ,MAAvBsc,eACL,GAAIzT,EAAW+K,2BACUjS,IAAnB2a,EAA8B,CAChC,IAAIpJ,EAAY,IAAIqJ,GAChBC,EAAgB3T,EAAWiJ,mBAC/B,IACEoB,EAAUI,QAAQkJ,EAAeF,GACjCzT,EAAWiI,IAAIoC,EAAU6I,aAE3B,MAAOvL,GACLpQ,EAAKC,SAAS,CAAC8P,OAAO,EAAML,SAAUU,EAAE1B,eAMhDwB,WAAa,WACXlQ,EAAKC,SAAS,CAAC8P,OAAO,OAGxBI,aAAe,SAAAhQ,GAAS,IACjBsI,EAAczI,EAAKQ,MAAnBiI,WACDgR,EAAYtZ,EAAME,OAAOmE,MACzB6X,EAAa5T,EAAWkR,cAAcF,GACtC2C,EACA3T,EAAW6T,OAAOD,GACtBrc,EAAKC,SAAS,CACZgc,WAAYxC,EACZyC,eAAgBE,6EAIX,IACA3T,EAAc7H,KAAKJ,MAAnBiI,WACDoR,EAAcpR,EAAWqR,iBAC/B,OACI9Y,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAAC6Y,GAAA9Y,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,iBACA5H,EAAAC,EAAAC,cAAC8Y,GAAA/Y,EAAD,CACIkR,QAAQ,YADZ,qBAKFnR,EAAAC,EAAAC,cAAC+Y,GAAAhZ,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQ0S,cAAc,SAAU9D,WAAY,WAChEpV,EAAAC,EAAAC,cAACqb,GAAAtb,EAAD,CAAakB,MAAO,CAACgY,SAAU,IAAKtV,OAAQyR,GAAM3O,QAAQC,OACxD5G,EAAAC,EAAAC,cAACsb,GAAAvb,EAAD,CAAYsR,QAAQ,cAApB,mBACAvR,EAAAC,EAAAC,cAACub,GAAAxb,EAAD,CACIuD,MAAO5D,KAAKhB,MAAMqc,WAClB7B,WAAY,CACVvX,KAAM,qBACNtC,GAAI,cAENkE,SAAU7D,KAAKuP,aACfnL,UAAWyD,EAAW+K,sBAEvBqG,EAAYpX,IAAI,SAAA1B,GACf,OAAOC,EAAAC,EAAAC,cAACwb,GAAAzb,EAAD,CACH2B,IAAK7B,EACLyD,MAAOzD,GACRA,OAKTC,EAAAC,EAAAC,cAACmZ,GAAApZ,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBsN,QAAQ,cACRrM,MAAM,YACNrE,QAASb,KAAK2S,gBAJlB,qBAQFvS,EAAAC,EAAAC,cAAC8P,GAAD,CACIlR,KAAMc,KAAKhB,MAAMmQ,MACjBL,SAAU9O,KAAKhB,MAAM8P,SACrBR,QAAStO,KAAKsP,qBAvFEpN,aCWf6Z,GApBb,SAAAA,EAAYC,GAAW,IAAA5c,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAA+b,GAAA/b,KAIvBsS,QAAU,SAACsI,EAAQC,GACjB,IAAIM,EAAa,IAAIR,GACrBQ,EAAW7I,QAAQsI,EAAQC,GAC3Bzb,EAAK2b,YAAcI,EAAWJ,YAE9B,IAAK,IAAIrR,EAAI,EAAGA,EAAItK,EAAK2b,YAAYzR,WAAYI,IAC/C,IAAK,IAAIsR,EAAI,EAAGA,EAAI5b,EAAK2b,YAAYxR,YAAayR,IACpC5b,EAAK2b,YAAYhQ,cAAcrB,EAAGsR,GAClC5b,EAAK4c,WACf5c,EAAK2b,YAAY3O,iBAAiB1C,EAAGsR,EAAG,IAAK,EAAG,IAZtDhb,KAAKgc,UAAYA,GCWfxF,GAAS,CACbjQ,KAAM,CACJkC,MAAO,IACP7B,QAAS,OACTC,eAAgB,aAChB2O,WAAY,SACZiB,aAAc,gBACdxS,OAAQ,QAEVyS,OAAQ,CACNjO,MAAO,QACPxE,OAAQ,QAEV0S,MAAO,CACL5O,WAAY2N,GAAMxO,QAAQM,UAAUH,OAIlC4U,GAAgBzT,GAAakE,gBAC7BwP,GAAgB1T,GAAamE,gBAAkB,EAE/CoP,8MAEJ/c,MAAQ,CACNqc,WAAY,GACZC,oBAAgB3a,EAChBwO,OAAO,EACPL,SAAU,GACVkN,UAAW,KAGbrJ,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WACAyT,EAAkBlc,EAAKJ,MAAvBsc,eACL,GAAIzT,EAAW+K,2BACUjS,IAAnB2a,EAA8B,CAChC,IAAIpJ,EAAY,IAAIiK,GAA0B/c,EAAKJ,MAAMgd,WACrDR,EAAgB3T,EAAWiJ,mBAC/B,IACEoB,EAAUI,QAAQkJ,EAAeF,GACjCzT,EAAWiI,IAAIoC,EAAU6I,aAE3B,MAAOvL,GACLpQ,EAAKC,SAAS,CAAC8P,OAAO,EAAML,SAAUU,EAAE1B,eAMhDwB,WAAa,WACXlQ,EAAKC,SAAS,CAAC8P,OAAO,OAGxBI,aAAe,SAAAhQ,GAAS,IACjBsI,EAAczI,EAAKQ,MAAnBiI,WACDgR,EAAYtZ,EAAME,OAAOmE,MACzB6X,EAAa5T,EAAWkR,cAAcF,GACtC2C,EACA3T,EAAW6T,OAAOD,GACtBrc,EAAKC,SAAS,CACZgc,WAAYxC,EACZyC,eAAgBE,OAIpBY,kBAAoB,SAAC7c,EAAOqE,GAC1BxE,EAAKC,SAAS,CAAC2c,UAAWpY,OAG5ByY,sBAAwB,SAAA9c,GACtB,IAAIqE,EAAQyR,OAAOC,WAAW/V,EAAME,OAAOmE,OACvCA,GAASqY,IAAiBrY,GAASsY,IACrC9c,EAAKC,SAAS,CAAC2c,UAAWpY,6EAIrB,IAAA3D,EACuBD,KAAKJ,MAA5BiI,EADA5H,EACA4H,WAAYvB,EADZrG,EACYqG,QACb2S,EAAcpR,EAAWqR,iBAC/B,OACI9Y,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAAC6Y,GAAA9Y,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,iBACA5H,EAAAC,EAAAC,cAAC8Y,GAAA/Y,EAAD,CACIkR,QAAQ,YADZ,qBAKFnR,EAAAC,EAAAC,cAAC+Y,GAAAhZ,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQ0S,cAAc,SAAU9D,WAAY,WAChEpV,EAAAC,EAAAC,cAACqb,GAAAtb,EAAD,CAAakB,MAAO,CAACgY,SAAU,IAAKtV,OAAQyR,GAAM3O,QAAQC,OACxD5G,EAAAC,EAAAC,cAACsb,GAAAvb,EAAD,CAAYsR,QAAQ,cAApB,mBACAvR,EAAAC,EAAAC,cAACub,GAAAxb,EAAD,CACIuD,MAAO5D,KAAKhB,MAAMqc,WAClB7B,WAAY,CACVvX,KAAM,qBACNtC,GAAI,cAENkE,SAAU7D,KAAKuP,aACfnL,UAAWyD,EAAW+K,sBAEvBqG,EAAYpX,IAAI,SAAA1B,GACf,OAAOC,EAAAC,EAAAC,cAACwb,GAAAzb,EAAD,CACH2B,IAAK7B,EACLyD,MAAOzD,GACRA,OAKTC,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAACma,GAAApa,EAAD,CACIiG,QACE,CAAEkR,UAAWlR,EAAQoQ,OACnBe,MAAOnR,EAAQqQ,MACfA,MAAOrQ,EAAQqQ,OAEnBe,IAAOuE,GACPtE,IAAOuE,GACPtY,MAAO5D,KAAKhB,MAAMgd,UAClBpE,kBAAgB,QAChB/T,SAAU7D,KAAKoc,oBAEnBhc,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBL,MAAO5D,KAAKhB,MAAMgd,UAClBhO,KAAK,SACL/J,OAAO,SACPJ,SAAU7D,KAAKqc,sBACfnX,MAAM,eAGZ9E,EAAAC,EAAAC,cAACmZ,GAAApZ,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBsN,QAAQ,cACRrM,MAAM,YACNrE,QAASb,KAAK2S,gBAJlB,mBAQFvS,EAAAC,EAAAC,cAAC8P,GAAD,CACIlR,KAAMc,KAAKhB,MAAMmQ,MACjBL,SAAU9O,KAAKhB,MAAM8P,SACrBR,QAAStO,KAAKsP,qBA1HGpN,aAgIhBwE,wBAAW8P,GAAX9P,CAAmBqV,IC7InBO,OAhBf,SAAyB1c,GACvB,OACIQ,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CACIK,OAAQ,IACRvB,OAAQ,CAACwB,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IAC/CC,QAAQ,KACVzF,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,MACA/E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAOW,UAAQ,IACf1F,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CACIJ,KAAMnF,EAAMmF,KACZG,MAAOwQ,GAAMxO,QAAQM,UAAUH,wECnBrCkV,cASJ,SAAAA,EAAYzP,EAAO0P,EAAQC,EAAYC,GAAU,IAAAtd,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAAuc,GAAAvc,KAJjD2c,eAAiB,GAIgC3c,KAHjD4c,yBAA2B,GAGsB5c,KAFjDwc,OAAS,EAEwCxc,KAMjD6c,UAAY,SAAAL,GACND,EAAoBO,eAAeN,KACrCpd,EAAKod,OAASA,IAR+Bxc,KAYjD+c,kBAAoB,SAAAjQ,QACJnM,IAAVmM,IACF1N,EAAKkc,eAAiBxO,EACtB1N,EAAKud,eAAiB,GACtBvd,EAAKwd,yBAA2B,KAhBa5c,KAoBjDgd,kBAAoB,SAACP,EAAYC,GAC/B,QAA4B/b,IAAxBvB,EAAKkc,eACP,MAAM,IAAIpQ,MAAM,iCAElB,IAAK9L,EAAK6d,eAAeR,GACvB,MAAM,IAAIvR,MAAM,UAAYuR,EAAWjS,EAAI,KAAOiS,EAAWhS,EAAI,sBAEnE,IAAKrL,EAAK6d,eAAeP,GACvB,MAAM,IAAIxR,MAAM,UAAYwR,EAASlS,EAAI,KAAOkS,EAASjS,EAAI,sBAG/D,IAAIyS,EAAuBC,KAAUV,EAAWjS,EAAGiS,EAAWhS,EAAGiS,EAASlS,EAAGkS,EAASjS,GACtFrL,EAAKud,eAAiB,GACtBvd,EAAKwd,yBAA2B,GAChC,IAAK,IAAIlT,EAAI,EAAGA,EAAIwT,EAAqBlU,OAAQU,IAAK,CACpD,IAAI0T,EAAQF,EAAqBxT,GAC7B2T,EAAaje,EAAK0L,SAASsS,GAC3BE,EAAkBle,EAAKme,mBAAmBL,EAAsBxT,GACpEtK,EAAKoe,QAAQpe,EAAKud,eAAgBS,EAAOC,GACzCje,EAAKoe,QAAQpe,EAAKwd,yBAA0BQ,EAAOE,KAvCNtd,KA2CjDyd,2BAA6B,WAC3B,OAAOre,EAAK4F,iBAAiB5F,EAAKud,iBA5Ca3c,KA+CjD0d,gCAAkC,WAChC,OAAOte,EAAK4F,iBAAiB5F,EAAKwd,2BAhDa5c,KAmDjD8K,SAAW,SAAAsS,GAGT,IAFA,IAAIO,EAAW,EACXC,EAAqB,EAChBlU,EAAI0T,EAAM5S,EAAIpL,EAAKod,OAAQ9S,GAAK0T,EAAM5S,EAAIpL,EAAKod,OAAQ9S,IAC9D,IAAK,IAAIsR,EAAIoC,EAAM3S,EAAIrL,EAAKod,OAAQxB,GAAKoC,EAAM3S,EAAIrL,EAAKod,OAAQxB,IAAK,CACnE,IAAI9V,EAAQ9F,EAAKye,mBAAmBnU,EAAGsR,QACzBra,IAAVuE,IACFyY,GAAYzY,EACZ0Y,GAAsB,GAI5B,OAAOD,EAAWC,GA/D6B5d,KAkEjDud,mBAAqB,SAACL,EAAsB/R,GAC1C,GAAIA,GAAS,GAAKA,EAAQ+R,EAAqBlU,OAAQ,CACrD,IAAI8U,EAAeZ,EAAqB/R,GACxC,GAAIA,IAAU+R,EAAqBlU,OAAS,EAC1C,OAAO8U,EAET,IAAIC,EAAYb,EAAqB/R,EAAQ,GACzC6S,EAAe5e,EAAK0L,SAASgT,GAEjC,OADgB1e,EAAK0L,SAASiT,GACXC,IA3E0Bhe,KA+EjDwd,QAAU,SAACS,EAAMb,EAAOlY,GACtB+Y,EAAKtU,KACD,CACEa,EAAG4S,EAAM5S,EACTC,EAAG2S,EAAM3S,EACTvF,MAAOA,KApFkClF,KAyFjDgF,iBAAmB,SAAA2I,GAGjB,IAFA,IAAIuQ,EAAgB,GAChBC,EAAa,EACRzU,EAAI,EAAGA,EAAIiE,EAAO3E,OAAQU,IAAK,CACtC,IAAI0T,EAAQzP,EAAOjE,GACnBwU,EAAcvU,KACV,CACEa,EAAG2T,EACH1T,EAAG2S,EAAMlY,QAGfiZ,GAAc,EAEhB,OAAOD,GAtGwCle,KAyGjDid,eAAiB,SAACG,GAChB,OAAOA,EAAM5S,GAAK,GAAK4S,EAAM5S,EAAIpL,EAAKkc,eAAehS,YAC9C8T,EAAM3S,GAAK,GAAK2S,EAAM3S,EAAIrL,EAAKkc,eAAe/R,aA3GNvJ,KA8GjD6d,mBAAqB,SAACnU,EAAGsR,GACvB,IACE,OAAO5b,EAAKkc,eAAevQ,cAAcrB,EAAGsR,GAE9C,MAAMxL,GACJ,SAlHFxP,KAAK+c,kBAAkBjQ,GACvB9M,KAAK6c,UAAUL,GACfxc,KAAKgd,kBAAkBP,EAAYC,mEAoHfF,GACpB,OAAOA,GAAUxc,KAAKoe,YAAc5B,GAAUxc,KAAKqe,oBAjIjD9B,GACG6B,WAAa,EADhB7B,GAEG8B,WAAa,GAmIP9B,UCtHT/F,GAAS,CACbjQ,KAAM,CACJkC,MAAO,IACP7B,QAAS,OACTC,eAAgB,aAChB2O,WAAY,SACZiB,aAAc,gBACdxS,OAAQ,QAEVyS,OAAQ,CACNjO,MAAO,QACPxE,OAAQ,QAEV0S,MAAO,CACL5O,WAAY2N,GAAMxO,QAAQM,UAAUH,OAIlCiX,8MACJtf,MAAQ,CACNuf,yBAAqB5d,EACrB6d,YAAY,EACZhC,OAAQ,EACRiC,WAAY,CACVjU,EAAG,EACHC,EAAG,GAELiU,SAAU,CACRlU,EAAG,EACHC,EAAG,MAIPkI,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WACL,GAAIA,EAAW+K,qBAAsB,CACnC,IAAI9F,EAAQjF,EAAWiJ,mBACvB1R,EAAKC,SAAS,CACZkf,oBAAqBnf,EAAKuf,oBAAoB7R,EAAO1N,EAAKJ,MAAMwd,OAAQpd,EAAKJ,MAAMyf,WAAYrf,EAAKJ,MAAM0f,YAE5Gtf,EAAKwf,yBAITD,oBAAsB,SAAC7R,EAAO0P,EAAQiC,EAAYC,GAChD,OAAO,IAAIG,GAA6B/R,EAAO0P,EAAQiC,EAAYC,MAGrEI,QAAU,WACR,QAAuCne,IAAnCvB,EAAKJ,MAAMuf,oBACb,OAAInf,EAAKJ,MAAMwf,WACNpf,EAAKJ,MAAMuf,oBAAoBb,kCAE/Bte,EAAKJ,MAAMuf,oBAAoBd,gCAK5CvI,wBAA0B,SAACrB,EAAOjP,GAAR,OAAsB,SAAArF,GAC9C,IAAIwf,EAAe3f,EAAKQ,MAAMiI,WAAWiJ,mBACrClN,EAAQyR,OAAO2J,SAASzf,EAAME,OAAOmE,OACzC,QAAqBjD,IAAjBoe,QAAwCpe,IAAViD,EAAqB,CACrD,IAAIqb,EAAW,CACbzU,EAAiB,MAAd5F,EAAoBhB,EAAQxE,EAAKJ,MAAM6U,GAAOrJ,EACjDC,EAAiB,MAAd7F,EAAoBhB,EAAQxE,EAAKJ,MAAM6U,GAAOpJ,GAE/CrL,EAAK8f,aAAaD,EAAUF,IAC9B3f,EAAKC,SAALgC,OAAAgH,EAAA,EAAAhH,CAAA,GAAgBwS,EAAQoL,SAK9BE,gBAAkB,SAAAvb,GAAK,OAAI,SAAArE,GACzBH,EAAKC,SAALgC,OAAAgH,EAAA,EAAAhH,CAAA,GAAgBuC,EAAQrE,EAAME,OAAOkE,cAGvCub,aAAe,SAACrL,EAAO/G,GACrB,OAAO+G,EAAMrJ,GAAK,GAAKqJ,EAAMrJ,EAAIsC,EAAMxD,YAChCuK,EAAMpJ,GAAK,GAAKoJ,EAAMpJ,EAAIqC,EAAMvD,eAGzCqV,mBAAqB,WACnB,IAAIQ,EAAa,SAACC,EAAKxL,GACrBwL,EAAIC,IAAIzL,EAAMrJ,EAAGqJ,EAAMpJ,EAAG,EAAG,EAAG,EAAIyB,KAAKqT,IAAI,GAC7CF,EAAIG,UAAY,MAChBH,EAAII,QAJmBrK,EAOIhW,EAAKJ,MAA7Byf,EAPoBrJ,EAOpBqJ,WAAYC,EAPQtJ,EAORsJ,SACb7W,EAAazI,EAAKQ,MAAMiI,WAC5BA,EAAW6X,oBACX,IACIL,EADSxX,EAAW6I,YACPiP,WAAW,MAC5BN,EAAIO,YACJP,EAAIQ,OAAOpB,EAAWjU,EAAGiU,EAAWhU,GACpC4U,EAAIS,OAAOpB,EAASlU,EAAGkU,EAASjU,GAChC4U,EAAIU,UAAY,EAChBV,EAAIW,YAAc,MAClBX,EAAIY,SACJb,EAAWC,EAAKZ,GAChBW,EAAWC,EAAKX,MAGlBwB,gBAAkB,SAAC3gB,EAAOqE,GACxBxE,EAAKC,SAAS,CAACmd,OAAQ5Y,OAGzBuc,mBAAqB,SAAA5gB,GACnB,IAAIqE,EAAQyR,OAAO2J,SAASzf,EAAME,OAAOmE,OACrCib,GAA6B/B,eAAelZ,IAC9CxE,EAAKC,SAAS,CAACsa,MAAO/V,6EAIjB,IACA0C,EAAWtG,KAAKJ,MAAhB0G,QACP,OACIlG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAAC6Y,GAAA9Y,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,YACA5H,EAAAC,EAAAC,cAAC8Y,GAAA/Y,EAAD,CACIkR,QAAQ,YADZ,0BAKFnR,EAAAC,EAAAC,cAAC+Y,GAAAhZ,EAAD,MACAD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8f,GAAA/f,EAAD,CACIoD,QACErD,EAAAC,EAAAC,cAAC+f,GAAAhgB,EAAD,CACIsD,QAAS3D,KAAKhB,MAAMwf,WACpB3a,SAAU7D,KAAKmf,gBAAgB,cAC/Bvb,MAAM,aAGZG,MAAM,gBAEZ3D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACggB,GAAD,CAAiBvb,KAAM/E,KAAK8e,YAC5B1e,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAACma,GAAApa,EAAD,CACIiG,QACE,CACEkR,UAAWlR,EAAQoQ,OACnBe,MAAOnR,EAAQqQ,MACfA,MAAOrQ,EAAQqQ,OAGnBe,IAAOmH,GAA6BT,WACpCzG,IAAOkH,GAA6BR,WACpCkC,KAAM,EACN3c,MAAO5D,KAAKhB,MAAMwd,OAClB5E,kBAAgB,QAChB/T,SAAU7D,KAAKkgB,kBAEnB9f,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBL,MAAO5D,KAAKhB,MAAMwd,OAClBxO,KAAK,SACL/J,OAAO,SACPJ,SAAU7D,KAAKmgB,mBACfjb,MAAM,eAGZ9E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBF,MAAM,IACNH,MAAO5D,KAAKhB,MAAMyf,WAAWjU,EAC7BwD,KAAK,SACL4H,gBAAiB,CACfC,QAAQ,GAEV5R,OAAO,SACPJ,SAAU7D,KAAKkV,wBAAwB,aAAc,OAEzD9U,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBF,MAAM,IACNH,MAAO5D,KAAKhB,MAAMyf,WAAWhU,EAC7BuD,KAAK,SACL4H,gBAAiB,CACfC,QAAQ,GAEV5R,OAAO,SACPJ,SAAU7D,KAAKkV,wBAAwB,aAAc,QAG3D9U,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBF,MAAM,IACNH,MAAO5D,KAAKhB,MAAM0f,SAASlU,EAC3BwD,KAAK,SACL4H,gBAAiB,CACfC,QAAQ,GAEV5R,OAAO,SACPJ,SAAU7D,KAAKkV,wBAAwB,WAAY,OAEvD9U,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBF,MAAM,IACNH,MAAO5D,KAAKhB,MAAM0f,SAASjU,EAC3BuD,KAAK,SACL4H,gBAAiB,CACfC,QAAQ,GAEV5R,OAAO,SACPJ,SAAU7D,KAAKkV,wBAAwB,WAAY,QAGzD9U,EAAAC,EAAAC,cAACmZ,GAAApZ,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBsN,QAAQ,cACRrM,MAAM,YACNrE,QAASb,KAAK2S,gBAJlB,sBAlMsBzQ,aA+MnBwE,wBAAW8P,GAAX9P,CAAmB4X,yBChP5BkC,wCACGC,cAAgB,SAAC3T,EAAO4T,GAG7B,IAFA,IAAIC,EAAiBzU,KAAK6N,IAAI,EAAG2G,GAAQ,EAEhCnd,EAAM,EAAGA,EAAMuJ,EAAMvD,YAAahG,IACzC,IAAK,IAAIqd,EAAM,EAAGA,EAAM9T,EAAMxD,WAAYsX,IAAO,CAC/C,IAAI1b,EAAQ4H,EAAM/B,cAAc6V,EAAKrd,GACjCsd,EAAgB3U,KAAKC,MAAOwU,EAAiBzb,GAAUsD,GAAamE,gBAAkB,IACtFmU,EAAqB5U,KAAK6U,MAAOF,GAAiBrY,GAAamE,gBAAkB,GAAMgU,GAC3F7T,EAAMxB,cAAcsV,EAAKrd,EAAKud,KAMvBN,UCfTQ,wCACGC,UAAY,EADfD,GAEGE,UAAY,EAFfF,GAIGG,SAAW,SAACrU,EAAOsU,EAAMC,GAG9B,IAFA,IAEQ5W,EAAI,EAAGA,EAAIqC,EAAMvD,YAAakB,IACpC,IAAI,IAAID,EAAI,EAAGA,EAAIsC,EAAMxD,WAAYkB,IAEnC,GAAGA,EAAI4W,GAAQ,GAAK3W,EAAI4W,GAAQ,EAAG,CAGjC,IAFA,IAAIC,EAAa,GAET5X,EAAIc,EAAGd,EAAIc,EAAI4W,EAAM1X,IAC3B,IAAI,IAAIsR,EAAIvQ,EAAGuQ,EAAIvQ,EAAI4W,EAAMrG,IAC3B,GAAGtR,EAAIoD,EAAMxD,YAAc0R,EAAIlO,EAAMvD,YAAY,CAC/C,IAAIgY,EAAWzU,EAAMT,kBAAkB3C,EAAGsR,GAC1CsG,EAAW3X,KAAK,CAACD,IAAGsR,IAAGuG,aAM7B,IAFA,IAAIC,EAAc,CAACld,EAAG,EAAGC,EAAG,EAAGC,EAAE,EAAGnE,EAAE,GAE9B2X,EAAI,EAAGA,EAAIsJ,EAAWtY,OAAQgP,IACrCwJ,EAAYld,GAAKgd,EAAWtJ,GAAGuJ,SAASjd,EACxCkd,EAAYjd,GAAK+c,EAAWtJ,GAAGuJ,SAAShd,EACxCid,EAAYhd,GAAK8c,EAAWtJ,GAAGuJ,SAAS/c,EACxCgd,EAAYnhB,GAAKihB,EAAWtJ,GAAGuJ,SAASlhB,EAG1CmhB,EAAcngB,OAAO+Q,OAAOoP,GAAa3f,IACvC,SAAC+B,GAAY,OAAOA,GAASwd,EAAOC,KAGtC,IAAI,IAAIrJ,EAAI,EAAGA,EAAIsJ,EAAWtY,OAAQgP,IACnClL,EAAMR,iBAAiBgV,EAAWtJ,GAAGtO,EAAG4X,EAAWtJ,GAAGgD,EAAGwG,EAAY,GAAIA,EAAY,GAAIA,EAAY,GAAIA,EAAY,MAQlHR,UCtBTxK,GAAS,CACbjQ,KAAM,CACJkC,MAAO,IACP7B,QAAS,OACTC,eAAgB,aAChB2O,WAAY,SACZiB,aAAc,gBACdxS,OAAQ,QAEVyS,OAAQ,CACN1O,QAAS,WACT/D,OAAQ,QAGV0S,MAAO,CACL5O,WAAY2N,GAAMxO,QAAQM,UAAUH,MAEtCoK,YAAa,CACXxN,OAAQyR,GAAM3O,QAAQC,KACtBuS,SAAU,MAIRkI,eAOJ,SAAAA,EAAY7hB,GAAO,IAAAR,EAAA,OAAAiC,OAAAqH,EAAA,EAAArH,CAAArB,KAAAyhB,IACjBriB,EAAAiC,OAAA2N,EAAA,EAAA3N,CAAArB,KAAAqB,OAAA4N,EAAA,EAAA5N,CAAAogB,GAAAvS,KAAAlP,KAAMJ,KAPRZ,MAAQ,CACN0iB,kBAAmB,EACnBC,aAAc,EACdC,aAAc,GAGGxiB,EAInBuT,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WAEDA,EAAW+K,uBACb/K,EAAWiJ,mBAAmB5H,iBAC9BrB,EAAWiJ,mBAAmB7G,eAE9B+W,GAAeG,SAAStZ,EAAWiJ,mBAAoB1R,EAAKJ,MAAM2iB,aAAcviB,EAAKJ,MAAM4iB,cAC3FpB,GAAeC,cAAc5Y,EAAWiJ,mBAAoB1R,EAAKJ,MAAM0iB,mBAEvE7Z,EAAWga,uBACXha,EAAW6X,oBACX7X,EAAWia,iBAhBI1iB,EAoBnB2iB,0BAA4B,SAACxiB,EAAOqE,GAClCxE,EAAKC,SAAS,CAACqiB,kBAAmB9d,KArBjBxE,EAwBnB4iB,8BAAgC,SAAAziB,GAC9B,IAAIqE,EAAQyR,OAAO2J,SAASzf,EAAME,OAAOmE,OACrCA,EAAQ4E,GAAakE,iBAAmB9I,GAASsI,KAAK+V,KAAKzZ,GAAamE,kBAC1EvN,EAAKC,SAAS,CAACqiB,kBAAmB9d,KA3BnBxE,EA+BnB8iB,qBAAuB,SAAA3iB,GACrB,IAAIqE,EAAQyR,OAAO2J,SAASzf,EAAME,OAAOmE,OACrC4X,EAAgBpc,EAAKQ,MAAMiI,WAAWiJ,mBAEtClN,EAAQ,GAAKA,GAASsI,KAAKwL,IAAI8D,EAAclS,WAAYkS,EAAcjS,cACzEnK,EAAKC,SAALgC,OAAAgH,EAAA,EAAAhH,CAAA,GAAgB9B,EAAME,OAAOwC,KAAO2B,KApCrBxE,wEAwCV,IACCkH,EAAYtG,KAAKJ,MAAjB0G,QACetG,KAAKJ,MAApBiI,WACR,OACEzH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAACmV,GAAApV,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,sBACA5H,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,CACIkR,QAAQ,YADZ,cAMAnR,EAAAC,EAAAC,cAACkR,GAAA,EAAD,MACApR,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACkH,MAAO,QAASxE,OAAQ,SACnC7D,EAAAC,EAAAC,cAACma,GAAApa,EAAD,CACAiG,QACE,CAAEkR,UAAWlR,EAAQoQ,OACnBe,MAAOnR,EAAQqQ,MACfA,MAAOrQ,EAAQqQ,OAEnB/S,MAAO5D,KAAKhB,MAAM0iB,kBAClBhK,IAAKlP,GAAakE,gBAAkB,EACpCiL,IAAKzL,KAAK+V,KAAKzZ,GAAamE,iBAC5B4T,KAAM,EACN1c,SAAU7D,KAAK+hB,4BAEf3hB,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBL,MAAO5D,KAAKhB,MAAM0iB,kBAClB1T,KAAK,SACLmU,WAAY,CACVC,aAAchiB,EAAAC,EAAAC,cAAC+hB,GAAAhiB,EAAD,CAAgBuK,SAAS,SAAzB,SAEhB/G,SAAU7D,KAAKgiB,8BACf9c,MAAM,cAEV9E,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACI4B,KAAO,eACPV,MAAO,CAAC0C,OAAQ,QAChBL,MAAO5D,KAAKhB,MAAM2iB,aAClB3T,KAAK,SACLmU,WAAY,CACVC,aAAchiB,EAAAC,EAAAC,cAAC+hB,GAAAhiB,EAAD,CAAgBuK,SAAS,SAAzB,SAEhB/G,SAAU7D,KAAKkiB,qBACfhd,MAAM,cAEV9E,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACI4B,KAAO,eACPV,MAAO,CAAC0C,OAAQ,QAChBL,MAAO5D,KAAKhB,MAAM4iB,aAClB5T,KAAK,SACLmU,WAAY,CACVC,aAAchiB,EAAAC,EAAAC,cAAC+hB,GAAAhiB,EAAD,CAAgBuK,SAAS,SAAzB,YAEhB/G,SAAU7D,KAAKkiB,qBACfhd,MAAM,cAEV9E,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBsN,QAAQ,cACRrM,MAAM,YACNrE,QAASb,KAAK2S,gBAJlB,+BA1GsBzQ,aA2HjBwE,wBAAW8P,GAAX9P,CAAmB+a,ICvK5Ba,wCAEGC,qBAAuB,SAACzV,GAG7B,IAFA,IAAI0V,EAAgB,IAAIha,GAAasE,EAAMnE,WAAYmE,EAAMxD,WAAYwD,EAAMvD,YAAauD,EAAM5C,eAAenF,MAEzG2E,EAAI,EAAGA,EAAI8Y,EAAcjZ,YAAY,EAAGG,IAC9C,IAAI,IAAIsR,EAAI,EAAGA,EAAIwH,EAAclZ,WAAW,EAAG0R,IAAI,CACjD,IAAIyH,EAAgBD,EAAcnW,kBAAkB2O,EAAGtR,GACvDoD,EAAMR,iBAAiB0O,EAAIwH,EAAcjZ,YAAY,EAAGG,EAAG+Y,EAAcne,EAAGme,EAAcle,EAAGke,EAAcje,EAAGie,EAAcpiB,KAMrHiiB,UCdTI,wCAEGH,qBAAuB,SAACzV,GAG7B,IAFA,IAAI0V,EAAgB,IAAIha,GAAasE,EAAMnE,WAAYmE,EAAMxD,WAAYwD,EAAMvD,YAAauD,EAAM5C,eAAenF,MAEzG2E,EAAI,EAAGA,EAAI8Y,EAAcjZ,YAAY,EAAGG,IAC9C,IAAI,IAAIsR,EAAI,EAAGA,EAAIwH,EAAclZ,WAAW,EAAG0R,IAAI,CACjD,IAAIyH,EAAgBD,EAAcnW,kBAAkB2O,EAAGtR,GACvDoD,EAAMR,iBAAkBkW,EAAclZ,WAAW,EAAG0R,EAAGtR,EAAG+Y,EAAcne,EAAGme,EAAcle,EAAGke,EAAcje,EAAGie,EAAcpiB,KAMpHqiB,UCWTC,eAMJ,SAAAA,EAAY/iB,GAAO,IAAAR,EAAA,OAAAiC,OAAAqH,EAAA,EAAArH,CAAArB,KAAA2iB,IACjBvjB,EAAAiC,OAAA2N,EAAA,EAAA3N,CAAArB,KAAAqB,OAAA4N,EAAA,EAAA5N,CAAAshB,GAAAzT,KAAAlP,KAAMJ,KANRZ,MAAQ,CACN4jB,SAAU,GACVtS,WAAY,GAGKlR,EAInBuT,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WAELA,EAAWiJ,mBAAmB5H,iBAC9BrB,EAAWiJ,mBAAmB7G,eAEH,aAAxB7K,EAAKJ,MAAM4jB,SACZC,GAAkBN,qBAAqB1a,EAAWiJ,oBAElDgS,GAAoBP,qBAAqB1a,EAAWiJ,oBAGtDjJ,EAAWga,uBACXha,EAAW6X,oBACX7X,EAAWia,gBAlBM1iB,EAqBnBmR,iBAAkB,SAAAhR,GACjBH,EAAKC,SAALgC,OAAAgH,EAAA,EAAAhH,CAAA,GAAiB9B,EAAME,OAAOwC,KAAO1C,EAAME,OAAOmE,SAtBhCxE,wEAyBV,IAAAW,EAAAC,KACCsG,EAAYtG,KAAKJ,MAAjB0G,QAER,OACElG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAakR,QAAQ,WAAWnP,UAAWkE,EAAQmL,aAC/CrR,EAAAC,EAAAC,cAACoR,GAAArR,EAAD,CACE8P,IAAK,SAAAA,GACHpQ,EAAKkR,cAAgBd,GAEvBwB,QAAQ,4BAJV,aAQAvR,EAAAC,EAAAC,cAACsR,GAAAvR,EAAD,CACEuD,MAAO5D,KAAKhB,MAAM4jB,SAClB/e,SAAU7D,KAAKuQ,iBACfsB,MACEzR,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CACEiQ,WAAYtQ,KAAKhB,MAAMsR,WACvBrO,KAAK,WACLtC,GAAG,8BAITS,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAU2B,IAAI,aAAa4B,MAAM,cAAjC,cACAxD,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAU2B,IAAI,WAAW4B,MAAM,YAA/B,cAGFxD,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIkR,QAAQ,MACRrM,MAAM,YACNgO,aAAW,MACXrS,QAASb,KAAK2S,gBAChBvS,EAAAC,EAAAC,cAAC6S,GAAA9S,EAAD,eAjEiB6B,aA4EZwE,wBAvFA,SAAAC,GAAK,MAAK,CACvB8K,YAAa,CACXxN,OAAQ0C,EAAMI,QAAQC,KACtByB,MAAO,KAGTuJ,OAAQ,CACN/N,OAAQ0C,EAAMI,QAAQC,QAgFXN,CAAmBic,ICrG5BI,wCACGR,qBAAuB,SAACzV,GAI7B,IAHA,IAAIkW,EAAe,GACf7X,EAAQ,EAEJzB,EAAI,EAAGA,EAAIoD,EAAMvD,YAAaG,IAAI,CACxC,IAAI,IAAIsR,EAAI,EAAGA,EAAIlO,EAAMxD,WAAY0R,IAAK7P,GAA6B,EAApB2B,EAAMvD,YAAgB,CACvE,IAAIkZ,EAAgB3V,EAAMT,kBAAkB2O,EAAGtR,GAC/CsZ,EAAa7X,GAASsX,EAAcne,EACpC0e,EAAa7X,EAAM,GAAKsX,EAAcle,EACtCye,EAAa7X,EAAM,GAAKsX,EAAcje,EACtCwe,EAAa7X,EAAM,GAAKsX,EAAcpiB,EAEvC8K,EAAQ,GAAKzB,EAAE,GAGlBoD,EAAMzD,YAAYe,kBAAkB6Y,KAAKD,GAAelW,EAAMvD,YAAauD,EAAMxD,YACjFwD,EAAM7C,gBAIK8Y,UC6BCG,8MA7CblkB,MAAQ,CACNmQ,OAAO,EACPL,SAAU,WAGZM,YAAc,SAACC,GACbjQ,EAAKC,SAAS,CAAC8P,OAAO,EAAML,SAAUO,OAGxCC,WAAa,SAACD,GACZjQ,EAAKC,SAAS,CAAC8P,OAAO,OAGxBwD,eAAiB,WACb,IAAI6I,EAAgBpc,EAAKQ,MAAMiI,WAAWiJ,mBAE1CiS,GAAoBR,qBAAqB/G,GAEzCpc,EAAKQ,MAAMiI,WAAWga,uBACtBziB,EAAKQ,MAAMiI,WAAW6X,oBACtBtgB,EAAKQ,MAAMiI,WAAWia,wFAKzB,OACE1hB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIkR,QAAQ,MACRrM,MAAM,YACNgO,aAAW,MACXrS,QAASb,KAAK2S,gBAChBvS,EAAAC,EAAAC,cAAC6S,GAAA9S,EAAD,QAGFD,EAAAC,EAAAC,cAAC8P,GAAD,CACIlR,KAAMc,KAAKhB,MAAMmQ,MACjBL,SAAU9O,KAAKhB,MAAM8P,SACrBR,QAAStO,KAAKsP,qBAxCKpN,aCLzBihB,GAMJ,SAAAA,EAAYC,EAAkBC,GAAgB,IAAAjkB,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAAmjB,GAAAnjB,KAK9CsS,QAAU,SAACxF,EAAOwW,GAChB,IAAIC,EAAWrX,KAAKC,MAAM/M,EAAKgkB,iBAAmBtW,EAAMxD,YACpDka,EAAYtX,KAAKC,MAAM/M,EAAKikB,eAAiBvW,EAAMvD,aACvDuD,EAAMtD,oBAAoB+Z,EAAUC,GACpC1W,EAAM7C,eACN,IAAK,IAAIP,EAAI,EAAGA,EAAIoD,EAAMxD,WAAa,EAAGI,IACxC,IAAK,IAAIsR,EAAI,EAAGA,EAAIlO,EAAMvD,YAAc,EAAGyR,IAAK,CAC9C,IAAIpQ,EAAW,CACbJ,EAAGd,EAAItK,EAAKgkB,iBACZ3Y,EAAGuQ,EAAI5b,EAAKikB,gBAEdvW,EAAM9C,mBACN,IAAIyZ,EAAoBH,EAAaI,iBAAiB5W,EAAOlC,GAC7DkC,EAAM7C,eACN6C,EAAMxB,cAAc5B,EAAGsR,EAAGyI,GAC1B3W,EAAMhB,kBAAkBpC,EAAGsR,EAAG,KAGlClO,EAAM7C,gBAvBsCjK,KA0B9C2jB,2BAA6B,SAACC,EAAUL,GACtCnkB,EAAKykB,kBAAkBN,EAAWK,IA3BU5jB,KA8B9C8jB,+BAAiC,SAACC,EAAWP,GAC3CpkB,EAAK4kB,oBAAoBR,EAAYO,IA/BO/jB,KAkC9CikB,UAAY,SAAAC,GACV9kB,EAAKykB,kBAAkBK,GACvB9kB,EAAK4kB,oBAAoBE,IApCmBlkB,KAuC9C6jB,kBAAoB,SAAAR,GACdF,EAAQgB,cAAcd,KACxBjkB,EAAKikB,eAAiBA,IAzCoBrjB,KA4C9CgkB,oBAAsB,SAAAZ,GAChBD,EAAQgB,cAAcf,KACxBhkB,EAAKgkB,iBAAmBA,IA7C1BpjB,KAAK6jB,kBAAkBR,GACvBrjB,KAAKgkB,oBAAoBZ,IARvBD,GAGGiB,WAAa,GAHhBjB,GAIGkB,WAAa,EAJhBlB,GAuDGgB,cAAgB,SAACD,GACtB,YAAkBvjB,IAAXujB,GACAA,GAAUf,GAAQiB,YAClBF,GAAUf,GAAQkB,YAIdlB,UC7DTmB,+DAGJC,iBAAmB,SAACzX,EAAOlC,GACzB,IAAI4Z,EAAItY,KAAK6U,MAAMnW,EAASJ,GACxBia,EAAIvY,KAAK6U,MAAMnW,EAASH,GAC5B,MAAO,CACLia,EAAGtlB,EAAKulB,aAAa7X,EAAO0X,EAAGC,GAC/BG,EAAGxlB,EAAKulB,aAAa7X,EAAO0X,EAAI,EAAGC,GACnCI,EAAGzlB,EAAKulB,aAAa7X,EAAO0X,EAAGC,EAAI,GACnCK,EAAG1lB,EAAKulB,aAAa7X,EAAO0X,EAAI,EAAGC,EAAI,UAI3CE,aAAe,SAAC7X,EAAOtC,EAAGC,GAOxB,MAAO,CACLD,EAAGA,EACHC,EAAGA,EACHvF,MARE9F,EAAK2lB,WAAWjY,EAAOtC,EAAGC,GACpBqC,EAAM/B,cAAcP,EAAGC,GAEvB6Z,EAAaU,2EASdlY,EAAOtC,EAAGC,GACnB,OAAOD,GAAK,GAAKA,EAAIsC,EAAMxD,YACpBmB,GAAK,GAAKA,EAAIqC,EAAMvD,qBA9BzB+a,GACGU,kBAAoB,EAiCdV,UCPAW,8MAzBbvB,iBAAmB,SAAC5W,EAAOlC,GAKzB,IAJA,IAGIsa,EAHAC,EAAQ/lB,EAAKgmB,iBAAiBtY,EAAOlC,GACrCya,EAAgBjmB,EAAKmlB,iBAAiBzX,EAAOlC,GAC7C0a,EAAOjkB,OAAOikB,KAAKD,GAEdrN,EAAI,EAAGA,EAAIsN,EAAKtc,OAAQgP,IAAK,CACpC,IAAIuN,EAAYF,EAAcC,EAAKtN,IAC/BuN,EAAU/a,IAAM2a,EAAM3a,GACnB+a,EAAU9a,IAAM0a,EAAM1a,IAC3Bya,EAAsBI,EAAKtN,IAG/B,OAAOqN,EAAcH,GAAqBhgB,SAG5CkgB,iBAAmB,SAACtY,EAAOlC,GACzB,IAAIJ,EAAI0B,KAAKC,MAAMvB,EAASJ,GACxBC,EAAIyB,KAAKC,MAAMvB,EAASH,GAC5B,MAAO,CACLD,EAAGA,EAAIsC,EAAMxD,WAAakB,EAAIA,EAAI,EAClCC,EAAGA,EAAIqC,EAAMvD,YAAckB,EAAIA,EAAI,iCArBE6Z,IC8B5BkB,8MA7Bb9B,iBAAmB,SAAC5W,EAAOlC,GACzB,IAAIya,EAAgBjmB,EAAKmlB,iBAAiBzX,EAAOlC,GAC7C4Z,EAAItY,KAAK6U,MAAMnW,EAASJ,GACxBia,EAAIvY,KAAK6U,MAAMnW,EAASH,GACxBgb,EAAI7a,EAASJ,EAAIga,EACjBkB,EAAI9a,EAASH,EAAIga,EACjBC,EAAIW,EAAcX,EAAExf,MACpB0f,EAAIS,EAAcT,EAAE1f,MACpB2f,EAAIQ,EAAcR,EAAE3f,MAEpBygB,GAAKjB,EADDW,EAAcP,EAAE5f,MACP0f,EAAIC,GAAKY,EAAIC,GACrBb,EAAIH,GAAKgB,GACTd,EAAIF,GAAKe,EACVf,EACR,OAAOtlB,EAAKwmB,YAAYD,MAG1BC,YAAc,SAAAhiB,GACZ,IAAIgK,EAAS1B,KAAKC,MAAMvI,GAOxB,OANIgK,EAASpF,GAAakE,kBACxBkB,EAASpF,GAAakE,iBAEpBkB,GAAUpF,GAAamE,kBACzBiB,EAASpF,GAAamE,gBAAkB,GAEnCiB,gCA1BwB0W,ICe7B9N,GAAS,CACbjQ,KAAM,CACJkC,MAAO,IACP7B,QAAS,OACTC,eAAgB,aAChB2O,WAAY,SACZiB,aAAc,gBACdxS,OAAQ,QAEVyS,OAAQ,CACNjO,MAAO,QACPxE,OAAQ,QAEV0S,MAAO,CACL5O,WAAY2N,GAAMxO,QAAQM,UAAUH,MAEtCoK,YAAa,CACXxN,OAAQyR,GAAM3O,QAAQC,KACtBuS,SAAU,MAIRsM,GAAgB,CACpBC,iBAAkB,IAAIb,GACtBc,SAAU,IAAIP,IAGVrC,8MACJ6C,kBAAoB,CAAC,mBAAoB,cAEzChnB,MAAQ,CACNinB,QAASC,GAAiB9B,WAC1B+B,QAASD,GAAiB9B,WAC1BgC,qBAAsBhnB,EAAK4mB,kBAAkB,MAG/CK,wBAA0B,WACxB,OAAOR,GAAczmB,EAAKJ,MAAMonB,yBAGlCzT,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WACL,GAAIA,EAAW+K,qBAAsB,CACnC,IAAI9F,EAAQjF,EAAWiJ,mBACnBwS,EAAelkB,EAAKinB,0BACpBnC,EAAS9kB,EAAKknB,YAEd,IAAIJ,GAAiBhC,EAAO1Z,EAAG0Z,EAAOzZ,GAClC6H,QAAQxF,EAAOwW,GACvBxW,EAAM7C,eAENpC,EAAWga,uBACXha,EAAW6X,oBACX7X,EAAW0e,uBAAkB5lB,GAC7BkH,EAAWia,mBAIfwE,UAAY,WACV,MAAO,CACL9b,EAAGpL,EAAKJ,MAAMinB,QACdxb,EAAGrL,EAAKJ,MAAMmnB,YAIlBK,gBAAkB,SAAAvkB,GAAI,OAAI,SAAC1C,EAAOqE,GAChCxE,EAAKC,SAALgC,OAAAgH,EAAA,EAAAhH,CAAA,GAAgBY,EAAO2B,QAGzB6iB,oBAAsB,SAAAxkB,GAAI,OAAI,SAAA1C,GAC5B,IAAI2kB,EAAS7O,OAAOC,WAAW/V,EAAME,OAAOmE,OACxCsiB,GAAiB/B,cAAcD,IACjC9kB,EAAKC,SAALgC,OAAAgH,EAAA,EAAAhH,CAAA,GAAgBY,EAAOiiB,QAI3BwC,uBAAyB,SAAAnnB,GACvBH,EAAKC,SAAS,CAAC+mB,qBAAsB7mB,EAAME,OAAOmE,iFAG3C,IACA0C,EAAWtG,KAAKJ,MAAhB0G,QACP,OACIlG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAACmV,GAAApV,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,sBACA5H,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,CACIkR,QAAQ,YADZ,YAKFnR,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,MACAD,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAa+B,UAAWkE,EAAQmL,aAC9BrR,EAAAC,EAAAC,cAACsR,GAAAvR,EAAD,CACIuD,MAAO5D,KAAKhB,MAAMonB,qBAClBviB,SAAU7D,KAAK0mB,uBACfC,WAAS,GAEV3mB,KAAKgmB,kBAAkBnkB,IAAI,SAAA+kB,GAC1B,OAAOxmB,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CACH2B,IAAK4kB,EACLhjB,MAAOgjB,GAAmBA,OAIpCxmB,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,CAAYkR,QAAQ,UAAUhQ,MAAO,CAAC0C,OAAQ,KAA9C,qBACA7D,EAAAC,EAAAC,cAACiX,GAAAlX,EAAD,CACIiG,QACE,CAAEkR,UAAWlR,EAAQoQ,OACnBe,MAAOnR,EAAQqQ,MACfA,MAAOrQ,EAAQqQ,OAEnBe,IAAOwO,GAAiB9B,WACxBzM,IAAOuO,GAAiB7B,WACxBzgB,MAAO5D,KAAKhB,MAAMinB,QAClBrO,kBAAgB,QAChB/T,SAAU7D,KAAKwmB,gBAAgB,aAEnCpmB,EAAAC,EAAAC,cAACqV,GAAAtV,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBL,MAAO5D,KAAKhB,MAAMinB,QAClBjY,KAAK,SACL/J,OAAO,SACPJ,SAAU7D,KAAKymB,oBAAoB,WACnCvhB,MAAM,eAGZ9E,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,CAAYkR,QAAQ,UAAUhQ,MAAO,CAAC0C,OAAQ,KAA9C,mBACA7D,EAAAC,EAAAC,cAACiX,GAAAlX,EAAD,CACIiG,QACE,CAAEkR,UAAWlR,EAAQoQ,OACnBe,MAAOnR,EAAQqQ,MACfA,MAAOrQ,EAAQqQ,OAEnBe,IAAOwO,GAAiB9B,WACxBzM,IAAOuO,GAAiB7B,WACxBzgB,MAAO5D,KAAKhB,MAAMmnB,QAClBvO,kBAAgB,QAChB/T,SAAU7D,KAAKwmB,gBAAgB,aAEnCpmB,EAAAC,EAAAC,cAACqV,GAAAtV,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBL,MAAO5D,KAAKhB,MAAMmnB,QAClBnY,KAAK,SACL/J,OAAO,SACPJ,SAAU7D,KAAKymB,oBAAoB,WACnCvhB,MAAM,eAGZ9E,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBsN,QAAQ,cACRrM,MAAM,YACNrE,QAASb,KAAK2S,gBAJlB,yBA5HYzQ,aAwIPwE,wBAAW8P,GAAX9P,CAAmByc,ICnL5B0D,wCACGtE,qBAAuB,SAACzV,EAAOga,GAKpC,IAJA,IAAIC,EAAQD,EAAU,IAAM,EAAkC,EAA9B9H,SAAS8H,EAAU,IAAK,IACpDE,EAAW,IAAIxe,GAAasE,EAAMnE,WAAYmE,EAAMxD,WAAYwD,EAAMvD,YAAauD,EAAM5C,eAAenF,MACxGie,EAAe,GAEb+D,EAAQ,EAAGA,IAAQ,CACvB,IAAI,IAAIrd,EAAIsd,EAAS1d,WAAW,EAAGI,GAAK,EAAGA,IACzC,IAAI,IAAIsR,EAAI,EAAGA,EAAIgM,EAASzd,YAAayR,IAAI,CAC3C,IAAIyH,EAAgBuE,EAAS3a,kBAAkB3C,EAAGsR,GAClDgI,EAAarZ,KAAK8Y,EAAcne,GAChC0e,EAAarZ,KAAK8Y,EAAcle,GAChCye,EAAarZ,KAAK8Y,EAAcje,GAChCwe,EAAarZ,KAAK8Y,EAAcpiB,GAGpC2mB,EAAWH,GAAcG,SAASA,EAAUhE,GAC5CA,EAAe,GAGjBlW,EAAMzD,YAAYe,kBAAkB6Y,KAAK+D,EAAS9c,eAAenF,MAAOiiB,EAAS1d,WAAY0d,EAASzd,aACtGuD,EAAM7C,gBArBJ4c,GAwBGG,SAAW,SAACA,EAAUhE,GACzB,OAAO,IAAIxa,GAAawe,EAASre,WAAYqe,EAASzd,YAAayd,EAAS1d,WAAYc,kBAAkB6Y,KAAKD,KAGtG6D,UCJTI,eAMJ,SAAAA,EAAYrnB,GAAO,IAAAR,EAAA,OAAAiC,OAAAqH,EAAA,EAAArH,CAAArB,KAAAinB,IACjB7nB,EAAAiC,OAAA2N,EAAA,EAAA3N,CAAArB,KAAAqB,OAAA4N,EAAA,EAAA5N,CAAA4lB,GAAA/X,KAAAlP,KAAMJ,KANRZ,MAAQ,CACNkoB,gBAAiB,GACjB5W,WAAY,GAGKlR,EAInBuT,eAAiB,WACf,IAAI6I,EAAgBpc,EAAKQ,MAAMiI,WAAWiJ,mBAE1C+V,GAActE,qBAAqB/G,EAAepc,EAAKJ,MAAMkoB,iBAC7D9nB,EAAKQ,MAAMiI,WAAWga,uBACtBziB,EAAKQ,MAAMiI,WAAW6X,oBACtBtgB,EAAKQ,MAAMiI,WAAWia,gBAVL1iB,EAanBmR,iBAAkB,SAAAhR,GACjBH,EAAKC,SAALgC,OAAAgH,EAAA,EAAAhH,CAAA,GAAiB9B,EAAME,OAAOwC,KAAO1C,EAAME,OAAOmE,SAdhCxE,wEAiBV,IAAAW,EAAAC,KACCsG,EAAYtG,KAAKJ,MAAjB0G,QAER,OACElG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAakR,QAAQ,WAAWnP,UAAWkE,EAAQmL,aAC/CrR,EAAAC,EAAAC,cAACoR,GAAArR,EAAD,CACE8P,IAAK,SAAAA,GACHpQ,EAAKkR,cAAgBd,GAEvBwB,QAAQ,mCAJV,WAQAvR,EAAAC,EAAAC,cAACsR,GAAAvR,EAAD,CACEuD,MAAO5D,KAAKhB,MAAMkoB,gBAClBrjB,SAAU7D,KAAKuQ,iBACfsB,MACEzR,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CACEiQ,WAAYtQ,KAAKhB,MAAMsR,WACvBrO,KAAK,kBACLtC,GAAG,qCAITS,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAU2B,IAAI,IAAI4B,MAAM,KAAxB,SACAxD,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAU2B,IAAI,KAAK4B,MAAM,MAAzB,UACAxD,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAU2B,IAAI,MAAM4B,MAAM,OAA1B,WACAxD,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAU2B,IAAI,MAAM4B,MAAM,OAA1B,aAGFxD,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIkR,QAAQ,MACRrM,MAAM,YACNgO,aAAW,MACXrS,QAASb,KAAK2S,gBAChBvS,EAAAC,EAAAC,cAAC6S,GAAA9S,EAAD,eA3DgB6B,aAsEXwE,wBAjFA,SAAAC,GAAK,MAAK,CACvB8K,YAAa,CACXxN,OAAQ0C,EAAMI,QAAQC,KACtByB,MAAO,KAGTuJ,OAAQ,CACN/N,OAAQ0C,EAAMI,QAAQC,QA0EXN,CAAmBugB,IC/F5BE,+DAIJC,oBAAsB,SAACta,EAAOua,GAC5B,IAAIhZ,EAAOjP,EAAKkoB,0BAA0Bxa,EAAOua,GACjDva,EAAMtD,oBAAoB6E,EAAK5F,MAAO4F,EAAK7I,cAG7C+hB,gBAAkB,SAACza,GACjB,IAAI0a,EAAW1a,EAAMxD,WAAa,EAC9Bme,EAAY3a,EAAMvD,YAAc,EACpC,MAAO,CACLme,QAAa,CAACld,EAAG,EAAGC,EAAG,GACvBkd,SAAa,CAACnd,EAAGgd,EAAU/c,EAAG,GAC9Bmd,WAAa,CAACpd,EAAG,EAAGC,EAAGgd,GACvBI,YAAa,CAACrd,EAAGgd,EAAU/c,EAAGgd,UAIlCK,uBAAyB,SAAChb,EAAOua,GAI/B,IAHA,IAAIU,EAAU3oB,EAAKmoB,gBAAgBza,GAC/Bkb,EAAiB,GACjB1C,EAAOjkB,OAAOikB,KAAKyC,GACd/P,EAAI,EAAGA,EAAIsN,EAAKtc,OAAQgP,IAAK,CACpC,IAAIhW,EAAMsjB,EAAKtN,GACfgQ,EAAehmB,GAAO5C,EAAK6oB,oBAAoBZ,EAAOU,EAAQ/lB,IAEhE,OAAOgmB,QAGTV,0BAA4B,SAACxa,EAAOua,GAClC,IAAIU,EAAU3oB,EAAK0oB,uBAAuBhb,EAAOua,GAC7Ca,EAAS9oB,EAAK+oB,iBAAiBJ,GACnC,MAAO,CACLtf,MAAOyD,KAAKC,MAAMD,KAAKkP,IAAI8M,EAAOvQ,IAAInN,EAAI0d,EAAOxQ,IAAIlN,IACrDhF,OAAQ0G,KAAKC,MAAMD,KAAKkP,IAAI8M,EAAOvQ,IAAIlN,EAAIyd,EAAOxQ,IAAIjN,WAI1D0d,iBAAmB,SAACJ,GAIlB,IAHA,IAAIK,EAAe,GACfC,EAAe,GACf/C,EAAOjkB,OAAOikB,KAAKyC,GACd/P,EAAI,EAAGA,EAAIsN,EAAKtc,OAAQgP,IAAK,CACpC,IAAIhW,EAAMsjB,EAAKtN,GACfoQ,EAAaze,KAAKoe,EAAQ/lB,GAAKwI,GAC/B6d,EAAa1e,KAAKoe,EAAQ/lB,GAAKyI,GAEjC,MAAO,CACLiN,IAAK,CACHlN,EAAG0B,KAAKwL,IAAL4Q,MAAApc,KAAYkc,GACf3d,EAAGyB,KAAKwL,IAAL4Q,MAAApc,KAAYmc,IAEjB1Q,IAAK,CACHnN,EAAG0B,KAAKyL,IAAL2Q,MAAApc,KAAYkc,GACf3d,EAAGyB,KAAKyL,IAAL2Q,MAAApc,KAAYmc,WAKrBJ,oBAAsB,SAACZ,EAAOzc,GAAa,IAClCJ,EAAQI,EAARJ,EAAGC,EAAKG,EAALH,EACN8d,EAAWlB,EAAQnb,KAAKqT,GAAK,IACjC,MAAO,CACL/U,EAAGA,EAAI0B,KAAKsc,IAAID,GAAY9d,EAAIyB,KAAKuc,IAAIF,GACzC9d,GAAKD,EAAI0B,KAAKuc,IAAIF,GAAY9d,EAAIyB,KAAKsc,IAAID,UAI/CG,kBAAoB,SAACrB,EAAOzc,EAAUsd,GAAW,IAAAS,EAClCvpB,EAAK6oB,oBAAoBZ,EAAOzc,GAAxCJ,EAD0Cme,EAC1Cne,EAAGC,EADuCke,EACvCle,EACR,MAAO,CACLD,EAAGA,EAAI0B,KAAKkP,IAAI8M,EAAOxQ,IAAIlN,GAC3BC,EAAGA,EAAIyB,KAAKkP,IAAI8M,EAAOxQ,IAAIjN,UAI/Bme,mBAAqB,SAACvB,EAAOzc,EAAUsd,GAAW,IAC3C1d,EAAQI,EAARJ,EAAGC,EAAKG,EAALH,EACJoe,EAAO3c,KAAKkP,IAAI8M,EAAOxQ,IAAIlN,GAC3Bse,EAAO5c,KAAKkP,IAAI8M,EAAOxQ,IAAIjN,GAC3B8d,EAAWlB,EAAQnb,KAAKqT,GAAK,IACjC,MAAO,CACL/U,GAAIA,EAAIqe,GAAQ3c,KAAKsc,IAAID,IAAaO,EAAOre,GAAKyB,KAAKuc,IAAIF,GAC3D9d,GAAID,EAAIqe,GAAQ3c,KAAKuc,IAAIF,IAAa9d,EAAIqe,GAAQ5c,KAAKsc,IAAID,UAS/DQ,aAAe,SAACjc,EAAOlC,GAErB,IADA,IAAI0a,EAAOjkB,OAAOikB,KAAK1a,GACdoN,EAAI,EAAGA,EAAIsN,EAAKtc,OAAQgP,IAAK,CACpC,IAAIhW,EAAMsjB,EAAKtN,GACfpN,EAAS5I,GAAOkK,KAAKC,MAAMvB,EAAS5I,IAChC4I,EAAS5I,GAAO,IAClB4I,EAAS5I,GAAO,GAGhB4I,EAASJ,GAAKsC,EAAMxD,aACtBsB,EAASJ,EAAIsC,EAAMxD,WAAa,GAE9BsB,EAASH,GAAKqC,EAAMvD,cACtBqB,EAASH,EAAIqC,EAAMvD,YAAc,kEAlBjB8d,GAClB,OAAOA,GAASF,EAAS6B,WAClB3B,GAASF,EAAS8B,mBA3FvB9B,GACG6B,WAAa,IADhB7B,GAEG8B,UAAY,IA8GN9B,UC5FA+B,8MAlBb5W,QAAU,SAACxF,EAAOua,GAChB,IAAIU,EAAU3oB,EAAK0oB,uBAAuBhb,EAAOua,GAC7Ca,EAAS9oB,EAAK+oB,iBAAiBJ,GACnC3oB,EAAKgoB,oBAAoBta,EAAOua,GAChC,IAAK,IAAI3d,EAAI,EAAGA,EAAIoD,EAAMxD,WAAYI,IACpC,IAAK,IAAIsR,EAAI,EAAGA,EAAIlO,EAAMvD,YAAayR,IAAK,CAC1C,IAAI9V,EAAQ4H,EAAM/B,cAAcrB,EAAGsR,GAC/BpQ,EAAWxL,EAAKspB,kBAAkBrB,EAAO,CAAC7c,EAAGd,EAAGe,EAAGuQ,GAAIkN,GAC3Dpb,EAAM7C,eACN7K,EAAK2pB,aAAajc,EAAOlC,GACzBkC,EAAMxB,cAAcV,EAASJ,EAAGI,EAASH,EAAGvF,GAC5C4H,EAAMhB,kBAAkBlB,EAASJ,EAAGI,EAASH,EAAG,KAChDqC,EAAM9C,kDAbYmd,IC2BXgC,8MA1Bb7W,QAAU,SAACxF,EAAOua,EAAO/D,GACvB,IAAIyE,EAAU3oB,EAAK0oB,uBAAuBhb,EAAOua,GAC7Ca,EAAS9oB,EAAK+oB,iBAAiBJ,GACnC3oB,EAAKgoB,oBAAoBta,EAAOua,GAChCva,EAAM7C,eACN,IAAK,IAAIP,EAAI,EAAGA,EAAIoD,EAAMxD,WAAYI,IACpC,IAAK,IAAIsR,EAAI,EAAGA,EAAIlO,EAAMvD,YAAayR,IAAK,CAC1C,IAAIpQ,EAAWxL,EAAKwpB,mBAAmBvB,EAAO,CAAC7c,EAAGd,EAAGe,EAAGuQ,GAAIkN,GAE5D,GADApb,EAAM9C,mBACF5K,EAAKgqB,gBAAgBxe,EAAUkC,GAAQ,CACzC,IAAI5H,EAAQoe,EAAaI,iBAAiB5W,EAAOlC,GACjDkC,EAAM7C,eACN6C,EAAMxB,cAAc5B,EAAGsR,EAAG9V,GAC1B4H,EAAMhB,kBAAkBpC,EAAGsR,EAAG,KAEhClO,EAAM7C,mBAKZmf,gBAAkB,SAACxe,EAAUkC,GAC3B,OAAOlC,EAASJ,GAAK,GAAKI,EAASJ,EAAIsC,EAAMxD,YACtCsB,EAASH,GAAK,GAAKG,EAASH,EAAIqC,EAAMvD,0CAvBd4d,ICkB7B3Q,GAAS,CACbjQ,KAAM,CACJkC,MAAO,IACP7B,QAAS,OACTC,eAAgB,aAChB2O,WAAY,SACZiB,aAAc,gBACdxS,OAAQ,QAEVyS,OAAQ,CACNjO,MAAO,QACPxE,OAAQ,QAEV0S,MAAO,CACL5O,WAAY2N,GAAMxO,QAAQM,UAAUH,MAEtCoK,YAAa,CACXxN,OAAQyR,GAAM3O,QAAQC,KACtBuS,SAAU,MAIR8P,IAAgBC,GAAkBL,UAAYK,GAAkBN,WAAa,EAE7E7B,8MACJtB,cAAgB,CACdC,iBAAkB,IAAIb,GACtBc,SAAU,IAAIP,MAGhB+D,gBAAkB,CAChBC,IAAK,IAAIN,GACTO,aAAc,IAAIN,MAGpBnqB,MAAQ,CACNqoB,MAAOgC,GACPjD,qBAAsB/kB,OAAOikB,KAAKlmB,EAAKymB,eAAe,GACtD6D,uBAAwBroB,OAAOikB,KAAKlmB,EAAKmqB,iBAAiB,MAG5D5W,eAAiB,WAAM,IAChB9K,EAAczI,EAAKQ,MAAnBiI,WACL,GAAIA,EAAW+K,qBAAsB,CACnC,IAAI9F,EAAQjF,EAAWiJ,mBAClBuW,EAASjoB,EAAKJ,MAAdqoB,MACUjoB,EAAKuqB,oBACXrX,QAAQxF,EAAOua,EAAOjoB,EAAKwqB,mBACpC9c,EAAM7C,eAENpC,EAAWga,uBACXha,EAAW6X,oBACX7X,EAAW0e,uBAAkB5lB,GAC7BkH,EAAWia,mBAIf6H,kBAAoB,WAClB,OAAOvqB,EAAKmqB,gBAAgBnqB,EAAKJ,MAAM0qB,2BAGzCE,gBAAkB,WAChB,OAAOxqB,EAAKymB,cAAczmB,EAAKJ,MAAMonB,yBAGvCyD,eAAiB,SAACtqB,EAAOqE,GACvBxE,EAAKC,SAAS,CAACgoB,MAAOzjB,OAGxBkmB,mBAAqB,SAAAvqB,GACnB,IAAI8nB,EAAQhS,OAAOC,WAAW/V,EAAME,OAAOmE,OACvC0lB,GAAkBS,aAAa1C,IACjCjoB,EAAKC,SAAS,CAACgoB,MAAOA,OAI1BX,uBAAyB,SAAAnnB,GACvBH,EAAKC,SAAS,CAAC+mB,qBAAsB7mB,EAAME,OAAOmE,WAGpDomB,yBAA2B,SAAAzqB,GACzBH,EAAKC,SAAS,CAACqqB,uBAAwBnqB,EAAME,OAAOmE,WAGtDqmB,6BAA+B,WAC7B,MAA6C,iBAAtC7qB,EAAKJ,MAAM0qB,gGAGX,IACFpjB,EAAWtG,KAAKJ,MAAhB0G,QACL,OACIlG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACqF,QAAS,OAAQC,eAAgB,SAAU2O,WAAY,WAClEpV,EAAAC,EAAAC,cAAC6Y,GAAA9Y,EAAD,CAAMkB,MAAO,CAACyG,QAAS,QAAvB,eACA5H,EAAAC,EAAAC,cAAC8Y,GAAA/Y,EAAD,CACIkR,QAAQ,YADZ,aAKFnR,EAAAC,EAAAC,cAAC+Y,GAAAhZ,EAAD,MACAD,EAAAC,EAAAC,cAACqb,GAAAtb,EAAD,CAAa+B,UAAWkE,EAAQmL,aAC9BrR,EAAAC,EAAAC,cAACub,GAAAxb,EAAD,CACIuD,MAAO5D,KAAKhB,MAAM0qB,uBAClB7lB,SAAU7D,KAAKgqB,yBACfrD,WAAS,GAEVtlB,OAAOikB,KAAKtlB,KAAKupB,iBAAiB1nB,IAAI,SAAA+kB,GACrC,OAAOxmB,EAAAC,EAAAC,cAACwb,GAAAzb,EAAD,CACH2B,IAAK4kB,EACLhjB,MAAOgjB,GAAmBA,OAIpCxmB,EAAAC,EAAAC,cAACqb,GAAAtb,EAAD,CAAa+B,UAAWkE,EAAQmL,aAC9BrR,EAAAC,EAAAC,cAACub,GAAAxb,EAAD,CACIuD,MAAO5D,KAAKhB,MAAMonB,qBAClBviB,SAAU7D,KAAK0mB,uBACftiB,SAAUpE,KAAKiqB,+BACftD,WAAS,GAEVtlB,OAAOikB,KAAKtlB,KAAK6lB,eAAehkB,IAAI,SAAAqoB,GACnC,OAAO9pB,EAAAC,EAAAC,cAACwb,GAAAzb,EAAD,CACH2B,IAAKkoB,EACLtmB,MAAOsmB,GAAiBA,OAIlC9pB,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAAC8Y,GAAA/Y,EAAD,CAAYkR,QAAQ,UAAUhQ,MAAO,CAAC0C,OAAQ,KAA9C,qBACA7D,EAAAC,EAAAC,cAACma,GAAApa,EAAD,CACIiG,QACE,CAAEkR,UAAWlR,EAAQoQ,OACnBe,MAAOnR,EAAQqQ,MACfA,MAAOrQ,EAAQqQ,OAEnBe,IAAO4R,GAAkBN,UACzBrR,IAAO2R,GAAkBL,UACzBrlB,MAAO5D,KAAKhB,MAAMqoB,MAClBzP,kBAAgB,QAChB/T,SAAU7D,KAAK6pB,iBAEnBzpB,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBL,MAAO5D,KAAKhB,MAAMqoB,MAClBrZ,KAAK,SACL/J,OAAO,SACPJ,SAAU7D,KAAK8pB,mBACf5kB,MAAM,eAGZ9E,EAAAC,EAAAC,cAACmZ,GAAApZ,EAAD,CACIkB,MAAO,CAAC0C,OAAQ,QAChBsN,QAAQ,cACRrM,MAAM,YACNrE,QAASb,KAAK2S,gBAJlB,0BA9HazQ,aA0IRwE,wBAAW8P,GAAX9P,CAAmBygB,ICpInBgD,GApBI,CACjBC,SAAU,SAAAviB,GAAe,OAAOzH,EAAAC,EAAAC,cAAC+pB,GAAD,CAAWxiB,WAAYA,KACvDyiB,SAAU,SAAAziB,GAAe,OAAOzH,EAAAC,EAAAC,cAACiqB,GAAD,CAAW1iB,WAAYA,KACvD2iB,YAAa,SAAA3iB,GAAe,OAAOzH,EAAAC,EAAAC,cAACmqB,GAAD,CAAe5iB,WAAYA,KAC9D6iB,kBAAmB,SAAA7iB,GAAe,OAAOzH,EAAAC,EAAAC,cAACqqB,GAAD,CAA0B9iB,WAAYA,KAC/E+iB,oBAAqB,SAAA/iB,GAAe,OAAOzH,EAAAC,EAAAC,cAACuqB,GAAD,CAAuBhjB,WAAYA,KAC9EijB,uBAAwB,SAAAjjB,GAAe,OAAOzH,EAAAC,EAAAC,cAACyqB,GAAD,CAAuBljB,WAAYA,KACjFmjB,wBAAyB,SAAAnjB,GAAe,OAAOzH,EAAAC,EAAAC,cAAC2qB,GAAD,CAAwBpjB,WAAYA,KACnFqjB,iBAAkB,SAAArjB,GAAe,OAAOzH,EAAAC,EAAAC,cAAC6qB,GAAD,CAAiBtjB,WAAYA,KACrEujB,iBAAkB,SAAAvjB,GAAe,OAAOzH,EAAAC,EAAAC,cAAC+qB,GAAD,CAAiBxjB,WAAYA,KACrEyjB,kBAAmB,SAAAzjB,GAAe,OAAOzH,EAAAC,EAAAC,cAACirB,GAAD,CAAkB1jB,WAAYA,KACvE2jB,YAAa,SAAA3jB,GAAe,OAAOzH,EAAAC,EAAAC,cAACmrB,GAAD,CAAqB5jB,WAAYA,KACpE6jB,cAAe,SAAA7jB,GAAe,OAAOzH,EAAAC,EAAAC,cAACqrB,GAAD,CAAc9jB,WAAYA,KAC/D+jB,gBAAiB,SAAA/jB,GAAe,OAAOzH,EAAAC,EAAAC,cAACurB,GAAD,CAAiBhkB,WAAYA,KACpEikB,YAAa,SAAAjkB,GAAe,OAAOzH,EAAAC,EAAAC,cAACyrB,GAAD,CAASlkB,WAAYA,KACxDmkB,aAAc,SAAAnkB,GAAe,OAAOzH,EAAAC,EAAAC,cAAC2rB,GAAD,CAAapkB,WAAYA,KAC7DqkB,SAAU,SAAArkB,GAAe,OAAOzH,EAAAC,EAAAC,cAAC6rB,GAAD,CAAUtkB,WAAYA,KACtDukB,mBAAoB,SAAAvkB,GAAe,OAAOzH,EAAAC,EAAAC,cAAC+rB,GAAD,CAAmBxkB,WAAYA,MCnB5DykB,0LApBX,IAAIC,EAAgBvsB,KAAKJ,MAAM2sB,cAC3B1kB,EAAa7H,KAAKJ,MAAMiI,WAE5B,YAAsBlH,IAAlB4rB,EACMnsB,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,uCAEDmsB,GAAaD,GAAe1kB,oCAKrC,OACIzH,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACIkB,MAAO,CAACiE,OAAQ,SACjBxF,KAAKysB,uBAjBKvqB,8HCWfwqB,GAAmB,GAEnBC,8MACJpd,aAAe,SAAChQ,EAAOqE,GACrBxE,EAAKQ,MAAMiI,WAAW+kB,oBAAoBhpB,MAG5CipB,iBAAmB,SAACttB,EAAO8b,GACzBjc,EAAKQ,MAAMiI,WAAWilB,OAAO1tB,EAAKQ,MAAMiI,WAAWkR,cAAcsC,IACjE9b,EAAMwtB,qBAGRC,aAAe,SAAC7sB,GAKd,OAJKA,EAAM6I,OAAS0jB,KAChBvsB,EAAQA,EAAMiJ,MAAM,EAAGjJ,EAAM6I,QAAQuD,QAAQ,SAAU,QAGpDpM,2EAGA,IAAAJ,EAAAC,KACCsG,EAAYtG,KAAKJ,MAAjB0G,QACFuB,EAAa7H,KAAKJ,MAAMiI,WAE9B,OACIzH,EAAAC,EAAAC,cAAA,OAAK8B,UAAWkE,EAAQC,MACtBnG,EAAAC,EAAAC,cAAC2sB,GAAA5sB,EAAD,CACIkB,MAAO,CAACkH,MAAO,QACfmC,SAAS,SACT1F,MAAM,WACR9E,EAAAC,EAAAC,cAAC4sB,GAAA7sB,EAAD,CACIuD,MAAO5D,KAAKJ,MAAMiI,WAAWslB,wBAC7BtpB,SAAU7D,KAAKuP,aACf6d,YAAU,EACVC,cAAc,QAGdxlB,EAAWqR,iBAAiBrX,IACxB,SAAA1B,GAAK,OAAIC,EAAAC,EAAAC,cAACgtB,GAAAjtB,EAAD,CACLuE,UAAU,MACV5C,IAAK7B,EACL4D,MACE3D,EAAAC,EAAAC,cAAA,WACCP,EAAKitB,aAAa7sB,GACrBC,EAAAC,EAAAC,cAACitB,GAAAltB,EAAD,CAAYkB,MAAO,CAAEisB,YAAa,QAAUtoB,MAAM,YAAYgO,aAAW,eAAerS,QAAS,SAAA2O,GAAC,OAAIzP,EAAK8sB,iBAAiBrd,EAAGrP,KAC7HC,EAAAC,EAAAC,cAACmtB,GAAAptB,EAAD,sBA3CF4P,IAAM/N,WA4DfwE,wBArEA,SAAAC,GAAK,MAAK,CACvBJ,KAAM,CACJmnB,SAAU,EACVjlB,MAAO,UAkEI/B,CAAmBimB,yBCtE9BgB,GAAkB,CACpB3lB,QAAS,OACTpB,QAAS,OACTC,eAAgB,gBAChB2O,WAAY,UAoICoY,8MA/HbC,eAAiB,WACf,IAAI/gB,EAAQ1N,EAAKQ,MAAMiI,WAAWiJ,mBADbgd,EAER1uB,EAAKQ,MAAMgL,SAAnBJ,EAFgBsjB,EAEhBtjB,EAAGC,EAFaqjB,EAEbrjB,EAER,YAAc9J,IAAVmM,GACIA,EAAMvC,kBAAkBC,EAAGC,KACrB,IAAPD,IACO,IAAPC,EAGE,OAASqC,EAAMvB,gBAAgBf,EAAGC,GAAK,KAC9BqC,EAAMrB,kBAAkBjB,EAAGC,GAAK,KAChCqC,EAAMnB,iBAAiBnB,EAAGC,GAAK,IAJxC,WAQXsjB,mBAAqB,WACnB,IAAIjhB,EAAQ1N,EAAKQ,MAAMiI,WAAWiJ,mBADTkd,EAEZ5uB,EAAKQ,MAAMgL,SAAnBJ,EAFoBwjB,EAEpBxjB,EAAGC,EAFiBujB,EAEjBvjB,EAER,YAAc9J,IAAVmM,GACIA,EAAMvC,kBAAkBC,EAAGC,KACrB,IAAPD,IACO,IAAPC,EAGE,KAAOqC,EAAMvB,gBAAgBf,EAAGC,GAAK,MAC9BqC,EAAMrB,kBAAkBjB,EAAGC,GAAK,MAChCqC,EAAMnB,iBAAiBnB,EAAGC,GAAK,IAJtC,iBAQXwjB,kBAAoB,WAClB,IAAInhB,EAAQ1N,EAAKQ,MAAMiI,WAAWiJ,mBADVod,EAEX9uB,EAAKQ,MAAMgL,SAAnBJ,EAFmB0jB,EAEnB1jB,EAAGC,EAFgByjB,EAEhBzjB,EACR,YAAc9J,IAAVmM,IAA8B,IAAPtC,IAAmB,IAAPC,EAC9B,UAEA,KAAOD,EAAI,MAAaC,KAInC0jB,qBAAuB,WACrB,GAAG/uB,EAAKQ,MAAMiI,WAAW4I,iBAAmB,EAAG,CAC7C,IAAI3D,EAAQ1N,EAAKQ,MAAMiI,WAAWiJ,mBAC9BkW,EAAW,IAAIxe,GAAasE,EAAMnE,WAAa,iBAAmBmE,EAAMlE,YAAakE,EAAMxD,WAAYwD,EAAMvD,YAAauD,EAAM5C,eAAenF,MACnJ3F,EAAKQ,MAAMiI,WAAWiI,IAAIkX,OAI9BoH,iBAAmB,SAAAlc,GAAS,OAAI,WAAM,IAC7BrK,EAAczI,EAAKQ,MAAnBiI,WACDiF,EAAQjF,EAAWiJ,mBACvB,QAAcnQ,IAAVmM,EAAqB,CACvB,OAAQoF,GACN,IAAK,OACHpF,EAAM9C,mBACN,MAEF,IAAK,OACH8C,EAAM7C,eACN,MAEF,IAAK,UACH6C,EAAM/C,kBAKVlC,EAAWga,uBACXha,EAAW6X,oBACX7X,EAAW0e,uBAAkB5lB,GAC7BkH,EAAWia,0FAOf,OACI1hB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACEkB,MAAOosB,IACPvtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACIguB,OACEjuB,EAAAC,EAAAC,cAACguB,GAAAjuB,EAAD,CACIkB,MAAO,CAACwG,WAAY/H,KAAK6tB,oBAE/BtsB,MAAO,CAACisB,YAAa,OACrBzpB,MAAO/D,KAAK+tB,qBACZ7oB,MAAM,YACNqM,QAAQ,aACZnR,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI0D,MAAO/D,KAAKiuB,oBACZ/oB,MAAM,YACNqM,QAAQ,cAEdnR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QACEiB,MAAO,CAACgtB,YAAa,sBACvBnuB,EAAAC,EAAAC,cAACitB,GAAAltB,EAAD,CACI6E,MAAM,YACNrE,QAASb,KAAKmuB,sBAChB/tB,EAAAC,EAAAC,cAACmV,GAAApV,EAAD,wBAGAD,EAAAC,EAAAC,cAACitB,GAAAltB,EAAD,CACI6E,MAAM,YACNrE,QAASb,KAAKouB,iBAAiB,SACjChuB,EAAAC,EAAAC,cAACmV,GAAApV,EAAD,cAEFD,EAAAC,EAAAC,cAACitB,GAAAltB,EAAD,CACI6E,MAAM,YACNrE,QAASb,KAAKouB,iBAAiB,YACjChuB,EAAAC,EAAAC,cAACmV,GAAApV,EAAD,iBAEFD,EAAAC,EAAAC,cAACitB,GAAAltB,EAAD,CACI6E,MAAM,YACNrE,QAASb,KAAKouB,iBAAiB,SACjChuB,EAAAC,EAAAC,cAACmV,GAAApV,EAAD,uBAzHa6B,kCCLrBssB,UAAiB,CACrBzmB,WAAYpB,GAAMO,QAAQC,QAAQE,KAClC7B,OAAQ,OACRiD,MAAO,OACP7B,QAAS,OACT0S,cAAe,SACf7C,aAAc,YAGVgY,GAAuB,CAC3B7nB,QAAS,OACTC,eAAgB,SAChB2O,WAAY,SACZhQ,OAAQ,MACRkpB,SAAU,QAGNC,GAAc,CAClB5mB,WAAY,0BAyHC6mB,eAxGb,SAAAA,EAAYhvB,GAAO,IAAAR,EAAA,OAAAiC,OAAAqH,EAAA,EAAArH,CAAArB,KAAA4uB,IACjBxvB,EAAAiC,OAAA2N,EAAA,EAAA3N,CAAArB,KAAAqB,OAAA4N,EAAA,EAAA5N,CAAAutB,GAAA1f,KAAAlP,KAAMJ,KAPRZ,MAAQ,CACNwL,GAAI,EACJC,GAAI,EACJokB,QAAS,IAGQzvB,EAYnB0vB,eAAiB,SAACvvB,GAChBH,EAAKC,SAAS,CAACmL,EAAGjL,EAAMwvB,YAAYC,QAASvkB,EAAGlL,EAAMwvB,YAAYE,WAbjD7vB,EAgBnB8vB,YAAc,SAAA3vB,GACZH,EAAKC,SAAS,CAACmL,GAAI,EAAGC,GAAI,KAjBTrL,EAoBpB+vB,aAAe,WACZ/vB,EAAKJ,MAAMowB,aAAehwB,EAAKJ,MAAMowB,aArBpBhwB,EAwBrBiwB,WAAa,WACT,IAAIC,EAAoBlwB,EAAKQ,MAAMiI,WAAWiJ,mBAE1Cye,EAAQD,EAAkBhmB,YAAclK,EAAKJ,MAAM6vB,QAAQ,GAAGrkB,EAAE,KAChEglB,EAAQF,EAAkB/lB,aAAenK,EAAKJ,MAAM6vB,QAAQ,GAAGpkB,EAAE,KACjEglB,EAAOH,EAAkBhmB,YAAclK,EAAKJ,MAAM6vB,QAAQ,GAAGpmB,MAAM,KACnEinB,EAAOJ,EAAkB/lB,aAAenK,EAAKJ,MAAM6vB,QAAQ,GAAGrpB,OAAO,KAGrE0H,EADM9N,EAAKQ,MAAMiI,WAAW6I,YAAYiP,WAAW,MACnCzV,aAAaqlB,EAAOC,EAAOC,EAAKC,GAEpDtwB,EAAKuwB,iBACL,IAAI7iB,EAAQ,IAAItE,GAAa8mB,EAAkB3mB,WAAa,WAAa2mB,EAAkB1mB,YAAasE,EAAUzE,MAAOyE,EAAU1H,OAAQ0H,EAAUnI,MACrJ3F,EAAKQ,MAAMiI,WAAWiI,IAAIhD,IArCT1N,EA8DnBuwB,eAAiB,WACfvwB,EAAKC,SAAS,CAAEwvB,QAAS,MA7DzBzvB,EAAKwwB,UAAY3f,IAAMC,YACvB9Q,EAAKywB,eAAiBzwB,EAAKywB,eAAeC,KAApBzuB,OAAA0uB,GAAA,EAAA1uB,QAAA0uB,GAAA,EAAA1uB,CAAAjC,KACxBA,EAAK4wB,cAAgB5wB,EAAK4wB,cAAcF,KAAnBzuB,OAAA0uB,GAAA,EAAA1uB,QAAA0uB,GAAA,EAAA1uB,CAAAjC,KACnBA,EAAKQ,MAAMqwB,cAAc,SAAU7wB,EAAKuwB,gBALvBvwB,mFASjBY,KAAKJ,MAAMiI,WAAWqoB,UAAUlwB,KAAK4vB,UAAU/f,+CAgCnCgf,GACV7uB,KAAKJ,MAAMiI,WAAW4I,iBAAmB,GACzCzQ,KAAKX,SAAS,CACZwvB,QAASA,2CAIAsB,GACf,IAAKA,EAAYC,WAChB,OAEKhwB,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAAEqJ,SAAU,WAAYhF,OAAQ,WAC5CxF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQkR,QAAQ,YAAYrM,MAAM,YAAYrE,QAASb,KAAKqvB,YAA5D,0CAcJ,IAAIgB,EAAc,CAACzpB,QAAS5G,KAAKJ,MAAMiI,WAAW4I,eAAiB,EAAI,OAAS,SAEhF,OACIrQ,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACIkB,MAAOitB,IACTpuB,EAAAC,EAAAC,cAACgwB,GAAD,CACIzoB,WAAY7H,KAAKJ,MAAMiI,aAC3BzH,EAAAC,EAAAC,cAAA,OAAKiB,MAAOktB,IACZruB,EAAAC,EAAAC,cAACiwB,GAAAlwB,EAAD,CACJmwB,WAAY,EACZ3B,QAAS7uB,KAAKhB,MAAM6vB,QACdF,YAAaA,GACnB8B,YAAU,EACJZ,eAAgB7vB,KAAK6vB,eAC3BhsB,SAAU7D,KAAKgwB,cACfzuB,MAAO8uB,GAGHjwB,EAAAC,EAAAC,cAAA,UACM6P,IAAKnQ,KAAK4vB,UACVc,YAAa1wB,KAAK8uB,eAClBxpB,aAActF,KAAKkvB,aAHzB,wCASA9uB,EAAAC,EAAAC,cAACqwB,GAAD,CACI/lB,SAAU5K,KAAKhB,MACf6I,WAAY7H,KAAKJ,MAAMiI,qBAxGR3F,aChCvB0uB,WAAS,CACbC,eAAgB,OAChB3rB,MAAOyB,GAAMO,QAAQM,UAAUH,OAwBlBypB,OArBf,WACE,OACI1wB,EAAAC,EAAAC,cAACF,EAAAC,EAAM0wB,SAAP,KACE3wB,EAAAC,EAAAC,cAACgR,GAAAjR,EAAD,KACED,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,KACIiB,MAAOqvB,GACPvuB,KAAK,sCAFT,oBAKAjC,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,KACIiB,MAAOqvB,GACPvuB,KAAK,gCAFT,0BCkQK2uB,GAlOb,SAAAA,EAAYlkB,GAAO,IAAA1N,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAAgxB,GAAAhxB,KAjDnBixB,MAAQ,CACN3sB,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,WAAY,IA6CKzE,KA1CnB8C,aAAe,CACbwB,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,WAAY,IAsCKzE,KAnCnB0X,IAAM,CACJpT,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,WAAY,GA+BKzE,KA5BnB2X,IAAM,CACJrT,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,WAAY,GAwBKzE,KArBnBkxB,KAAO,CACL5sB,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,WAAY,GAiBKzE,KAdnBmxB,OAAS,CACP7sB,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,WAAY,GAUKzE,KAPnBoxB,QAAU,CACR9sB,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,WAAY,GAGKzE,KAInB+M,SAAW,SAAAD,GACT1N,EAAK0N,MAAQA,EACb1N,EAAKiyB,WACLjyB,EAAKkyB,uBACLlyB,EAAKmyB,UACLnyB,EAAKoyB,YACLpyB,EAAKqyB,YACLryB,EAAKsyB,cAXY1xB,KAcnB2xB,SAAW,SAAAnf,GACT,MAAO,CACLlO,EAAGlF,EAAK6xB,MAAM3sB,EAAEkO,GAChBjO,EAAGnF,EAAK6xB,MAAM1sB,EAAEiO,GAChBhO,EAAGpF,EAAK6xB,MAAMzsB,EAAEgO,GAChB/N,WAAYrF,EAAK6xB,MAAMxsB,WAAW+N,KAnBnBxS,KAuBnB+X,qBAAuB,SAAAvF,GACrB,MAAO,CACLlO,EAAGlF,EAAK0D,aAAawB,EAAEkO,GACvBjO,EAAGnF,EAAK0D,aAAayB,EAAEiO,GACvBhO,EAAGpF,EAAK0D,aAAa0B,EAAEgO,GACvB/N,WAAYrF,EAAK0D,aAAa2B,WAAW+N,KA5B1BxS,KAgCnB4xB,eAAiB,SAAApf,GACf,MAAO,CACLlO,EAAGlF,EAAKuyB,SAASnf,GAAOlO,EAAIlF,EAAKkL,oBACjC/F,EAAGnF,EAAKuyB,SAASnf,GAAOjO,EAAInF,EAAKkL,oBACjC9F,EAAGpF,EAAKuyB,SAASnf,GAAOhO,EAAIpF,EAAKkL,oBACjC7F,WAAYrF,EAAKuyB,SAASnf,GAAO/N,WAAarF,EAAKkL,sBArCpCtK,KAyCnBuY,2BAA6B,SAAA/F,GAC3B,MAAO,CACLlO,EAAGlF,EAAK2Y,qBAAqBvF,GAAOlO,EAAIlF,EAAKkL,oBAC7C/F,EAAGnF,EAAK2Y,qBAAqBvF,GAAOjO,EAAInF,EAAKkL,oBAC7C9F,EAAGpF,EAAK2Y,qBAAqBvF,GAAOhO,EAAIpF,EAAKkL,oBAC7C7F,WAAYrF,EAAK2Y,qBAAqBvF,GAAO/N,WAAarF,EAAKkL,sBA9ChDtK,KAkDnBoX,QAAU,WACR,OAAOhY,EAAK8xB,MAnDKlxB,KAsDnBqX,UAAY,WACV,OAAOjY,EAAK+xB,QAvDKnxB,KA0DnB6xB,OAAS,WACP,OAAOzyB,EAAKuY,KA3DK3X,KA8DnB8xB,OAAS,WACP,OAAO1yB,EAAKsY,KA/DK1X,KAkEnB+xB,WAAa,WACX,OAAO3yB,EAAKgyB,SAnEKpxB,KAsEnBmG,SAAW,WACT,OAAO/G,EAAK0N,OAvEK9M,KA0EnBgyB,cAAgB,WACd,OAAO5yB,EAAK+G,WAAWmD,YA3ENtJ,KA8EnBiyB,eAAiB,WACf,OAAO7yB,EAAK+G,WAAWoD,aA/ENvJ,KAkFnBsK,kBAAoB,WAClB,OAAOlL,EAAK+G,WAAWmE,qBAnFNtK,KAsFnBkyB,kBAAoB,SAAAttB,GAClB,OAAOxF,EAAK+yB,WAAW/yB,EAAK6xB,MAAMrsB,KAvFjB5E,KA0FnBoyB,8BAAgC,SAAAxtB,GAC9B,OAAOxF,EAAK+yB,WAAW/yB,EAAK0D,aAAa8B,KA3FxB5E,KA8FnBgF,iBAAmB,SAACJ,EAAW9B,GAC7B,OAAIA,EACK1D,EAAKgzB,8BAA8BxtB,GAEnCxF,EAAK8yB,kBAAkBttB,IAlGf5E,KAsGnBmyB,WAAa,SAAAE,GAEX,IADA,IAAIttB,EAAO,GACF2E,EAAI,EAAGA,EAAI2oB,EAAMrpB,OAAQU,IAChC3E,EAAK4E,KAAK,CAACa,EAAGd,EAAGe,EAAG4nB,EAAM3oB,KAE5B,OAAO3E,GA3GU/E,KA8GnBsyB,iBAAmB,SAAAC,GAEjB,IADA,IAAIC,EAAanxB,OAAOikB,KAAKiN,GACpBva,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IACrCua,EAAIC,EAAWxa,IACXya,MAAMnK,MAAM,KAAMmK,MAAMjqB,GAAamE,kBAAkB8S,KAAK,IAlHjDzf,KAsHnBqxB,SAAW,WACTjyB,EAAKkzB,iBAAiBlzB,EAAK6xB,OAE3B,IADA,IAAIuB,EAAanxB,OAAOikB,KAAKlmB,EAAK6xB,OACzBvnB,EAAI,EAAGA,EAAItK,EAAK4yB,gBAAiBtoB,IACxC,IAAK,IAAIsR,EAAI,EAAGA,EAAI5b,EAAK6yB,iBAAkBjX,IACzC,GAA2C,IAAvC5b,EAAK0N,MAAMjB,kBAAkBnC,EAAGsR,GAClC,IAAK,IAAIhD,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IAAK,CAC1C,IAAIpT,EAAY4tB,EAAWxa,GACvBpU,EAAQxE,EAAK0N,MAAMhC,SAASpB,EAAGsR,EAAGpW,GACtCxF,EAAK6xB,MAAMrsB,GAAWhB,IAAU,IA/HvB5D,KAsInBsxB,qBAAuB,WACrBlyB,EAAKkzB,iBAAiBlzB,EAAK0D,cAE3B,IADA,IAAI0vB,EAAanxB,OAAOikB,KAAKlmB,EAAK0D,cACzBkV,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IAAK,CAC1C,IAAIpT,EAAY4tB,EAAWxa,GAC3B5Y,EAAK0D,aAAa8B,GAAW,GAAKxF,EAAKuyB,SAAS,GAAG/sB,GAErD,IAAK,IAAI8E,EAAI,EAAGA,EAAIlB,GAAamE,gBAAiBjD,IAChD,IAAK,IAAIsO,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IAAK,CAC1C,IAAIpT,EAAY4tB,EAAWxa,GACvB0a,EAAYtzB,EAAK2Y,qBAAqBrO,EAAI,GAAG9E,GAC7C+tB,EAAcvzB,EAAKuyB,SAASjoB,GAAG9E,GACnCxF,EAAK0D,aAAa8B,GAAW8E,GAAKgpB,EAAYC,IAlJjC3yB,KAuJnBuxB,QAAU,WAER,IADA,IAAIiB,EAAanxB,OAAOikB,KAAKlmB,EAAK8xB,MACzBxnB,EAAI,EAAGA,EAAIlB,GAAamE,gBAAiBjD,IAChD,IAAK,IAAIsO,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IAAK,CAC1C,IAAIpT,EAAY4tB,EAAWxa,GAC3B5Y,EAAK8xB,KAAKtsB,IAAcxF,EAAKuyB,SAASjoB,GAAG9E,GAAa8E,EAG1D,IAAK,IAAIsO,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IAAK,CAC1C,IAAIpT,EAAY4tB,EAAWxa,GAC3B5Y,EAAK8xB,KAAKtsB,IAAcxF,EAAKkL,sBAjKdtK,KAqKnBwxB,UAAY,WAEV,IADA,IAAIgB,EAAanxB,OAAOikB,KAAKlmB,EAAK+xB,QACzBznB,EAAI,EAAGA,EAAIlB,GAAamE,gBAAiBjD,IAChD,IAAK,IAAIsO,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IAAK,CAC1C,IAAIpT,EAAY4tB,EAAWxa,GAC3B5Y,EAAK+xB,OAAOvsB,IACRxF,EAAKuyB,SAASjoB,GAAG9E,GAAasH,KAAK6N,IAAIrQ,EAAItK,EAAK8xB,KAAKtsB,GAAY,GAGzE,IAAK,IAAIoT,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IAAK,CAC1C,IAAIpT,EAAY4tB,EAAWxa,GAC3B5Y,EAAK+xB,OAAOvsB,GACRsH,KAAK0mB,KAAKxzB,EAAK+xB,OAAOvsB,GAAaxF,EAAKkL,uBAjL7BtK,KAqLnByxB,UAAY,WAGV,IAFA,IAAIe,EAAanxB,OAAOikB,KAAKlmB,EAAKsY,KAC9Bmb,EAAW,GACN7a,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IACrC6a,EAASL,EAAWxa,KAAM,EAE5B,IAAK,IAAItO,EAAI,EAAGA,EAAIlB,GAAamE,gBAAiBjD,IAChD,IAAK,IAAIsO,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IAAK,CAC1C,IAAIpT,EAAY4tB,EAAWxa,GACS,IAAhC5Y,EAAKuyB,SAASjoB,GAAG9E,KACdiuB,EAASjuB,KACZxF,EAAKsY,IAAI9S,GAAa8E,EACtBmpB,EAASjuB,IAAa,GAExBxF,EAAKuY,IAAI/S,GAAa8E,KAnMX1J,KAyMnB0xB,WAAa,WACXtyB,EAAKgyB,QAAU,CACb9sB,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,WAAY,GAId,IADA,IAAI+tB,EAAanxB,OAAOikB,KAAKlmB,EAAKgyB,SACzB1nB,EAAI,EAAGA,EAAIlB,GAAamE,gBAAiBjD,IAChD,IAAK,IAAIsO,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IAAK,CAC1C,IAAIpT,EAAY4tB,EAAWxa,GACvByN,EAAIrmB,EAAKwyB,eAAeloB,GAAG9E,GACrB,IAAN6gB,GAAWA,GAAK,IAClBrmB,EAAKgyB,QAAQxsB,IAAc6gB,EAAIvZ,KAAK+V,KAAKwD,IAI/C,IAAK,IAAIzN,EAAI,EAAGA,EAAIwa,EAAWxpB,OAAQgP,IAAK,CAC1C,IAAIpT,EAAY4tB,EAAWxa,GAC3B5Y,EAAKgyB,QAAQxsB,IAAcxF,EAAKgyB,QAAQxsB,KA5N1C5E,KAAK+M,SAASD,ICwFHgmB,cApIb,SAAAA,EAAYhR,EAAcyE,GAAmB,IAAAnnB,EAAAY,KAAAqB,OAAAqH,EAAA,EAAArH,CAAArB,KAAA8yB,GAAA9yB,KAO7C8P,IAAM,SAAChD,GACL1N,EAAKsc,OAAO/R,KAAKmD,GACjB1N,EAAK4Z,WAAWrP,KAAK,IAAIqnB,GAAUlkB,IACnC1N,EAAKyzB,SAAWzzB,EAAKqR,iBAAmB,EACxCrR,EAAKsgB,oBACLtgB,EAAKmnB,uBAAkB5lB,GACvBvB,EAAK0iB,gBAbsC9hB,KAgB7C8sB,OAAS,SAAC3hB,GACLA,GAAS,IACV/L,EAAKsc,OAAOxH,OAAO/I,EAAO,GAC1B/L,EAAK4Z,WAAW9E,OAAO/I,EAAO,IAG7B/L,EAAKyzB,UAAYzzB,EAAKsc,OAAO1S,QAAU5J,EAAKyzB,SAAW1nB,EACxD/L,EAAKyzB,WACG1nB,GAAS/L,EAAKyzB,WAAa1nB,EAAQ/L,EAAKyzB,UAAY1nB,EAAQ/L,EAAKyzB,WACzEzzB,EAAKyzB,WAGPzzB,EAAKsgB,oBACLtgB,EAAKmnB,uBAAkB5lB,GACvBvB,EAAK0iB,gBA9BsC9hB,KAiC7CyQ,eAAiB,WACf,OAAOrR,EAAKsc,OAAO1S,QAlCwBhJ,KAqC7CkZ,eAAiB,WACf,OAAO9Z,EAAKsc,OAAO7Z,IAAI,SAAAiL,GAAU,OAAOA,EAAMnE,cAtCH3I,KAyC7CkwB,UAAY,SAAA6C,GACV3zB,EAAK2zB,OAASA,GA1C6B/yB,KA6C7C0Q,UAAY,WACV,OAAOtR,EAAK2zB,QA9C+B/yB,KAiD7C4sB,oBAAsB,SAAAzhB,GACpB/L,EAAKyzB,SAAW1nB,EAChB/L,EAAKsgB,oBACLtgB,EAAKmnB,uBAAkB5lB,GACvBvB,EAAK0iB,gBArDsC9hB,KAwD7C+M,SAAW,SAAC5B,EAAO2B,GACjB1N,EAAKsc,OAAOvQ,GAAS2B,EACrB1N,EAAKsgB,oBACLtgB,EAAKmnB,uBAAkB5lB,GACvBvB,EAAK0iB,gBA5DsC9hB,KA+D7C0f,kBAAoB,WAClB,IAAIsT,EAAiB5zB,EAAK0R,mBACtBuO,EAAMjgB,EAAK2zB,OAAOpT,WAAW,WAEXhf,IAAnBqyB,GACD5zB,EAAK2zB,OAAOtqB,MAAQuqB,EAAe1pB,WACnClK,EAAK2zB,OAAOvtB,OAASwtB,EAAezpB,YACpC8V,EAAI4T,aAAaD,EAAe9oB,eAAgB,EAAG,IAEnDmV,EAAI6T,UAAU,EAAG,EAAG9zB,EAAK2zB,OAAOtqB,MAAOrJ,EAAK2zB,OAAOvtB,SAxEVxF,KA4E7C8Q,iBAAmB,WACjB,OAAO1R,EAAKsc,OAAOtc,EAAK+tB,0BA7EmBntB,KAgF7C8H,oBAAsB,WACpB,OAAO1I,EAAK4Z,WAAW5Z,EAAK+tB,0BAjFentB,KAoF7CmtB,sBAAwB,WACtB,OAAO/tB,EAAKyzB,UArF+B7yB,KAwG7C4S,mBAAqB,WACnB,OAA8B,IAAvBxT,EAAKsc,OAAO1S,QAzGwBhJ,KA4G7C6hB,qBAAuB,WACLziB,EAAK4Z,WAAW5Z,EAAK+tB,yBAC3BpgB,SAAS3N,EAAK0R,qBA9GmB9Q,KAiH7C+Y,cAAgB,SAAA5Y,GAEd,IADA,IAAIgzB,EAAS/zB,EAAK8Z,iBACTxP,EAAI,EAAGA,EAAIypB,EAAOnqB,OAAQU,IACjC,GAAIypB,EAAOzpB,KAAOvJ,EAChB,OAAOuJ,GApHX1J,KAAK0b,OAAS,GACd1b,KAAKgZ,WAAa,GAClBhZ,KAAK8hB,aAAeA,EACpB9hB,KAAKumB,kBAAoBA,kEAoFP6M,EAAOxuB,GAEzB,IADA,IAAIkI,EAAQ9M,KAAK8Q,mBACRpH,EAAI,EAAGA,EAAIoD,EAAMxD,WAAYI,IACpC,IAAK,IAAIsR,EAAI,EAAGA,EAAIlO,EAAMvD,YAAayR,IAAK,CAC1ClO,EAAM9C,mBACN,IAAIqpB,EAAavmB,EAAMhC,SAASpB,EAAGsR,EAAGpW,GACtCkI,EAAM7C,eACN,IAAIqpB,EAAaF,EAAM7gB,SAAS8gB,GAChCvmB,EAAM1B,SAAS1B,EAAGsR,EAAGpW,EAAW0uB,GAGpCtzB,KAAK6hB,uBACL7hB,KAAK0f,oBACL1f,KAAK8hB,sDAqBahV,GAClB,YAAcnM,IAAVmM,SAGyBnM,IAAzBmM,EAAM5C,qBAAV,sBCtDWqpB,eAzDb,SAAAA,EAAY3zB,GAAO,IAAAR,EAAA,OAAAiC,OAAAqH,EAAA,EAAArH,CAAArB,KAAAuzB,IACjBn0B,EAAAiC,OAAA2N,EAAA,EAAA3N,CAAArB,KAAAqB,OAAA4N,EAAA,EAAA5N,CAAAkyB,GAAArkB,KAAAlP,KAAMJ,KARRZ,MAAQ,CACN6I,gBAAYlH,EACZ4rB,mBAAe5rB,EACf6yB,kBAAc7yB,EACd8yB,eAAW9yB,GAGMvB,EAKnBs0B,iBAAmB,WACjBt0B,EAAKC,SAAS,CAACwI,WAAYzI,EAAKJ,MAAM6I,cANrBzI,EASnBu0B,oBAAsB,SAAAxlB,GACpB/O,EAAKC,SAAS,CAACktB,cAAepe,KAVb/O,EAanBw0B,oBAAsB,SAAC5xB,EAAKmM,GAC1B/O,EAAKC,SAAS,CAACm0B,aAAcxxB,EAAKyxB,UAAWtlB,KAZ7C/O,EAAKJ,MAAM6I,WAAa,IAAIirB,GAAgB1zB,EAAKs0B,iBAAkBt0B,EAAKu0B,qBAFvDv0B,wEAoBjB,OACEgB,EAAAC,EAAAC,cAACkW,EAAA,iBAAD,CAAkB7P,MAAO+O,IACvBtV,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAO+B,UAAWyxB,sBAClBzzB,EAAAC,EAAAC,cAACwzB,GAAA,EAAD,CACIC,aAAcC,KACdC,SAAUj0B,KAAKhB,MAAMw0B,aACrBU,YAAal0B,KAAKhB,MAAMy0B,YAE1BrzB,EAAAC,EAAAC,cAAA,OAAK8B,UAAW+xB,uBACd/zB,EAAAC,EAAAC,cAAC8zB,EAAD,CACI7xB,MAAO8xB,EAAS9xB,MAChB1C,aAAcG,KAAK2zB,uBAEzBvzB,EAAAC,EAAAC,cAAA,OAAK8B,UAAW+xB,4BACd/zB,EAAAC,EAAAC,cAACg0B,GAAD,CACIzsB,WAAY7H,KAAKhB,MAAM6I,WACvBooB,cAAejwB,KAAK4zB,uBAG1BxzB,EAAAC,EAAAC,cAAA,OAAK8B,UAAW+xB,uBACd/zB,EAAAC,EAAAC,cAACi0B,GAAD,CACI1sB,WAAY7H,KAAKhB,MAAM6I,cAE7BzH,EAAAC,EAAAC,cAAA,OAAK8B,UAAW+xB,yBACd/zB,EAAAC,EAAAC,cAACk0B,GAAD,CACI3sB,WAAY7H,KAAKhB,MAAM6I,WACvB0kB,cAAevsB,KAAKhB,MAAMutB,iBAEhCnsB,EAAAC,EAAAC,cAAA,OAAK8B,UAAW+xB,yBACd/zB,EAAAC,EAAAC,cAACm0B,GAAD,gBAzDMvyB,aCZlB6O,IAAS2jB,OAAOt0B,EAAAC,EAAAC,cAACq0B,GAAD,MAASC,SAASC,eAAe","file":"static/js/main.6c29b752.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuList from '@material-ui/core/MenuList';\n\nclass MainMenuItem extends Component {\n  state = {\n    anchorEl: null,\n    open: false\n  };\n\n  handleToggle = () => {\n    this.setState(state => ({ open: !state.open }));\n  };\n\n  handleClose = event => {\n    if (this.anchorEl.contains(event.target)) {\n      return;\n    }\n    this.setState({ open: false });\n    let optionId = event.target.id;\n    this.props.updateAction(optionId);\n  };\n\n  handleOutClose = () => {\n    this.setState({ open: false });\n  }\n\n  render() {\n    const { options, title } = this.props;\n    const { open } = this.state;\n\n    return (\n        <div>\n          <Button\n              buttonRef={node => {\n                this.anchorEl = node;\n              }}\n              aria-owns={open ? 'menu-list-grow' : undefined}\n              aria-haspopup=\"true\"\n              onClick={this.handleToggle}>\n            {title}\n          </Button>\n          <Popper open={open} anchorEl={this.anchorEl} transition disablePortal>\n            {({ TransitionProps, placement }) => (\n                <Grow\n                    {...TransitionProps}\n                    id=\"menu-list-grow\"\n                    style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}>\n                  <Paper>\n                    <ClickAwayListener onClickAway={this.handleOutClose}>\n                      <MenuList>\n                        {\n                          options.map(option => (\n                              <MenuItem\n                                  key={option.id}\n                                  id={option.id}\n                                  onClick={this.handleClose}>\n                                {option.name}\n                              </MenuItem>\n                          ))\n                        }\n                      </MenuList>\n                    </ClickAwayListener>\n                  </Paper>\n                </Grow>\n            )}\n          </Popper>\n        </div>\n    );\n  }\n}\n\nexport default MainMenuItem;\n","import React, { Component } from \"react\";\nimport './logo.css'\n\nclass Logo extends Component {\n  render() {\n    return(\n        <div className=\"title\">\n          <a href=\"https://github.com/CristianAbrante/ReactVision\">\n            <span className=\"first\">react</span>\n            <span className=\"second\">vision</span>\n          </a>\n        </div>\n    );\n  }\n}\n\nexport default Logo;","import React, { Component } from \"react\";\nimport MainMenuItem from \"./MainMenuItem\";\nimport Logo from \"../logo/Logo\"\nimport Paper from \"@material-ui/core/Paper\";\nimport Toolbar from '@material-ui/core/Toolbar'\n\nclass MainMenu extends Component {\n  render() {\n    const items = this.props.items;\n    return(\n        <Paper>\n          <Toolbar>\n            <Logo/>\n            {items.map(item => (\n                <MainMenuItem\n                    key={item.title}\n                    title={item.title}\n                    options={item.options}\n                    updateAction={this.props.updateAction}/>\n            ))}\n          </Toolbar>\n        </Paper>\n    )\n  }\n}\n\nexport default MainMenu;\n","import React, {Component} from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Switch from '@material-ui/core/Switch';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nclass HistogramInfo extends Component {\n  render() {\n    const {accumulative, red, green, blue, disableColors} = this.props.options;\n    return(\n        <FormControl>\n          <FormLabel>Histogram Options</FormLabel>\n          <Divider/>\n          <FormGroup row>\n            <FormControlLabel\n                control={\n                  <Switch\n                      checked={accumulative}\n                      value=\"accumulative\"\n                      onChange ={this.props.onHistogramOption}/>\n                }\n                label=\"accumulative\"/>\n            <FormControlLabel\n                control={\n                  <Switch\n                      checked={disableColors}\n                      value=\"brightness\"\n                      onChange ={this.props.onBrightnessOption}/>\n                }\n                label=\"brightness\"/>\n          </FormGroup>\n          <FormGroup row style={{margin: \"auto\"}}>\n            <FormControlLabel\n                control={\n                  <Checkbox\n                      checked={red}\n                      value=\"red\"\n                      onChange ={this.props.onColorOptions('red')}\n                      disabled={disableColors}/>\n                }\n                label=\"red\"/>\n            <FormControlLabel\n                control={\n                  <Checkbox\n                      checked={green}\n                      value=\"green\"\n                      onChange ={this.props.onColorOptions('green')}\n                      disabled={disableColors}/>\n                }\n                label=\"green\"/>\n            <FormControlLabel\n                control={\n                  <Checkbox\n                      checked={blue}\n                      value=\"blue\"\n                      onChange ={this.props.onColorOptions('blue')}\n                      disabled={disableColors}/>\n                }\n                label=\"blue\"/>\n          </FormGroup>\n        </FormControl>\n    )\n  }\n}\n\nexport default HistogramInfo;","import React, {Component} from 'react';\nimport {\n  AreaSeries,\n  FlexibleWidthXYPlot,\n  XAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n} from 'react-vis';\n\nconst colors = {\n  r: \"#d32f2f\",\n  g: \"#43a047\",\n  b: \"#1976d2\",\n  brightness: \"#bdbdbd\"\n};\n\nclass HistogramGraph extends Component {\n\n  getSeries = component => {\n    let accumulative = this.props.accumulative;\n    let histogram = this.props.currentHistogram;\n    if (component === 'brightness') {\n      if (!this.props.brightness)\n        return null;\n\n      let data = histogram.getFormattedData(component, accumulative);\n      return this.getDataSeries(data, colors[component]);\n    } else {\n      if (this.props.brightness)\n        return null;\n      if (this.props[component]) {\n        let data = histogram.getFormattedData(component, accumulative);\n        return this.getDataSeries(data, colors[component]);\n      } else {\n        return null;\n      }\n    }\n  };\n\n  getDataSeries = (data, color) => {\n    return(\n        <AreaSeries\n            curve=\"curve-natural\"\n            color={color}\n            opacity=\"0.2\"\n            data={data} />\n    );\n  };\n\n  render() {\n    return (\n        <div>\n          <FlexibleWidthXYPlot\n              onMouseLeave={this._onMouseLeave}\n              height={180}\n              margin={{left: 10, right: 10, top: 10, bottom: 40}}\n              stackBy=\"y\">\n            <VerticalGridLines />\n            <HorizontalGridLines />\n            <XAxis hideLine tickValues={[0, 50, 100, 150, 200, 250]}/>\n            {this.getSeries('r')}\n            {this.getSeries('g')}\n            {this.getSeries('b')}\n            {this.getSeries('brightness')}\n          </FlexibleWidthXYPlot>\n        </div>\n    );\n  }\n}\n\nexport default HistogramGraph;","import React, {Component} from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: theme.spacing.unit / 4,\n  },\n});\n\nclass ImageInfo extends Component {\n  getImageProperty = property => {\n    let histogram = this.props.histogram;\n    if (histogram === undefined) {\n      return \"-\";\n    } else {\n      return histogram.getImage()[property]();\n    }\n  };\n\n  getHistogramProperty = property => {\n    let histogram = this.props.histogram;\n    if (histogram === undefined) {\n      return \"-\";\n    } else {\n      // TODO: Implementing for different components.\n      let value = histogram[property]().brightness;\n      return value % 1 === 0 ? value : value.toFixed(3);\n    }\n  };\n\n  render () {\n    const {classes} = this.props;\n    return (\n        <div>\n          <div className={classes.root}>\n            <Chip\n                label={\"format: \" + this.getImageProperty(\"getFormat\")}\n                color=\"secondary\"\n                className={classes.chip}/>\n            <Chip\n                label={\"count: \" + this.getImageProperty(\"getNumberOfPixels\")}\n                color=\"secondary\"\n                className={classes.chip}/>\n            <Chip\n                label={\"width: \" + this.getImageProperty(\"getWidth\")}\n                color=\"secondary\"\n                className={classes.chip}/>\n            <Chip\n                label={\"height: \" + this.getImageProperty(\"getHeight\")}\n                color=\"secondary\"\n                className={classes.chip}/>\n          </div>\n          <div className={classes.root}>\n            <Chip\n                label={\"brightness: \" + this.getHistogramProperty(\"getMean\")}\n                color=\"primary\"\n                className={classes.chip}/>\n            <Chip\n                label={\"contrast: \" + this.getHistogramProperty(\"getStdVar\")}\n                color=\"primary\"\n                className={classes.chip}/>\n            <Chip\n                label={\"entropy: \" + this.getHistogramProperty(\"getEntropy\")}\n                color=\"primary\"\n                className={classes.chip}/>\n          </div>\n          <div className={classes.root}>\n            <Chip\n                label={\"min: \" + this.getHistogramProperty(\"getMin\")}\n                color=\"secondary\"\n                className={classes.chip}/>\n            <Chip\n                label={\"max: \" + this.getHistogramProperty(\"getMax\")}\n                color=\"secondary\"\n                className={classes.chip}/>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(ImageInfo);","import {createMuiTheme} from '@material-ui/core/styles/index';\n\nconst theme = createMuiTheme(\n    {\n      palette: {\n        primary: {\n          light: \"#ffffff\",\n          main: \"#eceff1\",\n          dark: \"#babdbe\",\n          contrastText: \"#000000\",\n        },\n        secondary: {\n          light: \"#f05545\",\n          main: \"#b71c1c\",\n          dark: \"#7f0000\",\n          contrastText: \"#ffffff\",\n        }\n      },\n      typography: {\n        useNextVariants: true,\n      }\n    }\n);\n\nexport default theme;","import React, {Component} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport HistogramInfo from './histogram/HistogramInfo';\nimport Histogram from './histogram/Histogram';\nimport ImageInfo from './histogram/ImageInfo';\nimport theme from '../../theme/';\n\nconst containerStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  height: \"100%\",\n  alignContent: \"stretch\"\n};\n\nclass Info extends Component {\n  state = {\n    accumulative: false,\n    red: true,\n    green: true,\n    blue: true,\n    disableColors: false\n  };\n\n  renderHistogram = () => {\n    let histogram = this.props.controller.getCurrentHistogram();\n    if (histogram === undefined) {\n      return (\n          <div\n              style={{height: \"180px\", background: theme.palette.primary.main, margin: \"10px 10px 30px\"}}>\n\n          </div>\n      )\n    } else {\n      return (\n          <div style={{padding: \"20px\"}}>\n            <Histogram\n                accumulative = {this.state.accumulative}\n                brightness = {this.state.disableColors}\n                r = {this.state.red}\n                g = {this.state.green}\n                b = {this.state.blue}\n                currentHistogram={histogram} />\n          </div>);\n    }\n  };\n\n  handleBrightnessVisualization = () => {\n    this.setState({disableColors: !this.state.disableColors});\n  };\n\n  handleHistogramVisualization = () => {\n    this.setState({accumulative: !this.state.accumulative});\n  };\n\n  handleColorsVisualization = component => event => {\n    this.setState({[component]: event.target.checked});\n  };\n\n  render() {\n    let histogram = this.props.controller.getCurrentHistogram();\n    return(\n        <Paper\n          style={{height: \"100%\"}}>\n          <HistogramInfo\n              options={this.state}\n              onHistogramOption={this.handleHistogramVisualization}\n              onColorOptions={this.handleColorsVisualization}\n              onBrightnessOption={this.handleBrightnessVisualization}/>\n          {this.renderHistogram()}\n          <ImageInfo\n              histogram={histogram}/>\n        </Paper>\n    )\n  }\n}\n\nexport default Info;","/**\n * Process image class represents\n * an image fully editable. It contains\n * the pixel values for each position\n * of the image.\n *\n * Uses R,G,B,A representation\n * of each pixel.\n */\nclass ProcessImage {\n  static MIN_PIXEL_VALUE = 0;\n  static MAX_PIXEL_VALUE = 256;\n  static colorComponent = {\n    r: 0,\n    g: 1,\n    b: 2,\n    a: 3,\n  };\n\n  title;\n  format;\n  width;\n  height;\n\n  dataHistory;\n  dataHistoryIndex;\n\n  /**\n   * Constructor of the class\n   * takes the title, data and\n   * width and height of the\n   * image.\n   *\n   * @param title of the image containing format.\n   * @param data of the pixels.\n   * @param width of the image.\n   * @param height of the image.\n   */\n  constructor(title, width, height, data) {\n    this.title = title.replace(/\\..+/i, \"\");\n    this.format = title.split('.').pop();\n    this.dataHistory = [];\n    this.dataHistorySizes = [];\n    this.dataHistoryIndex = 0;\n    if (data === undefined) {\n      this.createNewBlankState();\n    } else {\n      this.setNewState(data, width, height);\n    }\n  }\n\n  getTitle = () => {\n    return this.title;\n  };\n\n  getFormat = () => {\n    return this.format;\n  };\n\n  getNumberOfStates = () => {\n    return this.dataHistory.length;\n  };\n\n  isAnyState = () => {\n    return this.getNumberOfStates() !== 0;\n  };\n\n  createNewState = () => {\n    if (this.isAnyState()) {\n      let data = this.getCurrentStateData().slice();\n      this.setNewState(data, this.getWidth(), this.getHeight());\n    }\n  };\n\n  createNewBlankState = (width, height) => {\n    let data = [];\n    let arrayLength = width * height * 4;\n    for (let i = 0; i < arrayLength; i++) {\n      data.push(0);\n    }\n    this.setNewState(data, width, height);\n  };\n\n  setNewState = (data, width, height) => {\n    let newState = {\n      width: width,\n      height: height,\n      data: data,\n    };\n    while (this.isAnyState() && this.dataHistoryIndex !== this.getNumberOfStates() - 1) {\n      this.dataHistory.pop();\n    }\n    this.dataHistory.push(newState);\n  };\n\n  setInitialState = () => {\n    this.dataHistoryIndex = 0;\n  };\n\n  setPreviousState = () => {\n    if (this.dataHistoryIndex !== 0) {\n      this.dataHistoryIndex -= 1;\n    }\n  };\n\n  setNextState = () => {\n    if (this.dataHistoryIndex !== this.getNumberOfStates() - 1) {\n      this.dataHistoryIndex += 1;\n    }\n  };\n\n  getImageData = () => {\n    return new ImageData(\n        new Uint8ClampedArray(this.getCurrentStateData()),\n        this.getWidth(),\n        this.getHeight()\n    );\n  };\n\n  getCurrentState = () => {\n    return this.dataHistory[this.dataHistoryIndex];\n  };\n\n  getCurrentStateData = () => {\n    return this.getCurrentState().data;\n  };\n\n  getWidth = () => {\n    return this.getCurrentState().width;\n  };\n\n  getHeight = () => {\n    return this.getCurrentState().height;\n  };\n\n  getNumberOfPixels = () => {\n    return this.getWidth() * this.getHeight();\n  };\n\n  /**\n   * Return true if a pair of indexes\n   * are in the range of the image.\n   *\n   * @param x horizontal index.\n   * @param y vertical index.\n   * @returns {boolean} true if indexes\n   *          are in range and false otherwise.\n   */\n  indexesAreInRange = (x, y) => {\n    return (x >= 0 && x < this.getWidth())\n        && (y >= 0 && y < this.getHeight());\n  };\n\n  /**\n   * Return true if color value\n   * is in the range [Min, Max]-\n   *\n   * In most cases this range\n   * corresponds to [0, 255].\n   *\n   * @param color\n   * @returns {boolean}\n   */\n  static colorIsInRange = (color) => {\n    return (color >= ProcessImage.MIN_PIXEL_VALUE)\n        && (color < ProcessImage.MAX_PIXEL_VALUE);\n  };\n\n  /**\n   * Returns the color index in\n   * the data array.\n   *\n   * @param x column of the pixel\n   * @param y row of the pixel.\n   * @returns {*} start index of the pixel.\n   */\n  getColorIndex = (x, y) => {\n    if (this.indexesAreInRange(x, y)) {\n      return y * (this.getWidth() * 4) + x * 4;\n    } else {\n      return undefined;\n    }\n  };\n\n  /**\n   * Return the component situated\n   * at a specified position of the\n   * array.\n   *\n   * @param position\n   * @returns {*}\n   */\n  getComponent = position => {\n    return this.getCurrentStateData()[position];\n  };\n\n  /**\n   * Sets the data situated at\n   * a specified position.\n   *\n   * @param position to set the color.\n   * @param color that we want to set.\n   */\n  setComponent = (position, color) => {\n    this.getCurrentStateData()[position] = color;\n  };\n\n  /**\n   * Returns the color corresponding\n   * to the component.\n   *\n   * @param x column of the color\n   * @param y row of the column.\n   * @param component r,g,b,a string.\n   * @returns {*} color component.\n   */\n  getColor = (x, y, component) => {\n    if (component === 'brightness')\n      return this.getBrightness(x, y);\n\n    const numericComponent = ProcessImage.colorComponent[component];\n    if (numericComponent === undefined)\n      throw new Error('unknown component: ' + component);\n\n    const index = this.getColorIndex(x, y);\n    if (index === undefined)\n      throw new Error('(' + x + ', ' + y + ') are not in range.');\n\n    return this.getComponent(index + numericComponent);\n  };\n\n  /**\n   * Set the color of the component.\n   *\n   * @param x\n   * @param y\n   * @param component\n   * @param color\n   */\n  setColor = (x, y, component, color) => {\n    if (component === 'brightness') {\n      this.setBrightness(x, y, color);\n      return;\n    }\n\n    if (!ProcessImage.colorIsInRange(color))\n      throw new Error('color is not in range: ' + color);\n\n    const numericComponent = ProcessImage.colorComponent[component];\n    if (numericComponent === undefined)\n      throw new Error('unknown component: ' + component);\n\n    const index = this.getColorIndex(x, y);\n    if (index === undefined)\n      throw new Error('(' + x + ', ' + y + ') are not in range.');\n\n    this.setComponent(index + numericComponent, color);\n  };\n\n  getRedComponent = (x, y) => {\n    return this.getColor(x, y, 'r');\n  };\n\n  setRedComponent = (x, y, red) => {\n    this.setColor(x, y, 'r', red);\n  };\n\n  getGreenComponent = (x, y) => {\n    return this.getColor(x, y, 'g');\n  };\n\n  setGreenComponent = (x, y, green) => {\n    this.setColor(x, y, 'g', green);\n  };\n\n  getBlueComponent = (x, y) => {\n    return this.getColor(x, y, 'b');\n  };\n\n  setBlueComponent = (x, y, blue) => {\n    this.setColor(x, y, 'b', blue);\n  };\n\n  getAlphaComponent = (x, y) => {\n    return this.getColor(x, y, 'a');\n  };\n\n  setAlphaComponent = (x, y, alpha) => {\n    this.setColor(x, y, 'a', alpha);\n  };\n\n  /**\n   * Performs PAL conversion\n   * of the components to calculate\n   * brightness.\n   *\n   * @param x column of the pixel.\n   * @param y row of the pixel.\n   * @returns {number}\n   */\n  getBrightness = (x, y) => {\n    const rgb = this.getRGBComponents(x, y);\n    return Math.round(0.222 * rgb.r + 0.707 * rgb.g + 0.071 * rgb.b);\n  };\n\n  /**\n   * Converts the specified position\n   * into a greyscale brightness value.\n   *\n   * @param x column of the conversion.\n   * @param y row of the conversion.\n   * @param brightness\n   */\n  setBrightness = (x, y, brightness) => {\n    this.setRGBComponents(x, y, brightness, brightness, brightness);\n  };\n\n  /**\n   * getter for the 3 components of a pixel.\n   *\n   * @param x column of the pixel.\n   * @param y row of the pixel.\n   * @returns {{r: *, g: *, b: *}}\n   *          object with configuration.\n   */\n  getRGBComponents = (x, y) => {\n    return {\n      r: this.getRedComponent(x, y),\n      g: this.getGreenComponent(x, y),\n      b: this.getBlueComponent(x, y)\n    };\n  };\n\n  setRGBComponents = (x, y, red, green, blue) => {\n    this.setRedComponent(x, y, red);\n    this.setGreenComponent(x, y, green);\n    this.setBlueComponent(x, y, blue);\n  };\n\n  /**\n   * Getter for the four components of\n   * a pixel.\n   *\n   * @param x column of the pixel.\n   * @param y row of the pixel.\n   * @returns {{r: *, g: *, b: *, a: *}}\n   * object with configuration.\n   */\n  getRGBAComponents = (x, y) => {\n    const rgb = this.getRGBComponents(x, y);\n    return {\n      r: rgb.r,\n      g: rgb.g,\n      b: rgb.b,\n      a: this.getAlphaComponent(x, y)\n    };\n  };\n\n  setRGBAComponets = (x, y, red, green, blue, alpha) => {\n    this.setRGBComponents(x, y, red, green, blue);\n    this.setAlphaComponent(x, y, alpha);\n  };\n}\n\nexport default ProcessImage;\n","import ProcessImage from '../image/ProcessImage'\nimport pixels from 'get-pixels';\n\nclass ImageFileLoader {\n  fileName;\n  image;\n  imageData;\n\n  getReadFile = () => {\n    return this.image;\n  };\n\n  getImageData() {\n    return this.imageData;\n  }\n\n  setImage = data => {\n    let shape = data.shape;\n    // test if it is a GIF image.\n    let width = shape.length === 3 ? shape[0] : shape[1];\n    let height = shape.length === 3 ? shape[1] : shape[2];\n    this.image = new ProcessImage(this.fileName, width, height, data.data, );\n  };\n\n  load(inputNode, callback) {\n    if (!inputNode.files) {\n      throw new Error(\"browser do not support image loading\");\n    } else {\n      let file = inputNode.files[0];\n      this.fileName = file.name;\n      if (!ImageFileLoader.isAnImage(file))\n        throw new Error('should load a valid image file.');\n\n      let fileReader = new FileReader();\n      fileReader.onload = () => {\n        pixels(fileReader.result, (err, pixels) => {\n          if (err) {\n            throw new Error(err.message);\n          }\n          this.setImage(pixels);\n          callback();\n        });\n      };\n      fileReader.readAsDataURL(file);\n    }\n  }\n\n  static isAnImage(file) {\n    return file.type.includes('image');\n  }\n}\n\nexport default ImageFileLoader;","import React, {Component} from 'react';\nimport Snackbar from '@material-ui/core/es/Snackbar/Snackbar';\nimport Button from '@material-ui/core/es/Button/Button';\n\nclass ErrorHandler extends Component {\n  action = (\n      <Button\n          color=\"secondary\"\n          size=\"small\"\n          onClick={this.props.handler}>\n        close\n      </Button>\n  );\n\n  render() {\n    return(\n        <Snackbar\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n            open={this.props.open}\n            onClose={this.props.handler}\n            ContentProps={{\n              'aria-describedby': 'message-id',\n            }}\n            message={this.props.errorMsg}\n            action={this.action}\n        />\n    )\n  }\n}\n\nexport default ErrorHandler;","import React, {Component} from 'react';\nimport Button from '@material-ui/core/es/Button/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/es/Divider/Divider';\nimport Loader from '../../../processor/IO/ImageFileLoader'\nimport ErrorHandler from '../error/ErrorHandler'\n\nclass LoadImageAction extends Component {\n  state = {\n    error: false,\n    errorMsg: \"error\"\n  };\n\n  constructor(props) {\n    super(props);\n    this.inputElem = React.createRef();\n  }\n\n  componentDidMount() {\n      this.inputElem.current.click();\n  }\n\n  componentDidUpdate(){\n    this.inputElem.current.click();\n  }\n\n  handleError = (msg) => {\n    this.setState({error: true, errorMsg: msg})\n  };\n\n  closeError = (msg) => {\n    this.setState({error: false})\n  };\n\n  handleChange = e => {\n    let loader = new Loader();\n    let controller = this.props.controller;\n    try {\n      loader.load(this.inputElem.current, () => {\n        let image = loader.getReadFile();\n        controller.add(image);\n      });\n    }\n    catch (e) {\n      this.handleError(e.message);\n    }\n  };\n\n  openFileDialog = () => {\n    this.inputElem.current.click();\n  };\n\n  render() {\n    return (\n      <div>\n        <input\n            ref={this.inputElem}\n            type=\"file\"\n            style={{\"display\" : \"none\"}}\n            onChange={this.handleChange}/>\n        <ErrorHandler\n            open={this.state.error}\n            errorMsg={this.state.errorMsg}\n            handler={this.closeError}/>\n      </div>\n    );\n  }\n}\n\nexport default LoadImageAction;\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/es/Button/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/es/Divider/Divider';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport ErrorHandler from '../error/ErrorHandler';\nimport Extensions from \"../../../data/fileExtensions\";\nimport saveAs from 'file-saver';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n    width: 100,\n  },\n\n  button: {\n    margin: theme.spacing.unit\n  }\n});\n\nclass SaveImageAction extends Component {\n  state = {\n    format: '',\n    error: false,\n    errorMsg: \"error\",\n    labelWidth: 0,\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  handleError = (msg) => {\n    this.setState({error: true, errorMsg: msg})\n  };\n\n  handleFormChange= event => {\n   this.setState({ [event.target.name]: event.target.value });\n };\n\n  closeError = (msg) => {\n    this.setState({error: false})\n  };\n\n  componentDidMount() {\n      this.setState({\n        labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n      });\n    }\n\n  saveFile = () => {\n    try {\n      if(this.props.controller.numberOfImages() <= 0){\n        throw new Error('there isn\\'t any image to download.');\n      }\n\n      if(this.state.format === \"\"){\n          throw new Error('you have to select one image format.');\n      }\n\n\n      let controller = this.props.controller;\n      let format = this.state.format;\n\n      controller.getCanvas().toBlob(function(blob) {\n        saveAs(blob, controller.getSelectedImage().getTitle() + \".\" + format);\n      });\n    } catch (e) {\n      this.handleError(e.message);\n    }\n\n  }\n\n  render() {\n    const { classes } = this.props;\n    const extensions = Extensions.formats;\n\n    return (\n      <div>\n        <Typography variant=\"overline\" style={{padding: \"4px 0\"}}>\n          Save image\n        </Typography>\n        <Divider />\n        <div>\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel\n              ref={ref => {\n                this.InputLabelRef = ref;\n              }}\n              htmlFor=\"outlined-format-simple\"\n            >\n              Format\n            </InputLabel>\n            <Select\n              value={this.state.format}\n              onChange={this.handleFormChange}\n              input={\n                <OutlinedInput\n                  labelWidth={this.state.labelWidth}\n                  name=\"format\"\n                  id=\"outlined-format-simple\"\n                />\n              }\n            >\n            {\n              extensions.map((format) => <MenuItem key={format.extension} value={format.extension}>{format.name}</MenuItem>)\n            }\n            </Select>\n          </FormControl>\n          </div>\n          <div>\n          <Button\n            className={classes.button}\n            label=\"Save file\"\n            onClick={this.saveFile}>\n            Download\n          </Button>\n          </div>\n        <ErrorHandler\n            open={this.state.error}\n            errorMsg={this.state.errorMsg}\n            handler={this.closeError}/>\n      </div>\n    );\n  }\n}\n\nSaveImageAction.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SaveImageAction);\n","import ProcessImage from '../../image/ProcessImage';\n\nclass LookUpTable {\n  values;\n  constructor(operation) {\n    this.fillTable(operation);\n  }\n\n  fillTable = (operation) => {\n    this.values = [];\n    for (let i = 0; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\n      this.appendValue(operation.perform(i));\n    }\n  };\n\n  getValue = level => {\n    if (this.inputIsValid(level)) {\n      return this.values[level];\n    } else {\n      return undefined;\n    }\n  };\n\n  appendValue = value => {\n    if (this.inputIsValid(value)) {\n      this.values.push(value);\n    }\n  };\n\n  inputIsValid = (input) => {\n    return (input >= 0\n        && input < ProcessImage.MAX_PIXEL_VALUE);\n  };\n}\n\nexport default LookUpTable;","class BlackAndWhite {\n  perform = input => {\n    return input;\n  }\n}\n\nexport default BlackAndWhite;","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport LookUpTable from '../../../../../processor/operations/point/LookUpTable';\nimport BlackAndWhiteOperation from '../../../../../processor/operations/point/lineal/BlackAndWhite';\nclass BlackAndWhite extends Component {\n  operationHasBeenApplied;\n\n  applyOperation = () => {\n    let {controller} = this.props;\n    if (controller.isAnyImageSelected()) {\n      if (!this.operationHasBeenApplied) {\n        let image = controller.getSelectedImage();\n        image.createNewState();\n        image.setNextState();\n        this.operationHasBeenApplied = true;\n      }\n      let blackAndWhite = new BlackAndWhiteOperation();\n      let lut = new LookUpTable(blackAndWhite);\n      controller.applyPointOperation(lut, 'brightness');\n    }\n  };\n\n  render() {\n    return(\n      <div>\n        <Button\n            variant=\"fab\"\n            color=\"secondary\"\n            aria-label=\"Add\"\n            onClick={this.applyOperation}>\n          <AddIcon />\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default BlackAndWhite;","/**\n * This class simulates a\n * lineal function between two\n * points.\n */\nclass ClampedLinealFunction {\n  a;\n  b;\n\n  constructor(p1, p2) {\n    this.setEquationComponents(p1, p2);\n  }\n\n  get = x => {\n    if (x === undefined)\n      throw new Error(\"x is undefined.\");\n    return this.a * x + this.b;\n  };\n\n  setEquationComponents = (p1, p2) => {\n    if (p1 === undefined || p2 === undefined) {\n      throw new Error(\"points can not be undefined.\");\n    }\n    if (p1.x === p2.x) {\n      throw new Error(\"points x coordinate can not be equal.\");\n    }\n    this.a = (p2.y - p1.y) / (p2.x - p1.x);\n    this.b = p1.y - this.a * p1.x;\n  };\n}\n\nexport default ClampedLinealFunction;","import ProcessImage from '../../../image/ProcessImage';\nimport LinealFunction from './LinealFunction';\n\nconst FUNCTION_MIN = ProcessImage.MIN_PIXEL_VALUE;\nconst FUNCTION_MAX = ProcessImage.MAX_PIXEL_VALUE - 1;\n\nclass LinealPicewiseAdjustment {\n  points;\n  functions;\n\n  constructor() {\n    let p1 =\n        {x: FUNCTION_MIN,  y: FUNCTION_MIN};\n    let p2 =\n        {x: FUNCTION_MAX, y: FUNCTION_MAX};\n    this.points = [p1, p2];\n    this.setFunctions();\n  }\n\n  insert = point => {\n    if (!this.valueIsValid(point.x) || !this.valueIsValid(point.y))\n      throw new Error('point has not valid values: ' + point.x + \" \" + point.y);\n\n    if (point.x === FUNCTION_MAX) {\n      this.points.pop();\n      this.points.push(point);\n    } else {\n      let insertionIndex = this.getIntervalIndex(point.x);\n      if (this.points[insertionIndex - 1].x === point.x) {\n        this.points.splice(insertionIndex - 1, 1, point);\n      } else {\n        this.points.splice(insertionIndex, 0, point);\n      }\n    }\n    this.setFunctions();\n  };\n\n  perform = level => {\n    if (!this.valueIsValid(level)) {\n      throw new Error('level is not in range.');\n    }\n    let functionIndex = this.getIntervalIndex(level) - 1;\n    let value = this.functions[functionIndex].get(level);\n    return this.clampValue(value);\n  };\n\n  getIntervalIndex = value => {\n    for (let i = 1; i < this.points.length; i++) {\n      if (value < this.points[i].x)\n        return i;\n    }\n    return this.points.length - 1;\n  };\n\n  setFunctions = () => {\n    this.functions = [];\n    for (let i = 0; i < this.points.length - 1; i++) {\n      let firstPoint = this.points[i];\n      let secondPoint = this.points[i + 1];\n      this.functions.push(new LinealFunction(firstPoint, secondPoint));\n    }\n  };\n\n  valueIsValid = value => {\n    return (value >= FUNCTION_MIN\n         && value <= FUNCTION_MAX);\n  };\n\n  clampValue = value => {\n    if (value < FUNCTION_MIN) {\n      return FUNCTION_MIN;\n    }\n    if (value > FUNCTION_MAX) {\n      return FUNCTION_MAX;\n    }\n    return Math.round(value);\n  }\n}\n\nexport default LinealPicewiseAdjustment;","import React, {Component} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport Divider from '@material-ui/core/Divider';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport Theme from '../../../../theme';\nimport ProcessImage from '../../../../../processor/image/ProcessImage';\n\nimport {\n  LineSeries,\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n} from 'react-vis';\n\nimport LinealPicewiseAdjustmentOperation from '../../../../../processor/operations/point/lineal/LinealPicewiseAdjustment';\nimport LookUpTable from '../../../../../processor/operations/point/LookUpTable';\n\nconst MAX_POINTS = 12;\n\nclass LinealPicewiseAdjustment extends Component {\n  operationHasBeenApplied = false;\n  state = {\n    x: 0.0,\n    y: 0.0,\n    linealPicewiseOperation: null,\n    maxPointsReached: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.state.linealPicewiseOperation =\n        new LinealPicewiseAdjustmentOperation();\n    this.applyOperation();\n  }\n\n  applyOperation = () => {\n    let {controller} = this.props;\n    if (controller.isAnyImageSelected()) {\n      if (!this.operationHasBeenApplied) {\n        let image = controller.getSelectedImage();\n        image.createNewState();\n        image.setNextState();\n        this.operationHasBeenApplied = true;\n      }\n      let lut = new LookUpTable(this.state.linealPicewiseOperation);\n      controller.applyPointOperation(lut, 'brightness');\n    }\n  };\n\n  onChipDelete = point => () => {\n    console.log(point.x + \" \" + point.y);\n  };\n\n  updateState = () => {\n    this.setState({linealPicewiseOperator: this.state.linealPicewiseOperation});\n  };\n\n  onInsertionValueChanged = component => event => {\n    let value = event.target.value;\n    if (value >= ProcessImage.MIN_PIXEL_VALUE\n        && value < ProcessImage.MAX_PIXEL_VALUE) {\n      this.setState({[component]: value});\n    }\n  };\n\n  addPoint = () => {\n    let {x, y, linealPicewiseOperation} = this.state;\n    x = Number.parseFloat(x);\n    y = Number.parseFloat(y);\n    if ((typeof x) !== 'string' && (typeof y) !== 'string') {\n      linealPicewiseOperation.insert({x: x, y: y});\n      if (linealPicewiseOperation.points.length === MAX_POINTS) {\n        this.setState({maxPointsReached: true});\n      }\n      this.updateState();\n      this.applyOperation();\n    }\n  };\n\n  render() {\n    let points = this.state.linealPicewiseOperation.points;\n    return (\n        <div>\n          <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n            <Icon style={{padding: \"5px\"}}>insert_chart_outlined</Icon>\n            <Typography\n                variant=\"overline\">\n              Linear piecewise adjustment\n            </Typography>\n          </div>\n          <Divider/>\n          <div style={{display:\"flex\", justifyContent: \"center\", width: \"100%\"}}>\n            <XYPlot width={200} height={200}>\n              <HorizontalGridLines />\n              <VerticalGridLines />\n              <XAxis />\n              <YAxis />\n              <LineSeries\n                  color={Theme.palette.secondary.main}\n                  data={points}\n              />\n            </XYPlot>\n          </div>\n          <div>\n            {points.map((point) => {\n              return (<Chip\n                        key={\"x: \" + point.x + \" y: \" + point.y}\n                        style={{margin: \"5px\"}}\n                        label={\"x: \" + point.x + \" y: \" + point.y}\n                        color=\"secondary\"\n                        variant=\"outlined\"\n                      />);\n            })}\n          </div>\n          <div>\n            <TextField\n                style={{margin: \"15px\"}}\n                label=\"X\"\n                value={this.state.x}\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                margin=\"normal\"\n                onChange={this.onInsertionValueChanged('x')}\n            />\n            <TextField\n                style={{margin: \"15px\"}}\n                label=\"Y\"\n                value={this.state.y}\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                margin=\"normal\"\n                onChange={this.onInsertionValueChanged('y')}\n            />\n          </div>\n          <div>\n            <Button\n                mini\n                variant=\"fab\"\n                color=\"secondary\"\n                aria-label=\"Add\"\n                onClick={this.addPoint}\n                disabled={this.state.maxPointsReached}>\n              <AddIcon />\n            </Button>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default LinealPicewiseAdjustment;","import ProcessImage from '../../../image/ProcessImage';\n\nclass BrightnessAndContrast {\n  newMean;\n  newStdVar;\n  oldMean;\n  oldStdVar;\n\n  constructor(oldMean, oldStdVar, newMean, newStdVar) {\n    this.setOldMean(oldMean);\n    this.setNewMean(newMean);\n    this.setOldStdVar(newMean);\n    this.setNewStdVar(newStdVar);\n  }\n\n  setOldMean = oldMean => {\n    if (this.valueIsValid(oldMean))\n      this.oldMean = oldMean;\n  };\n\n  setOldStdVar = oldStdVar => {\n    if (this.valueIsValid(oldStdVar))\n      this.oldStdVar = oldStdVar;\n  };\n\n  setNewMean = newMean => {\n    if (this.valueIsValid(newMean)) {\n      this.newMean = newMean;\n    }\n  };\n\n  setNewStdVar = newStdVar => {\n    if (this.valueIsValid(newStdVar))\n      this.newStdVar = newStdVar;\n  };\n\n  perform = level => {\n    if (level !== undefined) {\n      let value = Math.round((this.newStdVar / this.oldStdVar) * (level - this.oldMean) + this.newMean);\n      return this.clampValue(value);\n    } else  {\n      return undefined;\n    }\n  };\n\n  valueIsValid = value => {\n    return (value >= ProcessImage.MIN_PIXEL_VALUE\n         && value < ProcessImage.MAX_PIXEL_VALUE);\n  };\n\n  clampValue = value => {\n    if (value < ProcessImage.MIN_PIXEL_VALUE) {\n      return ProcessImage.MIN_PIXEL_VALUE;\n    }\n    if (value >= ProcessImage.MAX_PIXEL_VALUE) {\n      return ProcessImage.MAX_PIXEL_VALUE - 1;\n    }\n    return value;\n  }\n}\n\nexport default BrightnessAndContrast;","import React, {Component} from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport { withStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport Slider from '@material-ui/lab/Slider';\nimport TextField from '@material-ui/core/TextField';\nimport ProcessImage from '../../../../../processor/image/ProcessImage';\nimport Theme from '../../../../theme/'\nimport BrightnessAndContrastOperation from '../../../../../processor/operations/point/lineal/BrightnessAndContrast';\nimport LookUpTable from '../../../../../processor/operations/point/LookUpTable';\n\nconst styles = {\n  root: {\n    width: 420,\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    alignContent: \"space-between\",\n    margin: \"auto\"\n  },\n  slider: {\n    width: '200px',\n    margin: 'auto',\n    padding: '22px 0px',\n  },\n  thumb: {\n    background: Theme.palette.secondary.main\n  }\n};\n\nclass BrightnessAndContrast extends Component {\n  operationHasBeenApplied = false;\n  brightnessAndContrast;\n  state = {\n    brightnessValue: 0.0,\n    contrastValue: 0.0\n  };\n\n  constructor(props) {\n    super(props);\n    let controller = this.props.controller;\n    this.brightnessAndContrast =\n        new BrightnessAndContrastOperation(0.0, 0.0, 0.0, 0.0);\n    let histogram = controller.getCurrentHistogram();\n    if (histogram !== undefined) {\n      this.state.brightnessValue = histogram.getMean().brightness;\n      this.state.contrastValue = histogram.getStdVar().brightness;\n      this.brightnessAndContrast.setOldMean(this.state.brightnessValue);\n      this.brightnessAndContrast.setOldStdVar(this.state.contrastValue);\n    }\n  }\n\n  applyOperation = () => {\n    let {controller} = this.props;\n    if (controller.isAnyImageSelected()) {\n      if (!this.operationHasBeenApplied) {\n        let image = controller.getSelectedImage();\n        image.createNewState();\n        image.setNextState();\n        this.operationHasBeenApplied = true;\n      }\n      let {brightnessValue, contrastValue} = this.state;\n      this.brightnessAndContrast.setNewMean(brightnessValue);\n      this.brightnessAndContrast.setNewStdVar(contrastValue);\n      let lut = new LookUpTable(this.brightnessAndContrast);\n      controller.applyPointOperation(lut, 'brightness');\n    }\n  };\n\n  onBrightnessSliderChange = (event, value) => {\n    this.setState({brightnessValue: value});\n    this.applyOperation();\n  };\n\n  onBrightnessTextFieldChange = event => {\n    let value = event.target.value;\n    if (value < ProcessImage.MAX_PIXEL_VALUE\n        && value >= ProcessImage.MIN_PIXEL_VALUE) {\n      this.setState({brightnessValue: Number.parseFloat(event.target.value)});\n    }\n    this.applyOperation();\n  };\n\n  onContrastSliderChange = (event, value) => {\n    this.setState({contrastValue: value});\n    this.applyOperation();\n  };\n\n  onContrastTextFieldChange = event => {\n    let value = event.target.value;\n    if (value < ProcessImage.MAX_PIXEL_VALUE\n        && value >= ProcessImage.MIN_PIXEL_VALUE) {\n      this.setState({contrastValue: event.target.value});\n    }\n    this.applyOperation();\n  };\n\n  render() {\n    const { classes } = this.props;\n    let {brightnessValue, contrastValue} = this.state;\n    return(\n        <div>\n          <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n            <Icon style={{padding: \"5px\"}}>brightness_5</Icon>\n            <Typography\n              variant=\"overline\">\n              Brightness and contrast\n            </Typography>\n          </div>\n          <Divider/>\n          <div>\n            <div className={classes.root}>\n              <Typography\n                  id=\"label\"\n                  style={{padding: \"15px\"}}>\n                Brightness\n              </Typography>\n              <Slider\n                  classes={\n                    { container: classes.slider,\n                      track: classes.thumb,\n                      thumb: classes.thumb}\n                  }\n                  min = {ProcessImage.MIN_PIXEL_VALUE}\n                  max = {ProcessImage.MAX_PIXEL_VALUE - 1}\n                  value={brightnessValue}\n                  aria-labelledby=\"label\"\n                  onChange={this.onBrightnessSliderChange}\n              />\n              <TextField\n                  style={{margin: \"15px\"}}\n                  id=\"standard-number\"\n                  value={brightnessValue}\n                  type=\"number\"\n                  className={classes.textField}\n                  max={255}\n                  margin=\"normal\"\n                  onChange={this.onBrightnessTextFieldChange}\n                  color=\"secondary\"\n              />\n            </div>\n            <div className={classes.root}>\n              <Typography\n                  id=\"label\"\n                  style={{padding: \"15px\"}}>\n                Contrast\n              </Typography>\n              <Slider\n                  classes={\n                    { container: classes.slider,\n                      track: classes.thumb,\n                      thumb: classes.thumb}\n                  }\n                  min = {ProcessImage.MIN_PIXEL_VALUE}\n                  max = {ProcessImage.MAX_PIXEL_VALUE - 1}\n                  value={contrastValue}\n                  aria-labelledby=\"label\"\n                  onChange={this.onContrastSliderChange}\n              />\n              <TextField\n                  style={{margin: \"15px\"}}\n                  id=\"standard-number\"\n                  value={contrastValue}\n                  type=\"number\"\n                  className={classes.textField}\n                  max={255}\n                  margin=\"normal\"\n                  onChange={this.onContrastTextFieldChange}\n                  color=\"secondary\"\n              />\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(BrightnessAndContrast);","import ProcessImage from '../../../image/ProcessImage';\n\nconst FUNCTION_MIN = ProcessImage.MIN_PIXEL_VALUE;\nconst FUNCTION_MAX = ProcessImage.MAX_PIXEL_VALUE - 1;\n\nclass HistogramEqualization {\n  histogram;\n  k;\n\n  constructor(histogram) {\n    this.histogram = histogram;\n    this.k = this.histogram.getNumberOfPixels() / FUNCTION_MAX;\n  }\n\n  perform = level => {\n    return this.clampValue(Math.round(this.histogram.getAccumulativeCount(level).brightness / this.k) - 1);\n  };\n\n  valueIsValid = value => {\n    return (value >= FUNCTION_MIN\n        && value <= FUNCTION_MAX);\n  };\n\n  clampValue = value => {\n    if (value < FUNCTION_MIN) {\n      return FUNCTION_MIN;\n    }\n    if (value > FUNCTION_MAX) {\n      return FUNCTION_MAX;\n    }\n    return Math.round(value);\n  }\n}\n\nexport default HistogramEqualization;","import React, {Component} from 'react';\nimport Icon from '@material-ui/core/Icon';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\n\nimport HistogramEqualizationOperation\n  from '../../../../../processor/operations/point/non-lineal/HistogramEqualization';\nimport LookUpTable\n  from '../../../../../processor/operations/point/LookUpTable';\n\nclass HistogramEqualization extends Component {\n  operationHasBeenApplied;\n\n  applyOperation = () => {\n    let {controller} = this.props;\n    if (controller.isAnyImageSelected()\n        && !this.operationHasBeenApplied) {\n      let image = controller.getSelectedImage();\n      let histogram = controller.getCurrentHistogram();\n      image.createNewState();\n      image.setNextState();\n      let equalization =\n          new HistogramEqualizationOperation(histogram);\n      let lut = new LookUpTable(equalization);\n      controller.applyPointOperation(lut, 'brightness');\n      this.operationHasBeenApplied = true;\n    }\n  };\n\n  render() {\n    return (\n        <div>\n          <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n            <Icon style={{padding: \"5px\"}}>gradient</Icon>\n            <Typography\n                variant=\"overline\">\n              Histogram Equalization\n            </Typography>\n          </div>\n          <Divider/>\n          <Button\n              style={{margin: \"10px\"}}\n              variant=\"extendedFab\"\n              color=\"secondary\"\n              onClick={this.applyOperation}>\n            Apply Equalization\n          </Button>\n        </div>\n    )\n  }\n}\n\nexport default HistogramEqualization;\n\n","import ProcessImage from '../../../image/ProcessImage';\n\nconst FUNCTION_MIN = ProcessImage.MIN_PIXEL_VALUE;\nconst FUNCTION_MAX = ProcessImage.MAX_PIXEL_VALUE - 1;\n\nclass HistogramSpecification {\n  toTransformHistogram;\n  referenceHistogram;\n\n  constructor(toTransformHistogram, referenceHistogram) {\n    this.toTransformHistogram = toTransformHistogram;\n    this.referenceHistogram = referenceHistogram;\n  }\n\n  perform = level => {\n    if (!this.valueIsValid(level))\n      throw new Error('invalid level: ' + level);\n\n    let originalValue = this.toTransformHistogram.getAccumulativeProbability(level).brightness;\n    let outputLevel = 0;\n    while (outputLevel <= FUNCTION_MAX) {\n      let referenceValue =\n          this.referenceHistogram.getAccumulativeProbability(outputLevel).brightness;\n      if (referenceValue >= originalValue)\n        return outputLevel;\n      outputLevel += 1;\n    }\n  };\n\n  valueIsValid = value => {\n    return (value >= FUNCTION_MIN\n        && value <= FUNCTION_MAX);\n  };\n}\n\nexport default HistogramSpecification;","import React, {Component} from 'react';\nimport Icon from '@material-ui/core/Icon/Icon';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport Divider from '@material-ui/core/Divider/Divider';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Theme from '../../../../theme';\n\nimport HistogramSpecificationOperation\n  from '../../../../../processor/operations/point/non-lineal/HistogramSpecification';\nimport Button from '@material-ui/core/Button/Button';\nimport LookUpTable from '../../../../../processor/operations/point/LookUpTable';\n\nclass HistogramSpecification extends Component {\n  histogramSpecificationOperation;\n  operationHasBeenApplied = false;\n\n  state = {\n    referenceHistogramTitle: \"\",\n    referenceHistogram: undefined\n  };\n\n  applyOperation = () => {\n    console.log('clicked');\n    let {controller} = this.props;\n    let {referenceHistogram} = this.state;\n    if (controller.isAnyImageSelected()) {\n      if (referenceHistogram !== undefined) {\n        let image = controller.getSelectedImage();\n        if (!this.operationHasBeenApplied) {\n          image = controller.getSelectedImage();\n          image.createNewState();\n          image.setNextState();\n          this.operationHasBeenApplied = true;\n        }\n        let selectedHistogram = controller.getCurrentHistogram();\n        this.histogramSpecificationOperation =\n            new HistogramSpecificationOperation(selectedHistogram, referenceHistogram);\n        let lut = new LookUpTable(this.histogramSpecificationOperation);\n        controller.applyPointOperation(lut, 'brightness');\n      }\n    }\n  };\n\n  handleChange = event => {\n    let {controller} = this.props;\n    let imageName = event.target.value;\n    let histogramIndex = controller.getImageIndex(imageName);\n    let selectedHistogram =\n        controller.histograms[histogramIndex];\n    this.setState({\n      referenceHistogramTitle: imageName,\n      referenceHistogram: selectedHistogram\n    });\n  };\n\n  render() {\n    const {controller} = this.props;\n    const imageTitles = controller.getImageTitles();\n    return(\n        <div>\n          <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n            <Icon style={{padding: \"5px\"}}>gradient</Icon>\n            <Typography\n                variant=\"overline\">\n              Histogram Specification\n            </Typography>\n          </div>\n          <Divider/>\n          <div style={{display: \"flex\", flexDirection:\"column\", alignItems: \"center\"}}>\n            <FormControl style={{minWidth: 200, margin: Theme.spacing.unit}}>\n              <InputLabel htmlFor=\"age-simple\">Reference Image</InputLabel>\n              <Select\n                  value={this.state.referenceHistogramTitle}\n                  inputProps={{\n                    name: 'referenceHistogram',\n                    id: 'age-simple',\n                  }}\n                  onChange={this.handleChange}\n                  disabled={!controller.isAnyImageSelected()}\n              >\n                {imageTitles.map(title => {\n                  return <MenuItem\n                      key={title}\n                      value={title}>\n                    {title}\n                    </MenuItem>\n                })}\n              </Select>\n            </FormControl>\n            <Button\n                style={{margin: \"10px\"}}\n                variant=\"extendedFab\"\n                color=\"secondary\"\n                onClick={this.applyOperation}>\n              Apply Specification\n            </Button>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default HistogramSpecification;","import ProcessImage from '../../../image/ProcessImage';\n\nconst FUNCTION_MIN = ProcessImage.MIN_PIXEL_VALUE;\nconst FUNCTION_MAX = ProcessImage.MAX_PIXEL_VALUE - 1;\n\nclass GammaCorrection {\n  gamma;\n  static GAMMA_MIN = 0.0;\n  static GAMMA_MAX = 20.0;\n\n  constructor(gamma) {\n    this.setGamma(gamma);\n  }\n\n  setGamma = gamma => {\n    if (gamma > GammaCorrection.GAMMA_MIN\n        && gamma <= GammaCorrection.GAMMA_MAX) {\n      this.gamma = gamma;\n    }\n  };\n\n  perform = level => {\n    if (!this.valueIsValid(level)) {\n      throw new Error('level is not valid: ' + level);\n    }\n    let value = FUNCTION_MAX * Math.pow(level / FUNCTION_MAX, this.gamma);\n    return this.clampValue(value);\n  };\n\n  valueIsValid = value => {\n    return (value >= FUNCTION_MIN\n        && value <= FUNCTION_MAX);\n  };\n\n  clampValue = value => {\n    if (value < FUNCTION_MIN) {\n      return FUNCTION_MIN;\n    }\n    if (value > FUNCTION_MAX) {\n      return FUNCTION_MAX;\n    }\n    return Math.round(value);\n  }\n}\n\nexport default GammaCorrection;","import React, {Component} from 'react';\nimport Icon from '@material-ui/core/Icon/Icon';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport Divider from '@material-ui/core/Divider/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Slider from '@material-ui/lab/Slider/Slider';\nimport Theme from '../../../../theme';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField/TextField';\n\nimport GammaCorrectionOperation from '../../../../../processor/operations/point/non-lineal/GammaCorrection';\nimport LookUpTable from '../../../../../processor/operations/point/LookUpTable';\n\nimport {\n  HorizontalGridLines, LineSeries,\n  VerticalGridLines,\n  XAxis,\n  XYPlot, YAxis,\n} from 'react-vis/es';\nimport Button from '@material-ui/core/Button/Button';\n\nconst styles = {\n  root: {\n    width: 420,\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    alignContent: \"space-between\",\n    margin: \"auto\"\n  },\n  slider: {\n    width: '150px',\n    margin: 'auto',\n  },\n  thumb: {\n    background: Theme.palette.secondary.main\n  }\n};\n\nconst MIN_GAMMA = GammaCorrectionOperation.GAMMA_MIN + 1.0;\nconst MAX_GAMMA = GammaCorrectionOperation.GAMMA_MAX;\n\nclass GammaCorrection extends Component {\n  operationHasBeenApplied = false;\n\n  state = {\n    inverted: false,\n    gamma: MIN_GAMMA\n  };\n\n  applyOperation = () => {\n    let {controller} = this.props;\n    if (controller.isAnyImageSelected()) {\n      if (!this.operationHasBeenApplied) {\n        let image = controller.getSelectedImage();\n        image.createNewState();\n        image.setNextState();\n        this.operationHasBeenApplied = true;\n      }\n      console.log(this.getGammaValue());\n      let gamma = new GammaCorrectionOperation(this.getGammaValue());\n      let lut = new LookUpTable(gamma);\n      controller.applyPointOperation(lut, 'brightness');\n    }\n  };\n\n  getGammaData = () => {\n    const interval = 0.01;\n    const intervalMax = 1.0;\n\n    let data = [];\n    for (let i = 0.0; i < intervalMax; i += interval) {\n      data.push({x: i, y: Math.pow(i, this.getGammaValue())});\n    }\n    return data;\n  };\n\n  invertedChecked = event => {\n    this.setState({inverted: event.target.checked});\n  };\n\n  getGammaValue = () => {\n    if (this.state.inverted) {\n      return 1.0 / this.state.gamma;\n    } else {\n      return this.state.gamma;\n    }\n  };\n\n  onGammaChange = (event, value) => {\n    this.setState({gamma: value});\n  };\n\n  onGammaTextChange = event => {\n    let value = Number.parseFloat(event.target.value);\n    if (value >= MIN_GAMMA && value <= MAX_GAMMA) {\n      //console.log(\"event:\" + event.target.value + \" \" + value);\n      this.setState({gamma: value});\n      //console.log(\"after: \" + this.state.gamma);\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n    return (\n        <div>\n          <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n            <Icon style={{padding: \"5px\"}}>desktop_windows</Icon>\n            <Typography\n                variant=\"overline\">\n              Gamma correction\n            </Typography>\n          </div>\n          <Divider/>\n          <div style={{display:\"flex\", justifyContent: \"center\", width: \"100%\"}}>\n            <XYPlot width={200} height={200}>\n              <HorizontalGridLines />\n              <VerticalGridLines />\n              <XAxis />\n              <YAxis />\n              <LineSeries\n                  curve={'curveMonotoneX'}\n                  color={Theme.palette.secondary.main}\n                  data={this.getGammaData()}\n              />\n            </XYPlot>\n          </div>\n          <div className={classes.root}>\n            <FormControlLabel\n                control={\n                  <Switch\n                      checked={this.state.inverted}\n                      onChange={this.invertedChecked}\n                      value=\"checkedA\"\n                  />\n                }\n                label=\"inverse\"/>\n            <Slider\n                classes={\n                  { container: classes.slider,\n                    track: classes.thumb,\n                    thumb: classes.thumb}\n                }\n                min = {MIN_GAMMA}\n                max = {MAX_GAMMA}\n                value={this.state.gamma}\n                aria-labelledby=\"label\"\n                onChange={this.onGammaChange}\n            />\n            <TextField\n                style={{margin: \"15px\"}}\n                value={this.state.gamma}\n                type=\"number\"\n                margin=\"normal\"\n                onChange={this.onGammaTextChange}\n                color=\"secondary\"\n            />\n          </div>\n          <Button\n              style={{margin: \"10px\"}}\n              variant=\"extendedFab\"\n              color=\"secondary\"\n              onClick={this.applyOperation}>\n            Apply Gamma Correction\n          </Button>\n        </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(GammaCorrection);","import ProcessImage from '../../../image/ProcessImage';\n\nclass ImageDifference {\n  resultImage;\n\n  perform = (image1, image2) => {\n      if (!this.imagesHaveTheSameSize(image1, image2))\n        throw new Error('images do not have the same size');\n\n      let width = image1.getWidth();\n      let height = image1.getHeight();\n      this.resultImage =\n          new ProcessImage('difference.png',width, height);\n      for (let i = 0; i < width; i++) {\n        for (let j = 0; j < height; j++) {\n          let color1 = image1.getBrightness(i, j);\n          let color2 = image2.getBrightness(i, j);\n          let difference = Math.abs(color1 - color2);\n          this.resultImage.setBrightness(i, j, difference);\n          this.resultImage.setAlphaComponent(i, j, 255);\n        }\n      }\n  };\n\n  imagesHaveTheSameSize = (image1, image2) => {\n    return (image1.getWidth() === image2.getWidth()\n         && image1.getHeight() === image2.getHeight());\n  };\n}\n\nexport default ImageDifference;","import React, {Component} from 'react';\nimport Icon from '@material-ui/core/Icon/Icon';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport Divider from '@material-ui/core/Divider/Divider';\nimport FormControl from '@material-ui/core/FormControl/FormControl';\nimport Theme from '../../../../theme';\nimport InputLabel from '@material-ui/core/InputLabel/InputLabel';\nimport Select from '@material-ui/core/Select/Select';\nimport MenuItem from '@material-ui/core/MenuItem/MenuItem';\nimport Button from '@material-ui/core/Button/Button';\nimport ErrorHandler from '../../../error/ErrorHandler';\nimport ImageDifferenceOperation\n  from '../../../../../processor/operations/point/non-lineal/ImageDifference';\n\n\nclass ImageDifference extends Component {\n  state = {\n    imageTitle: \"\",\n    referenceImage: undefined,\n    error: false,\n    errorMsg: ''\n  };\n\n  applyOperation = () => {\n    let {controller} = this.props;\n    let {referenceImage} = this.state;\n    if (controller.isAnyImageSelected()) {\n      if (referenceImage !== undefined) {\n        let operation = new ImageDifferenceOperation();\n        let selectedImage = controller.getSelectedImage();\n        try {\n          operation.perform(selectedImage, referenceImage);\n          controller.add(operation.resultImage);\n        }\n        catch (e) {\n          this.setState({error: true, errorMsg: e.message});\n        }\n      }\n    }\n  };\n\n  closeError = () => {\n    this.setState({error: false});\n  };\n\n  handleChange = event => {\n    let {controller} = this.props;\n    let imageName = event.target.value;\n    let imageIndex = controller.getImageIndex(imageName);\n    let selectedImage =\n        controller.images[imageIndex];\n    this.setState({\n      imageTitle: imageName,\n      referenceImage: selectedImage\n    });\n  };\n\n  render() {\n    const {controller} = this.props;\n    const imageTitles = controller.getImageTitles();\n    return(\n        <div>\n          <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n            <Icon style={{padding: \"5px\"}}>photo library</Icon>\n            <Typography\n                variant=\"overline\">\n              Image Difference\n            </Typography>\n          </div>\n          <Divider/>\n          <div style={{display: \"flex\", flexDirection:\"column\", alignItems: \"center\"}}>\n            <FormControl style={{minWidth: 200, margin: Theme.spacing.unit}}>\n              <InputLabel htmlFor=\"age-simple\">Reference Image</InputLabel>\n              <Select\n                  value={this.state.imageTitle}\n                  inputProps={{\n                    name: 'referenceHistogram',\n                    id: 'age-simple',\n                  }}\n                  onChange={this.handleChange}\n                  disabled={!controller.isAnyImageSelected()}\n              >\n                {imageTitles.map(title => {\n                  return <MenuItem\n                      key={title}\n                      value={title}>\n                    {title}\n                  </MenuItem>\n                })}\n              </Select>\n            </FormControl>\n            <Button\n                style={{margin: \"10px\"}}\n                variant=\"extendedFab\"\n                color=\"secondary\"\n                onClick={this.applyOperation}>\n              Apply Difference\n            </Button>\n          </div>\n          <ErrorHandler\n              open={this.state.error}\n              errorMsg={this.state.errorMsg}\n              handler={this.closeError}/>\n        </div>\n    );\n  }\n}\n\nexport default ImageDifference;","import ImageDifference from './ImageDifference';\n\nclass ChangesDetection {\n  threshold;\n  resultImage;\n\n  constructor(threshold) {\n    this.threshold = threshold;\n  }\n\n  perform = (image1, image2) => {\n    let difference = new ImageDifference();\n    difference.perform(image1, image2);\n    this.resultImage = difference.resultImage;\n\n    for (let i = 0; i < this.resultImage.getWidth(); i++) {\n      for (let j = 0; j < this.resultImage.getHeight(); j++) {\n        let color = this.resultImage.getBrightness(i, j);\n        if (color > this.threshold) {\n          this.resultImage.setRGBComponents(i, j, 255, 0, 0);\n        }\n      }\n    }\n  };\n}\n\nexport default ChangesDetection;","import React, {Component} from 'react';\nimport Icon from '@material-ui/core/Icon/Icon';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport Divider from '@material-ui/core/Divider/Divider';\nimport FormControl from '@material-ui/core/FormControl/FormControl';\nimport Theme from '../../../../theme';\nimport InputLabel from '@material-ui/core/InputLabel/InputLabel';\nimport Select from '@material-ui/core/Select/Select';\nimport MenuItem from '@material-ui/core/MenuItem/MenuItem';\nimport Button from '@material-ui/core/Button/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport ErrorHandler from '../../../error/ErrorHandler';\nimport ChangesDetectionOperation\n  from '../../../../../processor/operations/point/non-lineal/ChangesDetection';\nimport Slider from '@material-ui/lab/Slider/Slider';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport ProcessImage from '../../../../../processor/image/ProcessImage';\n\nconst styles = {\n  root: {\n    width: 420,\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    alignContent: \"space-between\",\n    margin: \"auto\"\n  },\n  slider: {\n    width: '150px',\n    margin: 'auto',\n  },\n  thumb: {\n    background: Theme.palette.secondary.main\n  }\n};\n\nconst MIN_THRESHOLD = ProcessImage.MIN_PIXEL_VALUE;\nconst MAX_THRESHOLD = ProcessImage.MAX_PIXEL_VALUE - 1;\n\nclass ChangesDetection extends Component {\n\n  state = {\n    imageTitle: \"\",\n    referenceImage: undefined,\n    error: false,\n    errorMsg: '',\n    threshold: 0.0\n  };\n\n  applyOperation = () => {\n    let {controller} = this.props;\n    let {referenceImage} = this.state;\n    if (controller.isAnyImageSelected()) {\n      if (referenceImage !== undefined) {\n        let operation = new ChangesDetectionOperation(this.state.threshold);\n        let selectedImage = controller.getSelectedImage();\n        try {\n          operation.perform(selectedImage, referenceImage);\n          controller.add(operation.resultImage);\n        }\n        catch (e) {\n          this.setState({error: true, errorMsg: e.message});\n        }\n      }\n    }\n  };\n\n  closeError = () => {\n    this.setState({error: false});\n  };\n\n  handleChange = event => {\n    let {controller} = this.props;\n    let imageName = event.target.value;\n    let imageIndex = controller.getImageIndex(imageName);\n    let selectedImage =\n        controller.images[imageIndex];\n    this.setState({\n      imageTitle: imageName,\n      referenceImage: selectedImage\n    });\n  };\n\n  onThresholdChange = (event, value) => {\n    this.setState({threshold: value});\n  };\n\n  onThresholdTextChange = event => {\n    let value = Number.parseFloat(event.target.value);\n    if (value >= MIN_THRESHOLD && value <= MAX_THRESHOLD) {\n      this.setState({threshold: value});\n    }\n  };\n\n  render() {\n    const {controller, classes} = this.props;\n    const imageTitles = controller.getImageTitles();\n    return(\n        <div>\n          <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n            <Icon style={{padding: \"5px\"}}>photo library</Icon>\n            <Typography\n                variant=\"overline\">\n              Image Difference\n            </Typography>\n          </div>\n          <Divider/>\n          <div style={{display: \"flex\", flexDirection:\"column\", alignItems: \"center\"}}>\n            <FormControl style={{minWidth: 200, margin: Theme.spacing.unit}}>\n              <InputLabel htmlFor=\"age-simple\">Reference Image</InputLabel>\n              <Select\n                  value={this.state.imageTitle}\n                  inputProps={{\n                    name: 'referenceHistogram',\n                    id: 'age-simple',\n                  }}\n                  onChange={this.handleChange}\n                  disabled={!controller.isAnyImageSelected()}\n              >\n                {imageTitles.map(title => {\n                  return <MenuItem\n                      key={title}\n                      value={title}>\n                    {title}\n                  </MenuItem>\n                })}\n              </Select>\n            </FormControl>\n            <div className={classes.root}>\n              <Slider\n                  classes={\n                    { container: classes.slider,\n                      track: classes.thumb,\n                      thumb: classes.thumb}\n                  }\n                  min = {MIN_THRESHOLD}\n                  max = {MAX_THRESHOLD}\n                  value={this.state.threshold}\n                  aria-labelledby=\"label\"\n                  onChange={this.onThresholdChange}\n              />\n              <TextField\n                  style={{margin: \"15px\"}}\n                  value={this.state.threshold}\n                  type=\"number\"\n                  margin=\"normal\"\n                  onChange={this.onThresholdTextChange}\n                  color=\"secondary\"\n              />\n            </div>\n            <Button\n                style={{margin: \"10px\"}}\n                variant=\"extendedFab\"\n                color=\"secondary\"\n                onClick={this.applyOperation}>\n              Detect changes\n            </Button>\n          </div>\n          <ErrorHandler\n              open={this.state.error}\n              errorMsg={this.state.errorMsg}\n              handler={this.closeError}/>\n        </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(ChangesDetection);","import React, {Component} from 'react';\nimport {\n  LineSeries,\n  FlexibleWidthXYPlot,\n  XAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n} from 'react-vis';\nimport Theme from '../../../../../theme';\n\nfunction CrossImageGraph(props) {\n  return(\n      <FlexibleWidthXYPlot\n          height={180}\n          margin={{left: 10, right: 10, top: 10, bottom: 40}}\n          stackBy=\"y\">\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis hideLine/>\n        <LineSeries\n            data={props.data}\n            color={Theme.palette.secondary.main}/>\n      </FlexibleWidthXYPlot>\n  );\n}\n\nexport default CrossImageGraph;","import Bresenham from 'bresenham';\n\nclass ImageCrossSelection {\n  static MIN_RADIUS = 0;\n  static MAX_RADIUS = 10;\n\n  referenceImage;\n  crossSelection = [];\n  derivativeCrossSelection = [];\n  radius = 1;\n\n  constructor(image, radius, startPixel, endPixel) {\n    this.setReferenceImage(image);\n    this.setRadius(radius);\n    this.setCrossSelection(startPixel, endPixel);\n  }\n\n  setRadius = radius => {\n    if (ImageCrossSelection.isAValidRadius(radius)) {\n      this.radius = radius;\n    }\n  };\n\n  setReferenceImage = image => {\n    if (image !== undefined) {\n      this.referenceImage = image;\n      this.crossSelection = [];\n      this.derivativeCrossSelection = [];\n    }\n  };\n\n  setCrossSelection = (startPixel, endPixel) => {\n    if (this.referenceImage === undefined) {\n      throw new Error('reference image is undefined.');\n    }\n    if (!this.pixelIsInRange(startPixel)) {\n      throw new Error('pixel {' + startPixel.x + ', ' + startPixel.y + '} is not in range.');\n    }\n    if (!this.pixelIsInRange(endPixel)) {\n      throw new Error('pixel {' + endPixel.x + ', ' + endPixel.y + '} is not in range.');\n    }\n\n    let crossSelectionPixels = Bresenham(startPixel.x, startPixel.y, endPixel.x, endPixel.y);\n    this.crossSelection = [];\n    this.derivativeCrossSelection = [];\n    for (let i = 0; i < crossSelectionPixels.length; i++) {\n      let pixel = crossSelectionPixels[i];\n      let pixelColor = this.getColor(pixel);\n      let derivativeColor = this.getDerivativeColor(crossSelectionPixels, i);\n      this.addData(this.crossSelection, pixel, pixelColor);\n      this.addData(this.derivativeCrossSelection, pixel, derivativeColor);\n    }\n  };\n\n  getFormattedCrossSelection = () => {\n    return this.getFormattedData(this.crossSelection);\n  };\n\n  getFormattedDerivativeSelection = () => {\n    return this.getFormattedData(this.derivativeCrossSelection);\n  };\n\n  getColor = pixel => {\n    let sumColor = 0;\n    let numberOfNeighbours = 0;\n    for (let i = pixel.x - this.radius; i <= pixel.x + this.radius; i++) {\n      for (let j = pixel.y - this.radius; j <= pixel.y + this.radius; j++) {\n        let color = this.getNormalizedColor(i, j);\n        if (color !== undefined) {\n          sumColor += color;\n          numberOfNeighbours += 1;\n        }\n      }\n    }\n    return sumColor / numberOfNeighbours;\n  };\n\n  getDerivativeColor = (crossSelectionPixels, index) => {\n    if (index >= 0 && index < crossSelectionPixels.length) {\n      let currentPixel = crossSelectionPixels[index];\n      if (index === crossSelectionPixels.length - 1)\n        return currentPixel;\n\n      let nextPixel = crossSelectionPixels[index + 1];\n      let currentColor = this.getColor(currentPixel);\n      let nextColor = this.getColor(nextPixel);\n      return nextColor - currentColor;\n    }\n  };\n\n  addData = (list, pixel, color) => {\n    list.push(\n        {\n          x: pixel.x,\n          y: pixel.y,\n          color: color,\n        }\n    );\n  };\n\n  getFormattedData = pixels => {\n    let formattedData = [];\n    let pointCount = 0;\n    for (let i = 0; i < pixels.length; i++) {\n      let pixel = pixels[i];\n      formattedData.push(\n          {\n            x: pointCount,\n            y: pixel.color,\n          }\n      );\n      pointCount += 1;\n    }\n    return formattedData;\n  };\n\n  pixelIsInRange = (pixel) => {\n    return pixel.x >= 0 && pixel.x < this.referenceImage.getWidth()\n        && pixel.y >= 0 && pixel.y < this.referenceImage.getHeight();\n  };\n\n  getNormalizedColor = (i, j) => {\n    try {\n      return this.referenceImage.getBrightness(i, j);\n    }\n    catch(e) {\n      return undefined;\n    }\n  };\n\n  static isAValidRadius(radius) {\n    return radius >= this.MIN_RADIUS && radius <= this.MAX_RADIUS;\n  };\n}\n\nexport default ImageCrossSelection;","import React, {Component} from 'react';\nimport Icon from '@material-ui/core/Icon/Icon';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport Divider from '@material-ui/core/Divider/Divider';\nimport CrossImageGraph from './CrossImageGraph';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport Button from '@material-ui/core/Button/Button';\nimport Switch from '@material-ui/core/Switch/Switch';\nimport FormControlLabel\n  from '@material-ui/core/FormControlLabel/FormControlLabel';\nimport Slider from '@material-ui/lab/Slider/Slider';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Theme from '../../../../../theme';\nimport CrossImageSelectionOperation\n  from '../../../../../../processor/operations/point/non-lineal/ImageCrossSelection';\n\nconst styles = {\n  root: {\n    width: 420,\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    alignContent: \"space-between\",\n    margin: \"auto\"\n  },\n  slider: {\n    width: '150px',\n    margin: 'auto',\n  },\n  thumb: {\n    background: Theme.palette.secondary.main\n  }\n};\n\nclass CrossImageSelection extends Component {\n  state = {\n    crossImageSelection: undefined,\n    derivative: false,\n    radius: 0,\n    beginPoint: {\n      x: 0,\n      y: 0,\n    },\n    endPoint: {\n      x: 0,\n      y: 0,\n    }\n  };\n\n  applyOperation = () => {\n    let {controller} = this.props;\n    if (controller.isAnyImageSelected()) {\n      let image = controller.getSelectedImage();\n      this.setState({\n        crossImageSelection: this.getSectionOperation(image, this.state.radius, this.state.beginPoint, this.state.endPoint)\n      });\n      this.displaySectionLine();\n    }\n  };\n\n  getSectionOperation = (image, radius, beginPoint, endPoint) => {\n    return new CrossImageSelectionOperation(image, radius, beginPoint, endPoint);\n  };\n\n  getData = () => {\n    if (this.state.crossImageSelection !== undefined) {\n      if (this.state.derivative) {\n        return this.state.crossImageSelection.getFormattedDerivativeSelection();\n      } else {\n        return this.state.crossImageSelection.getFormattedCrossSelection();\n      }\n    }\n  };\n\n  onInsertionValueChanged = (point, component) => event => {\n    let currentImage = this.props.controller.getSelectedImage();\n    let value = Number.parseInt(event.target.value);\n    if (currentImage !== undefined && value !== undefined) {\n      let newPoint = {\n        x: component === 'x' ? value : this.state[point].x,\n        y: component === 'y' ? value : this.state[point].y,\n      };\n      if (this.pointIsValid(newPoint, currentImage)) {\n        this.setState({[point]: newPoint});\n      }\n    }\n  };\n\n  onSwitchChecked = value => event => {\n    this.setState({[value]: event.target.checked});\n  };\n\n  pointIsValid = (point, image) => {\n    return point.x >= 0 && point.x < image.getWidth()\n        && point.y >= 0 && point.y < image.getHeight();\n  };\n\n  displaySectionLine = () => {\n    let fillCircle = (ctx, point) => {\n      ctx.arc(point.x, point.y, 3, 0, 2 * Math.PI, false);\n      ctx.fillStyle = 'red';\n      ctx.fill();\n    };\n\n    let {beginPoint, endPoint} = this.state;\n    let controller = this.props.controller;\n    controller.updateImageCanvas();\n    let canvas = controller.getCanvas();\n    let ctx = canvas.getContext('2d');\n    ctx.beginPath();\n    ctx.moveTo(beginPoint.x, beginPoint.y);\n    ctx.lineTo(endPoint.x, endPoint.y);\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'red';\n    ctx.stroke();\n    fillCircle(ctx, beginPoint);\n    fillCircle(ctx, endPoint);\n  };\n\n  onRadiusChanged = (event, value) => {\n    this.setState({radius: value});\n  };\n\n  onRadiusTextChange = event => {\n    let value = Number.parseInt(event.target.value);\n    if (CrossImageSelectionOperation.isAValidRadius(value)) {\n      this.setState({gamma: value});\n    }\n  };\n\n  render() {\n    const {classes} = this.props;\n    return (\n        <div>\n          <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n            <Icon style={{padding: \"5px\"}}>timeline</Icon>\n            <Typography\n                variant=\"overline\">\n              Cross Image Selection\n            </Typography>\n          </div>\n          <Divider/>\n          <div>\n            <FormControlLabel\n                control={\n                  <Switch\n                      checked={this.state.derivative}\n                      onChange={this.onSwitchChecked('derivative')}\n                      value=\"checkedA\"\n                  />\n                }\n                label=\"derivative\"/>\n          </div>\n          <div>\n            <CrossImageGraph data={this.getData()}/>\n            <div className={classes.root}>\n              <Slider\n                  classes = {\n                    {\n                      container: classes.slider,\n                      track: classes.thumb,\n                      thumb: classes.thumb\n                    }\n                  }\n                  min = {CrossImageSelectionOperation.MIN_RADIUS}\n                  max = {CrossImageSelectionOperation.MAX_RADIUS}\n                  step={1}\n                  value={this.state.radius}\n                  aria-labelledby=\"label\"\n                  onChange={this.onRadiusChanged}\n              />\n              <TextField\n                  style={{margin: \"15px\"}}\n                  value={this.state.radius}\n                  type=\"number\"\n                  margin=\"normal\"\n                  onChange={this.onRadiusTextChange}\n                  color=\"secondary\"\n              />\n            </div>\n            <div>\n              <TextField\n                  style={{margin: \"15px\"}}\n                  label=\"X\"\n                  value={this.state.beginPoint.x}\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  margin=\"normal\"\n                  onChange={this.onInsertionValueChanged('beginPoint', 'x')}\n              />\n              <TextField\n                  style={{margin: \"15px\"}}\n                  label=\"Y\"\n                  value={this.state.beginPoint.y}\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  margin=\"normal\"\n                  onChange={this.onInsertionValueChanged('beginPoint', 'y')}\n              />\n            </div>\n            <div>\n              <TextField\n                  style={{margin: \"15px\"}}\n                  label=\"X\"\n                  value={this.state.endPoint.x}\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  margin=\"normal\"\n                  onChange={this.onInsertionValueChanged('endPoint', 'x')}\n              />\n              <TextField\n                  style={{margin: \"15px\"}}\n                  label=\"Y\"\n                  value={this.state.endPoint.y}\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  margin=\"normal\"\n                  onChange={this.onInsertionValueChanged('endPoint', 'y')}\n              />\n            </div>\n            <Button\n                style={{margin: \"10px\"}}\n                variant=\"extendedFab\"\n                color=\"secondary\"\n                onClick={this.applyOperation}>\n              Visualize\n            </Button>\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(CrossImageSelection);","import ProcessImage from '../../../image/ProcessImage';\n\nclass ImageQuantizer {\n  static quantizeImage = (image, bits) => {\n    let numberOfLevels = Math.pow(2, bits) - 1;\n\n    for (let row = 0; row < image.getHeight(); row++) {\n      for (let col = 0; col < image.getWidth(); col++) {\n        let color = image.getBrightness(col, row);\n        let newScaleColor = Math.round((numberOfLevels * color) / (ProcessImage.MAX_PIXEL_VALUE - 1));\n        let originalScaleColor = Math.floor((newScaleColor * (ProcessImage.MAX_PIXEL_VALUE - 1)) / numberOfLevels);\n        image.setBrightness(col, row, originalScaleColor);\n       }\n     }\n  }\n};\n\nexport default ImageQuantizer;\n","import ProcessImage from '../../../image/ProcessImage';\n\nclass ImageResampler {\n  static MAX_VALUE = 5\n  static MIN_VALUE = 1;\n\n  static resample = (image, rows, cols) => {\n    let prevY = 0;\n\n    for(let y = 0; y < image.getHeight(); y++) {\n      for(let x = 0; x < image.getWidth(); x++) {\n\n        if(x % rows == 0 && y % cols == 0) {\n          let prevValues = [];\n\n          for(let i = x; i < x + rows; i++) {\n            for(let j = y; j < y + cols; j++){\n              if(i < image.getWidth() && j < image.getHeight()){\n                let rgbcolor = image.getRGBAComponents(i, j);\n                prevValues.push({i, j, rgbcolor});\n              }\n            }\n          }\n          let meansColors = {r: 0, g: 0, b:0, a:0};\n\n          for(let k = 0; k < prevValues.length; k++){\n           meansColors.r += prevValues[k].rgbcolor.r;\n           meansColors.g += prevValues[k].rgbcolor.g;\n           meansColors.b += prevValues[k].rgbcolor.b;\n           meansColors.a += prevValues[k].rgbcolor.a;\n         }\n\n         meansColors = Object.values(meansColors).map(\n           (value) => { return value / (rows * cols) }\n         );\n\n         for(let k = 0; k < prevValues.length; k++)\n            image.setRGBAComponets(prevValues[k].i, prevValues[k].j, meansColors[0], meansColors[1], meansColors[2], meansColors[3])\n        }\n      }\n\n    }\n  }\n};\n\nexport default ImageResampler;\n","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/es/Divider/Divider';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/lab/Slider/Slider';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport Theme from '../../../../theme';\nimport Icon from '@material-ui/core/Icon';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport BlackAndWhiteOperation from '../../../../../processor/operations/point/lineal/BlackAndWhite';\nimport ImageQuantizer from '../../../../../processor/operations/point/non-lineal/ImageQuantizer';\nimport ImageResampler from '../../../../../processor/operations/point/non-lineal/ImageResampler';\nimport ProcessImage from '../../../../../processor/image/ProcessImage';\n\nconst styles = {\n  root: {\n    width: 400,\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    alignContent: \"space-between\",\n    margin: \"auto\"\n  },\n  slider: {\n    padding: '22px 0px',\n    margin: 'auto',\n\n  },\n  thumb: {\n    background: Theme.palette.secondary.main\n  },\n  formControl: {\n    margin: Theme.spacing.unit,\n    minWidth: 120,\n  },\n};\n\nclass ImageQuantization extends Component {\n  state = {\n    quantizationLevel: 8,\n    resampleRows: 1,\n    resampleCols: 1,\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  applyOperation = () => {\n    let {controller} = this.props;\n\n    if (controller.isAnyImageSelected()) {\n      controller.getSelectedImage().createNewState();\n      controller.getSelectedImage().setNextState();\n\n      ImageResampler.resample(controller.getSelectedImage(), this.state.resampleRows, this.state.resampleCols);\n      ImageQuantizer.quantizeImage(controller.getSelectedImage(), this.state.quantizationLevel);\n\n      controller.updateImageHistogram();\n      controller.updateImageCanvas();\n      controller.updateMethod();\n    }\n  };\n\n  onQuantizationLevelChange = (event, value) => {\n    this.setState({quantizationLevel: value});\n  };\n\n  onQuantizationLevelTextChange = event => {\n    let value = Number.parseInt(event.target.value);\n    if (value > ProcessImage.MIN_PIXEL_VALUE && value <= Math.log2(ProcessImage.MAX_PIXEL_VALUE)){\n      this.setState({quantizationLevel: value});\n    }\n  };\n\n  onResampleSizeChange = event => {\n    let value = Number.parseInt(event.target.value);\n    let selectedImage = this.props.controller.getSelectedImage();\n\n    if (value > 0 && value <= Math.min(selectedImage.getWidth(), selectedImage.getHeight())){\n      this.setState({[event.target.name]: value});\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { controller } = this.props;\n    return(\n      <div>\n      <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n        <Icon style={{padding: \"5px\"}}>image_aspect_ratio</Icon>\n        <Typography\n            variant=\"overline\">\n          Quantizer\n        </Typography>\n\n      </div>\n        <Divider/>\n        <div style={{width: '180px', margin: 'auto'}}>\n          <Slider\n          classes={\n            { container: classes.slider,\n              track: classes.thumb,\n              thumb: classes.thumb}\n          }\n          value={this.state.quantizationLevel}\n          min={ProcessImage.MIN_PIXEL_VALUE + 1}\n          max={Math.log2(ProcessImage.MAX_PIXEL_VALUE)}\n          step={1}\n          onChange={this.onQuantizationLevelChange}\n        />\n          <TextField\n              style={{margin: \"15px\"}}\n              value={this.state.quantizationLevel}\n              type=\"number\"\n              InputProps={{\n                endAdornment: <InputAdornment position=\"start\">bits</InputAdornment>,\n              }}\n              onChange={this.onQuantizationLevelTextChange}\n              color=\"secondary\"\n          />\n          <TextField\n              name = \"resampleRows\"\n              style={{margin: \"15px\"}}\n              value={this.state.resampleRows}\n              type=\"number\"\n              InputProps={{\n                endAdornment: <InputAdornment position=\"start\">rows</InputAdornment>,\n              }}\n              onChange={this.onResampleSizeChange}\n              color=\"secondary\"\n          />\n          <TextField\n              name = \"resampleCols\"\n              style={{margin: \"15px\"}}\n              value={this.state.resampleCols}\n              type=\"number\"\n              InputProps={{\n                endAdornment: <InputAdornment position=\"start\">columns</InputAdornment>,\n              }}\n              onChange={this.onResampleSizeChange}\n              color=\"secondary\"\n          />\n          <Button\n              style={{margin: \"10px\"}}\n              variant=\"extendedFab\"\n              color=\"secondary\"\n              onClick={this.applyOperation}>\n            Apply quantization\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nImageQuantization.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ImageQuantization);\n","import ProcessImage from '../../image/ProcessImage';\n\nclass VerticalTransformProcessor {\n\n  static applyGeometricChange = (image) => {\n    let originalImage = new ProcessImage(image.getTitle(), image.getWidth(), image.getHeight(), image.getImageData().data);\n\n    for(let i = 0; i < originalImage.getHeight()-1; i++){\n      for(let j = 0; j < originalImage.getWidth()-1; j++){\n        let rgbaComponent = originalImage.getRGBAComponents(j, i);\n        image.setRGBAComponets(j, (originalImage.getHeight()-1)-i, rgbaComponent.r, rgbaComponent.g, rgbaComponent.b, rgbaComponent.a)\n      }\n    }\n  };\n}\n\nexport default VerticalTransformProcessor;\n","import ProcessImage from '../../image/ProcessImage';\n\nclass HorizontalTransformProcessor {\n\n  static applyGeometricChange = (image) => {\n    let originalImage = new ProcessImage(image.getTitle(), image.getWidth(), image.getHeight(), image.getImageData().data);\n\n    for(let i = 0; i < originalImage.getHeight()-1; i++){\n      for(let j = 0; j < originalImage.getWidth()-1; j++){\n        let rgbaComponent = originalImage.getRGBAComponents(j, i);\n        image.setRGBAComponets((originalImage.getWidth()-1)-j, i, rgbaComponent.r, rgbaComponent.g, rgbaComponent.b, rgbaComponent.a)\n      }\n    }\n  };\n}\n\nexport default HorizontalTransformProcessor;\n","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/es/Divider/Divider';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport VerticalProcessor from '../../../../processor/operations/geometric/VerticalFlipProcessor';\nimport HorizontalProcessor from '../../../../processor/operations/geometric/HorizontalFlipProcessor';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n    width: 100,\n  },\n\n  button: {\n    margin: theme.spacing.unit\n  }\n});\n\nclass ImageFlipper extends Component {\n  state = {\n    flipType: \"\",\n    labelWidth: 0,\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  applyOperation = () => {\n    let {controller} = this.props;\n\n    controller.getSelectedImage().createNewState();\n    controller.getSelectedImage().setNextState();\n\n    if(this.state.flipType === \"vertical\") {\n      VerticalProcessor.applyGeometricChange(controller.getSelectedImage());\n    } else {\n      HorizontalProcessor.applyGeometricChange(controller.getSelectedImage());\n    }\n\n    controller.updateImageHistogram();\n    controller.updateImageCanvas();\n    controller.updateMethod();\n  };\n\n  handleFormChange= event => {\n   this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return(\n      <div>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n          <InputLabel\n            ref={ref => {\n              this.InputLabelRef = ref;\n            }}\n            htmlFor=\"outlined-flipType-simple\"\n          >\n            Flyp type\n          </InputLabel>\n          <Select\n            value={this.state.flipType}\n            onChange={this.handleFormChange}\n            input={\n              <OutlinedInput\n                labelWidth={this.state.labelWidth}\n                name=\"flipType\"\n                id=\"outlined-flipType-simple\"\n              />\n            }\n          >\n          <MenuItem key=\"horizontal\" value=\"horizontal\">Horizontal</MenuItem>\n          <MenuItem key=\"vertical\" value=\"vertical\">Vertical</MenuItem>\n          </Select>\n        </FormControl>\n        <Button\n            variant=\"fab\"\n            color=\"secondary\"\n            aria-label=\"Add\"\n            onClick={this.applyOperation}>\n          <AddIcon />\n        </Button>\n      </div>\n    );\n  }\n}\n\nImageFlipper.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ImageFlipper);\n","import ProcessImage from '../../image/ProcessImage';\n\nclass TransposedProcessor {\n  static applyGeometricChange = (image) => {\n    let newImageData = [];\n    let index = 0;\n\n    for(let i = 0; i < image.getHeight(); i++){\n      for(let j = 0; j < image.getWidth(); j++, index += image.getHeight() * 4){\n        let rgbaComponent = image.getRGBAComponents(j, i);\n        newImageData[index] = rgbaComponent.r;\n        newImageData[index+1] = rgbaComponent.g;\n        newImageData[index+2] = rgbaComponent.b;\n        newImageData[index+3] = rgbaComponent.a;\n      }\n       index = 4 * (i+1);\n    }\n\n    image.setNewState(Uint8ClampedArray.from(newImageData), image.getHeight(), image.getWidth());\n    image.setNextState();\n  };\n}\n\nexport default TransposedProcessor;\n","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport ErrorHandler from '../../error/ErrorHandler';\nimport TransposedProcessor from '../../../../processor/operations/geometric/TransposedProcessor';\n\n class TransposedImage extends Component {\n   state = {\n     error: false,\n     errorMsg: \"error\",\n   };\n\n   handleError = (msg) => {\n     this.setState({error: true, errorMsg: msg})\n   };\n\n   closeError = (msg) => {\n     this.setState({error: false})\n   };\n\n   applyOperation = () => {\n       let selectedImage = this.props.controller.getSelectedImage();\n\n       TransposedProcessor.applyGeometricChange(selectedImage);\n\n       this.props.controller.updateImageHistogram();\n       this.props.controller.updateImageCanvas();\n       this.props.controller.updateMethod();\n\n  };\n\n   render() {\n    return(\n      <div>\n      <div>\n        <Button\n            variant=\"fab\"\n            color=\"secondary\"\n            aria-label=\"Add\"\n            onClick={this.applyOperation}>\n          <AddIcon />\n        </Button>\n        </div>\n        <ErrorHandler\n            open={this.state.error}\n            errorMsg={this.state.errorMsg}\n            handler={this.closeError}/>\n      </div>\n    );\n  }\n}\n\n export default TransposedImage;\n","\nclass Scaling {\n  verticalFactor;\n  horizontalFactor;\n  static FACTOR_MIN = 0.1;\n  static FACTOR_MAX = 4.0;\n\n  constructor(horizontalFactor, verticalFactor) {\n    this.setVerticalFactor(verticalFactor);\n    this.setHorizontalFactor(horizontalFactor);\n  }\n\n  perform = (image, interpolator) => {\n    let newWidth = Math.round(this.horizontalFactor * image.getWidth());\n    let newHeight = Math.round(this.verticalFactor * image.getHeight());\n    image.createNewBlankState(newWidth, newHeight);\n    image.setNextState();\n    for (let i = 1; i < image.getWidth() - 1; i++) {\n      for (let j = 1; j < image.getHeight() - 1; j++) {\n        let position = {\n          x: i / this.horizontalFactor,\n          y: j / this.verticalFactor,\n        };\n        image.setPreviousState();\n        let interpolatedColor = interpolator.interpolateColor(image, position);\n        image.setNextState();\n        image.setBrightness(i, j, interpolatedColor);\n        image.setAlphaComponent(i, j, 255);\n      }\n    }\n    image.setNextState();\n  };\n\n  setVerticalFactorFromWidth = (oldWidth, newWidth) => {\n    this.setVerticalFactor(newWidth / oldWidth);\n  };\n\n  setHoorizontalFactorFromHeight = (oldHeight, newHeight) => {\n    this.setHorizontalFactor(newHeight / oldHeight);\n  };\n\n  setFactor = factor => {\n    this.setVerticalFactor(factor);\n    this.setHorizontalFactor(factor);\n  };\n\n  setVerticalFactor = verticalFactor => {\n    if (Scaling.factorIsValid(verticalFactor))\n      this.verticalFactor = verticalFactor;\n  };\n\n  setHorizontalFactor = horizontalFactor => {\n    if (Scaling.factorIsValid(horizontalFactor))\n      this.horizontalFactor = horizontalFactor;\n  };\n\n  static factorIsValid = (factor) => {\n    return factor !== undefined\n        && factor >= Scaling.FACTOR_MIN\n        && factor <= Scaling.FACTOR_MAX;\n  };\n}\n\nexport default Scaling;","\n\nclass Interpolator {\n  static OVER_LIMITS_COLOR = 0;\n\n  getNeighbourhood = (image, position) => {\n    let X = Math.floor(position.x);\n    let Y = Math.floor(position.y);\n    return {\n      A: this.getNeighbour(image, X, Y),\n      B: this.getNeighbour(image, X + 1, Y),\n      C: this.getNeighbour(image, X, Y + 1),\n      D: this.getNeighbour(image, X + 1, Y + 1),\n    };\n  };\n\n  getNeighbour = (image, x, y) => {\n    let color;\n    if (this.isInBounds(image, x, y)) {\n      color = image.getBrightness(x, y);\n    } else {\n      color = Interpolator.OVER_LIMITS_COLOR;\n    }\n    return {\n      x: x,\n      y: y,\n      color: color,\n    };\n  };\n\n  isInBounds(image, x, y) {\n    return x >= 0 && x < image.getWidth()\n        && y >= 0 && y < image.getHeight();\n  };\n}\n\nexport default Interpolator;","\nimport Interpolator from './Interpolator';\n\nclass NearestNeighbourInterpolator extends Interpolator {\n  interpolateColor = (image, position) => {\n    let bound = this.getPositionBound(image, position);\n    let neighbourhood = this.getNeighbourhood(image, position);\n    let keys = Object.keys(neighbourhood);\n    let nearestNeighbourKey;\n    for (let k = 0; k < keys.length; k++) {\n      let neighbour = neighbourhood[keys[k]];\n      if (neighbour.x === bound.x\n          && neighbour.y === bound.y) {\n        nearestNeighbourKey = keys[k];\n      }\n    }\n    return neighbourhood[nearestNeighbourKey].color;\n  };\n\n  getPositionBound = (image, position) => {\n    let x = Math.round(position.x);\n    let y = Math.round(position.y);\n    return {\n      x: x < image.getWidth() ? x : x - 1,\n      y: y < image.getHeight() ? y : y - 1,\n    };\n  }\n}\n\nexport default NearestNeighbourInterpolator;","import Interpolator from './Interpolator';\nimport ProcessImage from '../../../image/ProcessImage';\nlet counter = 0;\nclass BilinealInterpolator extends Interpolator {\n  interpolateColor = (image, position) => {\n    let neighbourhood = this.getNeighbourhood(image, position);\n    let X = Math.floor(position.x);\n    let Y = Math.floor(position.y);\n    let p = position.x - X;\n    let q = position.y - Y;\n    let A = neighbourhood.A.color;\n    let B = neighbourhood.B.color;\n    let C = neighbourhood.C.color;\n    let D = neighbourhood.D.color;\n    let P = (A + D - B - C) * p * q\n          + (C - A) * q\n          + (B - A) * p\n          + A;\n    return this.clampResult(P);\n  };\n\n  clampResult = value => {\n    let result = Math.round(value);\n    if (result < ProcessImage.MIN_PIXEL_VALUE) {\n      result = ProcessImage.MIN_PIXEL_VALUE;\n    }\n    if (result >= ProcessImage.MAX_PIXEL_VALUE) {\n      result = ProcessImage.MAX_PIXEL_VALUE - 1;\n    }\n    return result;\n  }\n}\n\nexport default BilinealInterpolator;","import React, {Component} from 'react';\nimport Icon from '@material-ui/core/Icon';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Slider from '@material-ui/lab/Slider';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport ScalingOperation from '../../../../processor/operations/geometric/Scaling';\nimport Theme from '../../../theme';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport NearestNeighbourInterpolator\n  from '../../../../processor/operations/geometric/interpolator/NearestNeighbourInterpolator';\nimport BilinealInterpolator\n  from '../../../../processor/operations/geometric/interpolator/BilinealInterpolator';\n\nconst styles = {\n  root: {\n    width: 400,\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    alignContent: \"space-between\",\n    margin: \"auto\"\n  },\n  slider: {\n    width: '180px',\n    margin: 'auto',\n  },\n  thumb: {\n    background: Theme.palette.secondary.main\n  },\n  formControl: {\n    margin: Theme.spacing.unit,\n    minWidth: 120,\n  },\n};\n\nconst interpolators = {\n  nearestNeighbour: new NearestNeighbourInterpolator(),\n  bilineal: new BilinealInterpolator(),\n};\n\nclass Scaling extends Component {\n  interpolatorsText = ['nearestNeighbour', 'bilineal'];\n\n  state = {\n    xFactor: ScalingOperation.FACTOR_MIN,\n    yFactor: ScalingOperation.FACTOR_MIN,\n    selectedInterpolator: this.interpolatorsText[0]\n  };\n\n  getSelectedInterpolator = () => {\n    return interpolators[this.state.selectedInterpolator];\n  };\n\n  applyOperation = () => {\n    let {controller} = this.props;\n    if (controller.isAnyImageSelected()) {\n      let image = controller.getSelectedImage();\n      let interpolator = this.getSelectedInterpolator();\n      let factor = this.getFactor();\n      let scaling =\n          new ScalingOperation(factor.x, factor.y);\n      scaling.perform(image, interpolator);\n      image.setNextState();\n\n      controller.updateImageHistogram();\n      controller.updateImageCanvas();\n      controller.resetActionMethod(undefined);\n      controller.updateMethod();\n    }\n  };\n\n  getFactor = () => {\n    return {\n      x: this.state.xFactor,\n      y: this.state.yFactor,\n    }\n  };\n\n  onFactorChanged = name => (event, value) => {\n    this.setState({[name]: value});\n  };\n\n  onFactorTextChanged = name => event => {\n    let factor = Number.parseFloat(event.target.value);\n    if (ScalingOperation.factorIsValid(factor)) {\n      this.setState({[name]: factor});\n    }\n  };\n\n  onInterpolatorSelected = event => {\n    this.setState({selectedInterpolator: event.target.value})\n  };\n\n  render() {\n    const {classes} = this.props;\n    return(\n        <div>\n          <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n            <Icon style={{padding: \"5px\"}}>image_aspect_ratio</Icon>\n            <Typography\n                variant=\"overline\">\n              Scaling\n            </Typography>\n          </div>\n          <Divider/>\n          <FormControl className={classes.formControl}>\n            <Select\n                value={this.state.selectedInterpolator}\n                onChange={this.onInterpolatorSelected}\n                autoWidth\n            >\n              {this.interpolatorsText.map(interpolatorName => {\n                return <MenuItem\n                    key={interpolatorName}\n                    value={interpolatorName}>{interpolatorName}</MenuItem>;\n              })}\n            </Select>\n          </FormControl>\n          <div className={classes.root}>\n            <Typography variant=\"caption\" style={{margin: 10}}>Horizontal factor</Typography>\n            <Slider\n                classes={\n                  { container: classes.slider,\n                    track: classes.thumb,\n                    thumb: classes.thumb}\n                }\n                min = {ScalingOperation.FACTOR_MIN}\n                max = {ScalingOperation.FACTOR_MAX}\n                value={this.state.xFactor}\n                aria-labelledby=\"label\"\n                onChange={this.onFactorChanged('xFactor')}\n            />\n            <TextField\n                style={{margin: \"15px\"}}\n                value={this.state.xFactor}\n                type=\"number\"\n                margin=\"normal\"\n                onChange={this.onFactorTextChanged('xFactor')}\n                color=\"secondary\"\n            />\n          </div>\n          <div className={classes.root}>\n            <Typography variant=\"caption\" style={{margin: 10}}>Vertical factor</Typography>\n            <Slider\n                classes={\n                  { container: classes.slider,\n                    track: classes.thumb,\n                    thumb: classes.thumb}\n                }\n                min = {ScalingOperation.FACTOR_MIN}\n                max = {ScalingOperation.FACTOR_MAX}\n                value={this.state.yFactor}\n                aria-labelledby=\"label\"\n                onChange={this.onFactorChanged('yFactor')}\n            />\n            <TextField\n                style={{margin: \"15px\"}}\n                value={this.state.yFactor}\n                type=\"number\"\n                margin=\"normal\"\n                onChange={this.onFactorTextChanged('yFactor')}\n                color=\"secondary\"\n            />\n          </div>\n          <Button\n              style={{margin: \"10px\"}}\n              variant=\"extendedFab\"\n              color=\"secondary\"\n              onClick={this.applyOperation}>\n            Apply Scaling\n          </Button>\n        </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(Scaling);","import ProcessImage from '../../image/ProcessImage';\n\nclass ImageRotation {\n  static applyGeometricChange = (image, degrees) => {\n    let times = degrees / 360 * 4 - parseInt(degrees / 360, 10) * 4;\n    let newImage = new ProcessImage(image.getTitle(), image.getWidth(), image.getHeight(), image.getImageData().data);\n    let newImageData = [];\n\n    for(; times > 0; times--){\n      for(let i = newImage.getWidth()-1; i >= 0; i--){\n        for(let j = 0; j < newImage.getHeight(); j++){\n          let rgbaComponent = newImage.getRGBAComponents(i, j);\n          newImageData.push(rgbaComponent.r)\n          newImageData.push(rgbaComponent.g)\n          newImageData.push(rgbaComponent.b)\n          newImageData.push(rgbaComponent.a)\n        }\n      }\n      newImage = ImageRotation.newImage(newImage, newImageData);\n      newImageData = [];\n    }\n\n    image.setNewState(Uint8ClampedArray.from(newImage.getImageData().data), newImage.getWidth(), newImage.getHeight());\n    image.setNextState();\n  };\n\n  static newImage = (newImage, newImageData) => {\n      return new ProcessImage(newImage.getTitle(), newImage.getHeight(), newImage.getWidth(), Uint8ClampedArray.from(newImageData));\n  };\n}\nexport default ImageRotation;\n","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/es/Divider/Divider';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport ImageRotation from '../../../../processor/operations/geometric/ImageRotation';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n    width: 100,\n  },\n\n  button: {\n    margin: theme.spacing.unit\n  }\n});\n\nclass RotateImage extends Component {\n  state = {\n    rotationDegrees: \"\",\n    labelWidth: 0,\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  applyOperation = () => {\n    let selectedImage = this.props.controller.getSelectedImage();\n\n    ImageRotation.applyGeometricChange(selectedImage, this.state.rotationDegrees);\n    this.props.controller.updateImageHistogram();\n    this.props.controller.updateImageCanvas();\n    this.props.controller.updateMethod();\n  };\n\n  handleFormChange= event => {\n   this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return(\n      <div>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n          <InputLabel\n            ref={ref => {\n              this.InputLabelRef = ref;\n            }}\n            htmlFor=\"outlined-rotationDegrees-simple\"\n          >\n            Degrees\n          </InputLabel>\n          <Select\n            value={this.state.rotationDegrees}\n            onChange={this.handleFormChange}\n            input={\n              <OutlinedInput\n                labelWidth={this.state.labelWidth}\n                name=\"rotationDegrees\"\n                id=\"outlined-rotationDegrees-simple\"\n              />\n            }\n          >\n          <MenuItem key=\"0\" value=\"0\">0º</MenuItem>\n          <MenuItem key=\"90\" value=\"90\">90º</MenuItem>\n          <MenuItem key=\"180\" value=\"180\">180º</MenuItem>\n          <MenuItem key=\"270\" value=\"270\">270º</MenuItem>\n          </Select>\n        </FormControl>\n        <Button\n            variant=\"fab\"\n            color=\"secondary\"\n            aria-label=\"Add\"\n            onClick={this.applyOperation}>\n          <AddIcon />\n        </Button>\n      </div>\n    );\n  }\n}\n\nRotateImage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(RotateImage);\n","\nclass Rotation {\n  static MIN_ANGLE = -360.0;\n  static MAX_ANGLE = 360.0;\n\n  createNewImageState = (image, angle) => {\n    let size = this.getNewImageWidthAndHeight(image, angle);\n    image.createNewBlankState(size.width, size.height);\n  };\n\n  getImageCorners = (image) => {\n    let maxWidth = image.getWidth() - 1;\n    let maxHeight = image.getHeight() - 1;\n    return {\n      topLeft:     {x: 0, y: 0},\n      topRight:    {x: maxWidth, y: 0},\n      bottomLeft:  {x: 0, y: maxHeight},\n      bottomRight: {x: maxWidth, y: maxHeight}\n    }\n  };\n\n  getRotatedImageCorners = (image, angle) => {\n    let corners = this.getImageCorners(image);\n    let rotatedCorners = {};\n    let keys = Object.keys(corners);\n    for (let k = 0; k < keys.length; k++) {\n      let key = keys[k];\n      rotatedCorners[key] = this.getRotationPosition(angle, corners[key]);\n    }\n    return rotatedCorners;\n  };\n\n  getNewImageWidthAndHeight = (image, angle) => {\n    let corners = this.getRotatedImageCorners(image, angle);\n    let minMax = this.getMinMaxCorners(corners);\n    return {\n      width: Math.round(Math.abs(minMax.max.x - minMax.min.x)),\n      height: Math.round(Math.abs(minMax.max.y - minMax.min.y)),\n    };\n  };\n\n  getMinMaxCorners = (corners) => {\n    let xCoordinates = [];\n    let yCoordinates = [];\n    let keys = Object.keys(corners);\n    for (let k = 0; k < keys.length; k++) {\n      let key = keys[k];\n      xCoordinates.push(corners[key].x);\n      yCoordinates.push(corners[key].y);\n    }\n    return {\n      min: {\n        x: Math.min(...xCoordinates),\n        y: Math.min(...yCoordinates),\n      },\n      max: {\n        x: Math.max(...xCoordinates),\n        y: Math.max(...yCoordinates),\n      }\n    }\n  };\n\n  getRotationPosition = (angle, position) => {\n    const {x, y} = position;\n    let radAngle = angle * Math.PI / 180;\n    return {\n      x: x * Math.cos(radAngle) + y * Math.sin(radAngle),\n      y: - x * Math.sin(radAngle) + y * Math.cos(radAngle),\n    }\n  };\n\n  getDirectPosition = (angle, position, minMax) => {\n    let {x, y} = this.getRotationPosition(angle, position);\n    return {\n      x: x + Math.abs(minMax.min.x),\n      y: y + Math.abs(minMax.min.y),\n    };\n  };\n\n  getInversePosition = (angle, position, minMax) => {\n    let {x, y} = position;\n    let minX = Math.abs(minMax.min.x);\n    let minY = Math.abs(minMax.min.y);\n    let radAngle = angle * Math.PI / 180;\n    return {\n      x: (x - minX) * Math.cos(radAngle) + (minY - y) * Math.sin(radAngle),\n      y: (x - minX) * Math.sin(radAngle) + (y - minY) * Math.cos(radAngle),\n    }\n  };\n\n  static angleIsValid(angle) {\n    return angle >= Rotation.MIN_ANGLE\n        && angle <= Rotation.MAX_ANGLE;\n  }\n\n  clampIndexes = (image, position) => {\n    let keys = Object.keys(position);\n    for (let k = 0; k < keys.length; k++) {\n      let key = keys[k];\n      position[key] = Math.round(position[key]);\n      if (position[key] < 0) {\n        position[key] = 0;\n      }\n    }\n    if (position.x >= image.getWidth()) {\n      position.x = image.getWidth() - 1;\n    }\n    if (position.y >= image.getHeight()) {\n      position.y = image.getHeight() - 1;\n    }\n  }\n}\n\nexport default Rotation;","import Rotation from './Rotation';\n\nclass RawRotation extends Rotation {\n  perform = (image, angle) => {\n    let corners = this.getRotatedImageCorners(image, angle);\n    let minMax = this.getMinMaxCorners(corners);\n    this.createNewImageState(image, angle);\n    for (let i = 0; i < image.getWidth(); i++) {\n      for (let j = 0; j < image.getHeight(); j++) {\n        let color = image.getBrightness(i, j);\n        let position = this.getDirectPosition(angle, {x: i, y: j}, minMax);\n        image.setNextState();\n        this.clampIndexes(image, position);\n        image.setBrightness(position.x, position.y, color);\n        image.setAlphaComponent(position.x, position.y, 255);\n        image.setPreviousState();\n      }\n    }\n  };\n}\n\nexport default RawRotation;","import Rotation from './Rotation';\n\nclass InterpolatedRotation extends Rotation {\n  perform = (image, angle, interpolator) => {\n    let corners = this.getRotatedImageCorners(image, angle);\n    let minMax = this.getMinMaxCorners(corners);\n    this.createNewImageState(image, angle);\n    image.setNextState();\n    for (let i = 0; i < image.getWidth(); i++) {\n      for (let j = 0; j < image.getHeight(); j++) {\n        let position = this.getInversePosition(angle, {x: i, y: j}, minMax);\n        image.setPreviousState();\n        if (this.positionIsValid(position, image)) {\n          let color = interpolator.interpolateColor(image, position);\n          image.setNextState();\n          image.setBrightness(i, j, color);\n          image.setAlphaComponent(i, j, 255);\n        }\n        image.setNextState();\n      }\n    }\n  };\n\n  positionIsValid = (position, image) => {\n    return position.x >= 0 && position.x < image.getWidth()\n        && position.y >= 0 && position.y < image.getHeight();\n  }\n}\n\nexport default InterpolatedRotation;","import React, {Component} from 'react';\nimport RotationOperation from '../../../../processor/operations/geometric/rotation/Rotation';\nimport RawRotation from '../../../../processor/operations/geometric/rotation/RawRotation';\nimport InterpolatedRotation from '../../../../processor/operations/geometric/rotation/InterpolatedRotation';\nimport NearestNeighbourInterpolator\n  from '../../../../processor/operations/geometric/interpolator/NearestNeighbourInterpolator';\nimport BilinealInterpolator\n  from '../../../../processor/operations/geometric/interpolator/BilinealInterpolator';\nimport Icon from '@material-ui/core/Icon/Icon';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport Divider from '@material-ui/core/Divider/Divider';\nimport Slider from '@material-ui/lab/Slider/Slider';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport Theme from '../../../theme';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button/Button';\nimport Select from '@material-ui/core/Select/Select';\nimport MenuItem from '@material-ui/core/MenuItem/MenuItem';\nimport FormControl from '@material-ui/core/FormControl/FormControl';\n\nconst styles = {\n  root: {\n    width: 400,\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    alignContent: \"space-between\",\n    margin: \"auto\"\n  },\n  slider: {\n    width: '180px',\n    margin: 'auto',\n  },\n  thumb: {\n    background: Theme.palette.secondary.main\n  },\n  formControl: {\n    margin: Theme.spacing.unit,\n    minWidth: 120,\n  },\n};\n\nconst MIDDLE_ANGLE = (RotationOperation.MAX_ANGLE + RotationOperation.MIN_ANGLE) / 2;\n\nclass Rotation extends Component {\n  interpolators = {\n    nearestNeighbour: new NearestNeighbourInterpolator(),\n    bilineal: new BilinealInterpolator(),\n  };\n\n  rotationMethods = {\n    raw: new RawRotation(),\n    interpolated: new InterpolatedRotation(),\n  };\n\n  state = {\n    angle: MIDDLE_ANGLE,\n    selectedInterpolator: Object.keys(this.interpolators)[0],\n    selectedRotationMethod: Object.keys(this.rotationMethods)[0],\n  };\n\n  applyOperation = () => {\n    let {controller} = this.props;\n    if (controller.isAnyImageSelected()) {\n      let image = controller.getSelectedImage();\n      let {angle} = this.state;\n      let rotation = this.getRotationMethod();\n      rotation.perform(image, angle, this.getInterpolator());\n      image.setNextState();\n\n      controller.updateImageHistogram();\n      controller.updateImageCanvas();\n      controller.resetActionMethod(undefined);\n      controller.updateMethod();\n    }\n  };\n\n  getRotationMethod = () => {\n    return this.rotationMethods[this.state.selectedRotationMethod];\n  };\n\n  getInterpolator = () => {\n    return this.interpolators[this.state.selectedInterpolator];\n  };\n\n  onAngleChanged = (event, value) => {\n    this.setState({angle: value});\n  };\n\n  onAngleTextChanged = event => {\n    let angle = Number.parseFloat(event.target.value);\n    if (RotationOperation.angleIsValid(angle)) {\n      this.setState({angle: angle});\n    }\n  };\n\n  onInterpolatorSelected = event => {\n    this.setState({selectedInterpolator: event.target.value})\n  };\n\n  onRotationMethodSelected = event => {\n    this.setState({selectedRotationMethod: event.target.value});\n  };\n\n  interpolatorSelectorDisabled = () => {\n    return this.state.selectedRotationMethod !== 'interpolated'\n  };\n\n  render() {\n    let {classes} = this.props;\n    return(\n        <div>\n          <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n            <Icon style={{padding: \"5px\"}}>crop_rotate</Icon>\n            <Typography\n                variant=\"overline\">\n              Rotation\n            </Typography>\n          </div>\n          <Divider/>\n          <FormControl className={classes.formControl}>\n            <Select\n                value={this.state.selectedRotationMethod}\n                onChange={this.onRotationMethodSelected}\n                autoWidth\n            >\n              {Object.keys(this.rotationMethods).map(interpolatorName => {\n                return <MenuItem\n                    key={interpolatorName}\n                    value={interpolatorName}>{interpolatorName}</MenuItem>;\n              })}\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <Select\n                value={this.state.selectedInterpolator}\n                onChange={this.onInterpolatorSelected}\n                disabled={this.interpolatorSelectorDisabled()}\n                autoWidth\n            >\n              {Object.keys(this.interpolators).map(rotationMethod => {\n                return <MenuItem\n                    key={rotationMethod}\n                    value={rotationMethod}>{rotationMethod}</MenuItem>;\n              })}\n            </Select>\n          </FormControl>\n          <div className={classes.root}>\n            <Typography variant=\"caption\" style={{margin: 10}}>Horizontal factor</Typography>\n            <Slider\n                classes={\n                  { container: classes.slider,\n                    track: classes.thumb,\n                    thumb: classes.thumb}\n                }\n                min = {RotationOperation.MIN_ANGLE}\n                max = {RotationOperation.MAX_ANGLE}\n                value={this.state.angle}\n                aria-labelledby=\"label\"\n                onChange={this.onAngleChanged}\n            />\n            <TextField\n                style={{margin: \"15px\"}}\n                value={this.state.angle}\n                type=\"number\"\n                margin=\"normal\"\n                onChange={this.onAngleTextChanged}\n                color=\"secondary\"\n            />\n          </div>\n          <Button\n              style={{margin: \"10px\"}}\n              variant=\"extendedFab\"\n              color=\"secondary\"\n              onClick={this.applyOperation}>\n            Apply Rotation\n          </Button>\n        </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(Rotation);","import React from 'react';\nimport LoadImage from './LoadImageAction';\nimport SaveImage from './SaveImageAction';\n\n// Lineal point operations.\nimport BlackAndWhite from './point/lineal/BlackAndWhite';\nimport LinealPicewiseAdjustment from './point/lineal/LinealPicewiseAdjustment';\nimport BrightnessAndContrast from './point/lineal/BrightnessAndContrast';\n\n// Non lineal point operation.\nimport HistogramEqualization from './point/non-lineal/HistogramEqualization';\nimport HistogramSpecification from './point/non-lineal/HistogramSpecification';\nimport GammaCorrection from './point/non-lineal/GammaCorrection';\nimport ImageDifference from './point/non-lineal/ImageDifference';\nimport ChangesDetection from './point/non-lineal/ChangesDetection';\nimport CrossImageSelection from './point/non-lineal/cross-image/CrossImageSelection';\nimport ImageQuantization from './point/non-lineal/ImageQuantization';\n//Geometric operations\nimport ImageFlipper from './geometric/ImageFlipper';\nimport TransposedImage from './geometric/TransposedImage';\nimport Scaling from './geometric/Scaling';\nimport RotateImage from './geometric/RotateImage';\nimport Rotation from './geometric/Rotation';\n\n/**\n * Action picker object determines\n * witch action to display in any moment.\n *\n * @type {{load_img: (function(*): *)}}\n */\nlet actionPicker = {\n  load_img: controller => {return <LoadImage controller={controller}/>},\n  save_img: controller => {return <SaveImage controller={controller}/>},\n  black_white: controller => {return <BlackAndWhite controller={controller}/>},\n  lineal_adjustment: controller => {return <LinealPicewiseAdjustment controller={controller}/>},\n  brightness_contrast: controller => {return <BrightnessAndContrast controller={controller}/>},\n  histogram_equalization: controller => {return <HistogramEqualization controller={controller}/>},\n  histogram_specification: controller => {return <HistogramSpecification controller={controller}/>},\n  gamma_correction: controller => {return <GammaCorrection controller={controller}/>},\n  image_difference: controller => {return <ImageDifference controller={controller}/>},\n  changes_detection: controller => {return <ChangesDetection controller={controller}/>},\n  cross_image: controller => {return <CrossImageSelection controller={controller}/>},\n  image_flipper: controller => {return <ImageFlipper controller={controller}/>},\n  image_transpose: controller => {return <TransposedImage controller={controller}/>},\n  scale_image: controller => {return <Scaling controller={controller}/>},\n  rotate_image: controller => {return <RotateImage controller={controller}/>},\n  rotation: controller => {return <Rotation controller={controller}/>},\n  image_quantization: controller => {return <ImageQuantization controller={controller}/>},\n};\n\nexport default actionPicker;\n","import React, {Component} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography'\nimport ActionPicker from './ActionPicker';\n\nclass Action extends Component {\n\n  renderAction() {\n    let currentAction = this.props.currentAction;\n    let controller = this.props.controller;\n\n    if (currentAction === undefined) {\n      return (<Typography>Pick any action from the menu.</Typography>);\n    } else {\n      return ActionPicker[currentAction](controller);\n    }\n  }\n\n  render() {\n    return(\n        <Paper\n            style={{height: \"100%\"}}>\n          {this.renderAction()}\n        </Paper>\n    )\n  }\n}\n\nexport default Action;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Clear from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    width: '100%'\n  },\n});\n\nconst TITLE_MAX_LENGHT = 20;\n\nclass ImageTabs extends React.Component {\n  handleChange = (event, value) => {\n    this.props.controller.updateSelectedImage(value);\n  };\n\n  handleCloseEvent = (event, imageTitle) => {\n    this.props.controller.delete(this.props.controller.getImageIndex(imageTitle));\n    event.stopPropagation();\n  }\n\n  reduceTittle = (title) => {\n      if(title.length > TITLE_MAX_LENGHT){\n        title = title.slice(0, title.length).replace(/.{3}$/i, \"...\")\n      }\n\n    return title;\n  }\n\n  render() {\n    const { classes } = this.props;\n    const controller = this.props.controller;\n\n    return (\n        <div className={classes.root}>\n          <AppBar\n              style={{width: \"71vw\"}}\n              position=\"static\"\n              color=\"default\">\n            <Tabs\n                value={this.props.controller.getSelectedImageIndex()}\n                onChange={this.handleChange}\n                scrollable\n                scrollButtons=\"auto\"\n            >\n              {\n                controller.getImageTitles().map(\n                    title => <Tab\n                        component=\"div\"\n                        key={title}\n                        label={\n                          <div>\n                          {this.reduceTittle(title)}\n                        <IconButton style={{ marginRight: \"-20%\" }} color=\"secondary\" aria-label=\"Add an alarm\" onClick={e => this.handleCloseEvent(e, title)}>\n                          <Clear />\n                        </IconButton>\n                        </div>\n                      }/>\n                )\n              }\n            </Tabs>\n          </AppBar>\n        </div>\n    );\n  }\n}\n\nImageTabs.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ImageTabs);\n","import React, {Component} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Chip from '@material-ui/core/Chip';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport ProcessImage from '../../../processor/image/ProcessImage'\n\nlet containerStyles = {\n  padding: \"10px\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\"\n};\n\nclass WorkspaceBar extends Component {\n\n  calculateColor = () => {\n    let image = this.props.controller.getSelectedImage();\n    let {x, y} = this.props.position;\n\n    if (image === undefined\n        || !image.indexesAreInRange(x, y)\n        || x === -1\n        || y === -1) {\n      return \"white\";\n    } else {\n      return \"rgb(\" + image.getRedComponent(x, y) + \", \"\n                    + image.getGreenComponent(x, y) + \", \"\n                    + image.getBlueComponent(x, y) + \")\";\n    }\n  };\n\n  calculateColorText = () => {\n    let image = this.props.controller.getSelectedImage();\n    let {x, y} = this.props.position;\n\n    if (image === undefined\n        || !image.indexesAreInRange(x, y)\n        || x === -1\n        || y === -1) {\n      return \"r:- g:- b:-\";\n    } else {\n      return \"r:\" + image.getRedComponent(x, y) + \" \"\n           + \"g:\" + image.getGreenComponent(x, y) + \" \"\n           + \"b:\" + image.getBlueComponent(x, y) + \" \"\n    }\n  };\n\n  calculatePosition = () => {\n    let image = this.props.controller.getSelectedImage();\n    let {x, y} = this.props.position;\n    if (image === undefined || x === -1 || y === -1) {\n      return \"x:- y:-\";\n    } else {\n      return \"x:\" + x + \" \" + \"y:\" + y;\n    }\n  };\n\n  duplicateActualImage = () => {\n    if(this.props.controller.numberOfImages() > 0) {\n      let image = this.props.controller.getSelectedImage();\n      let newImage = new ProcessImage(image.getTitle() + \" - Duplicated.\" + image.getFormat(), image.getWidth(), image.getHeight(), image.getImageData().data);\n      this.props.controller.add(newImage);\n    }\n  }\n\n  updateImageState = operation => () => {\n      let {controller} = this.props;\n      let image = controller.getSelectedImage()\n      if (image !== undefined) {\n        switch (operation) {\n          case 'undo': {\n            image.setPreviousState();\n            break;\n          }\n          case 'redo': {\n            image.setNextState();\n            break;\n          }\n          case 'restore': {\n            image.setInitialState();\n            break;\n          }\n        }\n\n        controller.updateImageHistogram();\n        controller.updateImageCanvas();\n        controller.resetActionMethod(undefined);\n        controller.updateMethod();\n\n    }\n\n  };\n\n  render() {\n    return (\n        <Paper\n          style={containerStyles}>\n          <div>\n            <Chip\n                avatar={\n                  <Avatar\n                      style={{background: this.calculateColor()}}/>\n                }\n                style={{marginRight: \"5px\"}}\n                label={this.calculateColorText()}\n                color=\"secondary\"\n                variant=\"outlined\"/>\n            <Chip\n                label={this.calculatePosition()}\n                color=\"secondary\"\n                variant=\"outlined\"/>\n          </div>\n          <div>\n          <span\n            style={{borderRight: \"1px solid #babdbe\"}}>\n          <IconButton\n              color=\"secondary\"\n              onClick={this.duplicateActualImage}>\n            <Icon>add_to_photos</Icon>\n          </IconButton>\n          </span>\n            <IconButton\n                color=\"secondary\"\n                onClick={this.updateImageState('undo')}>\n              <Icon>undo</Icon>\n            </IconButton>\n            <IconButton\n                color=\"secondary\"\n                onClick={this.updateImageState('restore')}>\n              <Icon>compare</Icon>\n            </IconButton>\n            <IconButton\n                color=\"secondary\"\n                onClick={this.updateImageState('redo')}>\n              <Icon>redo</Icon>\n            </IconButton>\n          </div>\n        </Paper>\n    )\n  }\n}\n\nexport default WorkspaceBar;\n","import React, {Component} from 'react';\nimport Paper from '@material-ui/core/Paper'\nimport ImageTabs from './ImageTabs'\nimport theme from '../../theme/'\nimport WorkspaceBar from './WorkspaceBar';\nimport ProcessImage from '../../../processor/image/ProcessImage'\nimport RegionSelect from 'react-region-select';\nimport objectAssign from 'object-assign';\nimport Button from '@material-ui/core/Button';\n\nconst workspaceStyle = {\n  background: theme.palette.primary.main,\n  height: \"100%\",\n  width: \"71vw\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignContent: \"stretch\"\n};\n\nconst canvasContainerStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  height: \"95%\",\n  overflow: \"auto\",\n};\n\nconst regionStyle = {\n  background: 'rgba(0, 102, 204, 0.5)'\n};\n\n/**\n * Component used to render the main workspace\n * to work with images. It provides a tab\n * environment.\n * @param props\n */\nclass ImageWorkspace extends Component {\n  canvasRef;\n  state = {\n    x: -1,\n    y: -1,\n    regions: [],\n  };\n\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.regionRenderer = this.regionRenderer.bind(this);\n\t\tthis.updateRegions = this.updateRegions.bind(this);\n    this.props.keyController(\"Escape\", this.handleKeyPress);\n  }\n\n  componentDidMount() {\n    this.props.controller.setCanvas(this.canvasRef.current);\n  }\n\n  canvasMovement = (event) => {\n    this.setState({x: event.nativeEvent.offsetX, y: event.nativeEvent.offsetY});\n  };\n\n  mouseLeaved = event => {\n    this.setState({x: -1, y: -1});\n  }\n\n setCropState = () => {\n    this.state.cropEnabled = !this.state.cropEnabled;\n }\n\nhandleCrop = () => {\n    let originalImageData = this.props.controller.getSelectedImage();\n\n    let fromX = originalImageData.getWidth() * (this.state.regions[0].x/100);\n    let fromY = originalImageData.getHeight() * (this.state.regions[0].y/100);\n    let toX =  originalImageData.getWidth() * (this.state.regions[0].width/100);\n    let toY =  originalImageData.getHeight() * (this.state.regions[0].height/100);\n\n    let ctx = this.props.controller.getCanvas().getContext('2d');\n    let imageData = ctx.getImageData(fromX, fromY, toX, toY);\n\n    this.handleKeyPress();\n    let image = new ProcessImage(originalImageData.getTitle() + \" - Copy.\" + originalImageData.getFormat(), imageData.width, imageData.height, imageData.data);\n    this.props.controller.add(image);\n\n}\n\n updateRegions (regions) {\n   if(this.props.controller.numberOfImages() > 0)\n      this.setState({\n\t\t      regions: regions\n       });\n\t}\n\n\tregionRenderer (regionProps) {\n\t\tif (!regionProps.isChanging) {\n\t\t\treturn (\n\n        <div style={{ position: 'absolute', bottom: '-2.5em'}}>\n        <Button variant=\"contained\" color=\"secondary\" onClick={this.handleCrop}>\n        Crop\n      </Button>\n\n      </div>\n\t\t\t);\n\t\t}\n\t}\n\n  handleKeyPress = () => {\n    this.setState({ regions: [] });\n}\n\n  render() {\n    let showCropper = {display: this.props.controller.numberOfImages > 0 ? \"none\" : \"block\"}\n\n    return(\n        <Paper\n            style={workspaceStyle}>\n          <ImageTabs\n              controller={this.props.controller}/>\n          <div style={canvasContainerStyle}>\n          <RegionSelect\n\t\t\t\t\t\tmaxRegions={1}\n\t\t\t\t\t\tregions={this.state.regions}\n            regionStyle={regionStyle}\n\t\t\t\t\t\tconstraint\n            regionRenderer={this.regionRenderer}\n\t\t\t\t\t\tonChange={this.updateRegions}\n\t\t\t\t\t\tstyle={showCropper}\n\t\t\t\t\t>\n\n          <canvas\n                ref={this.canvasRef}\n                onMouseMove={this.canvasMovement}\n                onMouseLeave={this.mouseLeaved}>\n              Your browser do not support canvas\n          </canvas>\n          </RegionSelect>\n\n          </div>\n          <WorkspaceBar\n              position={this.state}\n              controller={this.props.controller}/>\n        </Paper>\n    )\n  }\n}\n\n\n\nexport default ImageWorkspace;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography'\nimport './footer.css'\nimport theme from '../../theme'\n\nconst aStyle = {\n  textDecoration: \"none\",\n  color: theme.palette.secondary.main\n}\n\nfunction footer() {\n  return(\n      <React.Fragment>\n        <Typography>\n          <span>By </span>\n          <a\n              style={aStyle}\n              href=\"https://github.com/CristianAbrante\">\n            Cristian Abrante\n          </a>\n          <span> & </span>\n          <a\n              style={aStyle}\n              href=\"https://github.com/AlberTJ97\">\n            Alberto González\n          </a>\n        </Typography>\n      </React.Fragment>\n  )\n}\n\nexport default footer;","import ProcessImage from './ProcessImage';\n\nclass Histogram {\n  image;\n  count = {\n    r: [],\n    g: [],\n    b: [],\n    brightness: []\n  };\n\n  accumulative = {\n    r: [],\n    g: [],\n    b: [],\n    brightness: []\n  };\n\n  min = {\n    r: 0,\n    g: 0,\n    b: 0,\n    brightness: 0\n  };\n\n  max = {\n    r: 0,\n    g: 0,\n    b: 0,\n    brightness: 0\n  };\n\n  mean = {\n    r: 0,\n    g: 0,\n    b: 0,\n    brightness: 0\n  };\n\n  stdVar = {\n    r: 0,\n    g: 0,\n    b: 0,\n    brightness: 0\n  };\n\n  entropy = {\n    r: 0,\n    g: 0,\n    b: 0,\n    brightness: 0\n  };\n\n  constructor(image) {\n    this.setImage(image);\n  }\n\n  setImage = image => {\n    this.image = image;\n    this.setCount();\n    this.setAccumulativeCount();\n    this.setMean();\n    this.setStdVar();\n    this.setMinMax();\n    this.setEntropy();\n  };\n\n  getCount = level => {\n    return {\n      r: this.count.r[level],\n      g: this.count.g[level],\n      b: this.count.b[level],\n      brightness: this.count.brightness[level]\n    }\n  };\n\n  getAccumulativeCount = level => {\n    return {\n      r: this.accumulative.r[level],\n      g: this.accumulative.g[level],\n      b: this.accumulative.b[level],\n      brightness: this.accumulative.brightness[level]\n    }\n  };\n\n  getProbability = level => {\n    return {\n      r: this.getCount(level).r / this.getNumberOfPixels(),\n      g: this.getCount(level).g / this.getNumberOfPixels(),\n      b: this.getCount(level).b / this.getNumberOfPixels(),\n      brightness: this.getCount(level).brightness / this.getNumberOfPixels()\n    }\n  };\n\n  getAccumulativeProbability = level => {\n    return {\n      r: this.getAccumulativeCount(level).r / this.getNumberOfPixels(),\n      g: this.getAccumulativeCount(level).g / this.getNumberOfPixels(),\n      b: this.getAccumulativeCount(level).b / this.getNumberOfPixels(),\n      brightness: this.getAccumulativeCount(level).brightness / this.getNumberOfPixels()\n    }\n  };\n\n  getMean = () => {\n    return this.mean;\n  };\n\n  getStdVar = () => {\n    return this.stdVar;\n  };\n\n  getMax = () => {\n    return this.max;\n  };\n\n  getMin = () => {\n    return this.min;\n  };\n\n  getEntropy = () => {\n    return this.entropy;\n  };\n\n  getImage = () => {\n    return this.image;\n  };\n\n  getImageWidth = () => {\n    return this.getImage().getWidth();\n  };\n\n  getImageHeight = () => {\n    return this.getImage().getHeight();\n  };\n\n  getNumberOfPixels = () => {\n    return this.getImage().getNumberOfPixels();\n  };\n\n  getFormattedCount = component => {\n    return this.formatData(this.count[component]);\n  };\n\n  getFormattedAccumulativeCount = component => {\n    return this.formatData(this.accumulative[component]);\n  };\n\n  getFormattedData = (component, accumulative) => {\n    if (accumulative) {\n      return this.getFormattedAccumulativeCount(component);\n    } else {\n      return this.getFormattedCount(component);\n    }\n  };\n\n  formatData = array => {\n    let data = [];\n    for (let i = 0; i < array.length; i++) {\n      data.push({x: i, y: array[i]});\n    }\n    return data;\n  };\n\n  initializeObject = obj => {\n    let components = Object.keys(obj);\n    for (let k = 0; k < components.length; k++) {\n      obj[components[k]] =\n          Array.apply(null, Array(ProcessImage.MAX_PIXEL_VALUE)).fill(0);\n    }\n  };\n\n  setCount = () => {\n    this.initializeObject(this.count);\n    let components = Object.keys(this.count);\n    for (let i = 0; i < this.getImageWidth(); i++) {\n      for (let j = 0; j < this.getImageHeight(); j++) {\n        if (this.image.getAlphaComponent(i, j) !== 0) {\n          for (let k = 0; k < components.length; k++) {\n            let component = components[k];\n            let value = this.image.getColor(i, j, component);\n            this.count[component][value] += 1;\n          }\n        }\n      }\n    }\n  };\n\n  setAccumulativeCount = () => {\n    this.initializeObject(this.accumulative);\n    let components = Object.keys(this.accumulative);\n    for (let k = 0; k < components.length; k++) {\n      let component = components[k];\n      this.accumulative[component][0] = this.getCount(0)[component];\n    }\n    for (let i = 1; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\n      for (let k = 0; k < components.length; k++) {\n        let component = components[k];\n        let prevValue = this.getAccumulativeCount(i - 1)[component];\n        let actualValue = this.getCount(i)[component];\n        this.accumulative[component][i] = prevValue + actualValue;\n      }\n    }\n  };\n\n  setMean = () => {\n    let components = Object.keys(this.mean);\n    for (let i = 0; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\n      for (let k = 0; k < components.length; k++) {\n        let component = components[k];\n        this.mean[component] += this.getCount(i)[component] * i;\n      }\n    }\n    for (let k = 0; k < components.length; k++) {\n      let component = components[k];\n      this.mean[component] /= this.getNumberOfPixels();\n    }\n  };\n\n  setStdVar = () => {\n    let components = Object.keys(this.stdVar);\n    for (let i = 0; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\n      for (let k = 0; k < components.length; k++) {\n        let component = components[k];\n        this.stdVar[component] +=\n            this.getCount(i)[component] * Math.pow(i - this.mean[component], 2);\n      }\n    }\n    for (let k = 0; k < components.length; k++) {\n      let component = components[k];\n      this.stdVar[component] =\n          Math.sqrt(this.stdVar[component] / this.getNumberOfPixels());\n    }\n  };\n\n  setMinMax = () => {\n    let components = Object.keys(this.min);\n    let selected = {};\n    for (let k = 0; k < components.length; k++) {\n      selected[components[k]] = false;\n    }\n    for (let i = 0; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\n      for (let k = 0; k < components.length; k++) {\n        let component = components[k];\n        if (this.getCount(i)[component] !== 0) {\n          if (!selected[component]) {\n            this.min[component] = i;\n            selected[component] = true;\n          }\n          this.max[component] = i;\n        }\n      }\n    }\n  };\n\n  setEntropy = () => {\n    this.entropy = {\n      r: 0,\n      g: 0,\n      b: 0,\n      brightness: 0\n    };\n\n    let components = Object.keys(this.entropy);\n    for (let i = 0; i < ProcessImage.MAX_PIXEL_VALUE; i++) {\n      for (let k = 0; k < components.length; k++) {\n        let component = components[k];\n        let p = this.getProbability(i)[component];\n        if (p !== 0 && p >= 0) {\n          this.entropy[component] += p * Math.log2(p);\n        }\n      }\n    }\n    for (let k = 0; k < components.length; k++) {\n      let component = components[k];\n      this.entropy[component] = -this.entropy[component];\n    }\n  };\n}\n\nexport default Histogram;\n","import Histogram from '../image/Histogram';\n\nclass ImageController {\n  images;\n  histograms;\n  canvas;\n  updateMethod;\n  resetActionMethod;\n  selected;\n\n  constructor(updateMethod, resetActionMethod) {\n    this.images = [];\n    this.histograms = [];\n    this.updateMethod = updateMethod;\n    this.resetActionMethod = resetActionMethod;\n  }\n\n  add = (image) => {\n    this.images.push(image);\n    this.histograms.push(new Histogram(image));\n    this.selected = this.numberOfImages() - 1;\n    this.updateImageCanvas();\n    this.resetActionMethod(undefined);\n    this.updateMethod();\n  };\n\n  delete = (index) => {\n    if(index > -1) {\n      this.images.splice(index, 1);\n      this.histograms.splice(index, 1);\n    }\n\n    if(this.selected == this.images.length || this.selected > index){\n      this.selected--;\n    } else if(index == this.selected && (index < this.selected || index > this.selected)){\n      this.selected--;\n    }\n\n    this.updateImageCanvas();\n    this.resetActionMethod(undefined);\n    this.updateMethod();\n  }\n\n  numberOfImages = () => {\n    return this.images.length;\n  };\n\n  getImageTitles = () => {\n    return this.images.map(image => {return image.getTitle()});\n  };\n\n  setCanvas = canvas => {\n    this.canvas = canvas;\n  };\n\n  getCanvas = () => {\n    return this.canvas;\n  }\n\n  updateSelectedImage = index => {\n    this.selected = index;\n    this.updateImageCanvas();\n    this.resetActionMethod(undefined);\n    this.updateMethod();\n  };\n\n  setImage = (index, image) => {\n    this.images[index] = image;\n    this.updateImageCanvas();\n    this.resetActionMethod(undefined);\n    this.updateMethod();\n  }\n\n  updateImageCanvas = () => {\n    let imageToDisplay = this.getSelectedImage();\n    let ctx = this.canvas.getContext('2d');\n\n    if(imageToDisplay !== undefined){\n      this.canvas.width = imageToDisplay.getWidth();\n      this.canvas.height = imageToDisplay.getHeight();\n      ctx.putImageData(imageToDisplay.getImageData(), 0, 0);\n    }else{\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  };\n\n  getSelectedImage = () => {\n    return this.images[this.getSelectedImageIndex()];\n  };\n\n  getCurrentHistogram = () => {\n    return this.histograms[this.getSelectedImageIndex()];\n  };\n\n  getSelectedImageIndex = () => {\n    return this.selected;\n  };\n\n  applyPointOperation(table, component) {\n    let image = this.getSelectedImage();\n    for (let i = 0; i < image.getWidth(); i++) {\n      for (let j = 0; j < image.getHeight(); j++) {\n        image.setPreviousState();\n        let imageColor = image.getColor(i, j, component);\n        image.setNextState();\n        let tableColor = table.getValue(imageColor);\n        image.setColor(i, j, component, tableColor);\n      }\n    }\n    this.updateImageHistogram();\n    this.updateImageCanvas();\n    this.updateMethod();\n  }\n\n  isAnyImageSelected = () => {\n    return this.images.length !== 0;\n  };\n\n  updateImageHistogram = () => {\n    let histogram = this.histograms[this.getSelectedImageIndex()];\n    histogram.setImage(this.getSelectedImage());\n  };\n\n  getImageIndex = title => {\n    let titles = this.getImageTitles();\n    for (let i = 0; i < titles.length; i++) {\n      if (titles[i] === title)\n        return i;\n    };\n    return undefined;\n  };\n\n  static imageIsValid(image) {\n    if (image === undefined) {\n      return false;\n    }\n    if (image.getImageData() === undefined) {\n      return false;\n    }\n  }\n}\n\nexport default ImageController;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport MainMenu from \"./components/layout/menu/MainMenu\";\nimport MenuData from \"./data/menu\";\nimport Info from \"./components/layout/info/Info\";\nimport Action from \"./components/layout/actions/Action\";\nimport ImageWorkspace from \"./components/layout/image-workspace/ImageWorkspace\"\nimport Footer from \"./components/layout/footer/\"\nimport Theme from \"./components/theme\"\n\nimport ImageController from './processor/controller/ImageController';\n\nimport Paper from '@material-ui/core/Paper';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\n\nimport KeyHandler, { KEYDOWN } from 'react-key-handler';\n\nclass App extends Component {\n  state = {\n    controller: undefined,\n    currentAction: undefined,\n    onKeyPressed: undefined,\n    keyAction: undefined\n  };\n\n  constructor(props) {\n    super(props);\n    this.state.controller = new ImageController(this.updateController, this.updateCurrentAction);\n  }\n\n  updateController = () => {\n    this.setState({controller: this.state.controller});\n  };\n\n  updateCurrentAction = action => {\n    this.setState({currentAction: action});\n  };\n\n  updateKeyController = (key, action) => {\n    this.setState({onKeyPressed: key, keyAction: action});\n  };\n\n  render() {\n    const gridContainerClass = \"grid-container\";\n    const gridItemClass = \"grid-item\";\n    return (\n      <MuiThemeProvider theme={Theme}>\n        <Paper className={gridContainerClass + \" App\"}>\n        <KeyHandler\n            keyEventName={KEYDOWN}\n            keyValue={this.state.onKeyPressed}\n            onKeyHandle={this.state.keyAction}\n          />\n          <div className={gridItemClass + \" item-menu\"}>\n            <MainMenu\n                items={MenuData.items}\n                updateAction={this.updateCurrentAction}/>\n          </div>\n          <div className={gridItemClass + \" item-workspace\"}>\n            <ImageWorkspace\n                controller={this.state.controller}\n                keyController={this.updateKeyController}\n                />\n          </div>\n          <div className={gridItemClass + \" item-info\"}>\n            <Info\n                controller={this.state.controller}/>\n          </div>\n          <div className={gridItemClass + \" item-action\"}>\n            <Action\n                controller={this.state.controller}\n                currentAction={this.state.currentAction}/>\n          </div>\n          <div className={gridItemClass + \" item-footer\"}>\n            <Footer />\n          </div>\n        </Paper>\n      </MuiThemeProvider>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}